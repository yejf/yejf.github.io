<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>快乐编程</title>
  
  <subtitle>热爱编程、热爱学习、相信科技的力量</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.teacherye.com/"/>
  <updated>2019-12-25T08:44:51.171Z</updated>
  <id>http://www.teacherye.com/</id>
  
  <author>
    <name>Teacher Ye</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Redis的主从复制</title>
    <link href="http://www.teacherye.com/2019/12/24/redis/Redis-4-%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/"/>
    <id>http://www.teacherye.com/2019/12/24/redis/Redis-4-主从复制/</id>
    <published>2019-12-24T09:01:47.000Z</published>
    <updated>2019-12-25T08:44:51.171Z</updated>
    
    <content type="html"><![CDATA[<h1 id="redis的主从复制"><a href="#redis的主从复制" class="headerlink" title="redis的主从复制"></a>redis的主从复制</h1><blockquote><p>master以写为主，slave以读为主</p></blockquote><h2 id="是什么？"><a href="#是什么？" class="headerlink" title="是什么？"></a>是什么？</h2><h2 id="能干嘛？"><a href="#能干嘛？" class="headerlink" title="能干嘛？"></a>能干嘛？</h2><h2 id="怎么玩？"><a href="#怎么玩？" class="headerlink" title="怎么玩？"></a>怎么玩？</h2><blockquote><p>原则：</p><ul><li>配从(库)不配主(库)</li><li>从库配置: slaveof 主库IP 主库端口</li><li>修改配置文件细节<ol><li>copy 多个redis.conf 文件</li><li>开启daemonize yes </li><li>修改PID文件名字 </li><li>指定端口</li><li>Log文件名字</li><li>Dump.rdb名字</li></ol></li><li>常用三招<ol><li>一主二仆, 正常模式，利用slaveof IP port来指定为从机。</li><li>薪火相传，从机也可以接收其它从机的slaveof命令，从而形成A为主机，B slaveof A, 然后，C slaveof B。当A 写了数据，B会得到同步，同理，C也就会得到同步，这就构成了去中心化的方式。</li><li>反客为主，当主机挂掉后，从机默认会原地待命，这样性能不高，我们可以在其中的一个从机中，使用命令<code>slave no one</code>来停止与其它数据库的同步，转成主数据库，这样这个从机就反客为主了。</li></ol></li></ul></blockquote><p>查看当前redis的复制身份，使用命令：<code>info replication</code></p><p>默认情况下，我们启动redis-server后都是以master身份存在的，使用slaveof命令后就变成了slave身份，除非在配置文件中指定身份。</p><p>当主机挂掉后，所有从机待命，主机恢复后，一切照旧。<br>当从机挂掉后，重启从机，从机的身份会是master，还要再次使用 slaveof命令连接到主机后才会成为slave机。</p><h2 id="复制原理"><a href="#复制原理" class="headerlink" title="复制原理"></a>复制原理</h2><ol><li>Slave启动成功连接到master后会发送一个sync命令</li><li>master接到命令启动后台的存盘进程一，同时收集所有接收到的用于修改数据集的命令，在后台进程执行完毕之后，master将传送整个数据文件到slave，以完成一次完全同步。</li><li>全量复制：而slave服务在接收到数据库文件数据后，将其存盘并加载到内存中。<br>4.增量复制：master继续将新的所有收集到的修改命令依次传给slave，完成同步，但是只要是重新连接master，一次完全同步（全量复制）将被自动执行。</li></ol><h2 id="哨兵模式-sentinel"><a href="#哨兵模式-sentinel" class="headerlink" title="哨兵模式(sentinel)"></a>哨兵模式(sentinel)</h2><blockquote><p>现在是最主要的模式，相当于是自动版的反客为主，它的规则是当master挂掉后，哨兵会从所有的从机中进行投票，找出票数最多的从机，把它做为新的master，其它的从机会自动同步到这台主机上。</p></blockquote><p>操作步骤：</p><ol><li>把结构调整到1主多从模式</li><li>新建一个 sentinel.conf 文件，并加入如下内容<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sentinel monitor 自定义主机名 127.0.0.1 6379 1</span><br></pre></td></tr></table></figure></li></ol><p>其中，主机名随便命名，127.0.0.1 和 6379 是要哨兵监控主机地址和端口。1 代表哪个从机的票数多，就选哪个做为新的主机。</p><ol><li>调用<code>redis-sentinel 命令启动哨兵</code></li></ol><p>完成以上步骤后，如果被哨兵监控的主机挂起了，则哨兵会根据规则重新挑选出一个从机做为新的主机。以保证服务的稳定。</p><p>缺点：</p><blockquote><p>复制的延迟，由于所有的写操作都是先在master上操作，然后同步更新到slave上，所以从master同步到slave机器有一定的延迟，当系统很繁忙的时候，延迟问题会更加严重，slave机器数量的增加也会使这个问题更加严重。</p></blockquote>]]></content>
    
    <summary type="html">
    
      redis的主从复制如何配置
    
    </summary>
    
      <category term="存储中间件" scheme="http://www.teacherye.com/categories/%E5%AD%98%E5%82%A8%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
      <category term="redis" scheme="http://www.teacherye.com/categories/%E5%AD%98%E5%82%A8%E4%B8%AD%E9%97%B4%E4%BB%B6/redis/"/>
    
    
      <category term="redis" scheme="http://www.teacherye.com/tags/redis/"/>
    
      <category term="分布式存储中间件" scheme="http://www.teacherye.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E5%AD%98%E5%82%A8%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Redis的持久化和事务</title>
    <link href="http://www.teacherye.com/2019/12/20/redis/Redis-3-%E6%8C%81%E4%B9%85%E5%8C%96%E5%92%8C%E4%BA%8B%E5%8A%A1/"/>
    <id>http://www.teacherye.com/2019/12/20/redis/Redis-3-持久化和事务/</id>
    <published>2019-12-20T13:01:47.000Z</published>
    <updated>2019-12-21T14:11:32.308Z</updated>
    
    <content type="html"><![CDATA[<h1 id="redis的持久化和事务"><a href="#redis的持久化和事务" class="headerlink" title="redis的持久化和事务"></a>redis的持久化和事务</h1><blockquote></blockquote><h2 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h2><blockquote><p>redis有两种持久化方式，分别为</p><ul><li>RDB[Redis DataBase]</li><li>AOF[Append Only File]</li></ul></blockquote><h3 id="rdb【Redis-DataBase】方式"><a href="#rdb【Redis-DataBase】方式" class="headerlink" title="rdb【Redis DataBase】方式"></a>rdb【Redis DataBase】方式</h3><blockquote><p>在指定的时间间隔内将内存中的数据集快照写入磁盘，也就是行话讲的snapshot快照，它恢复时是将快照文件直接读到内存里。</p></blockquote><p>RDB是怎么做的？</p><blockquote><p>Redis会单独创建(fork)一个子进程来进行持久化，会先将数据写入到一个临时文件中，待持久化过程都结束了，再用这个临时文件替换上次持久化好的文件。整个过程中，主进程是不进行任何IO操作的，这就确保了极高的性能。如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那RDB方式要比AOF方式更加的高效。RDB的缺点是最后一次持久化后的数据可能丢失。</p></blockquote><p>RDB的优势</p><ul><li>适合大规模的数据恢复</li><li>对数据完整性和一致性要求不高</li></ul><p>RDB的劣势</p><ul><li>在一定间隔时间做一次备份，所以如果redis意外down掉的话，就会丢失最后一次快照后的所有修改</li><li>FORK的时候，内存中的数据被克隆了一份，大致2倍的膨胀性需要考虑。</li></ul><h3 id="aof"><a href="#aof" class="headerlink" title="aof"></a>aof</h3><blockquote><p>以日志的形式来记录每个写操作，将Redis执行过的所有写指令记录下来(读操作不记录),只许追加文件但不可以改写文件，Redis启动之初会读取该文件重新构建数据，换言之，redis重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作。</p></blockquote><p>1.AOF的优点</p><ul><li>每修改同步：appendfsync always，同步持久化，每次发生数据变更会被立即记录到磁盘，性能较差但数据完整性比较好。</li><li>每秒同步：appendfsync everysec, 异步操作，每秒记录，如果一稍内宕机，有数据丢失。</li><li>不同步：appendfsync no，从不同步</li></ul><p>2.AOP的缺点</p><ul><li>相同数据集的数据而言aof文件要远大于rdb文件，恢复速度慢于rdb</li><li>aof运行效率要慢于rdb，每秒同步策略效率较好。</li></ul><p>注：<br>AOF和RDB是可以共存的，当即存在dump.rdb文件，也存在appendonly.aof文件时，我们启动redis-server时，它会优先读取appendonly.aof文件，因为这个文件可以更好地保证数据的稳定性。</p><p>如果因为网络问题或是丢包等事情造成appendonly.aof文件损坏，导致redis-server启不了，则可以执行如下命令来恢复appendonly.aof文件<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-check-aof --fix appendonly.aof</span><br></pre></td></tr></table></figure></p><p>此命令会把所有不符合appendonly.aof文件格式的内容全部截掉，以保证aof文件合格。</p><ol><li>AOF重写[rewrite]<blockquote><p>是什么？</p></blockquote></li></ol><blockquote><p>重写原理：AOF文件持续增长而过大时，会fork出一条新进程来将文件重写(也是先写临时文件最后再rename),遍历新进程的内存中数据，每条记录有一条的Set语句。重写AOF文件的操作，并没有读取旧的aof文件，而是将整个内存中的数据库内容用命令的方式重写了一个新的aof文件，这点和快照有点类似</p><p>触发机制：Redis会记录上次重写时的AOF文件大小，默认配置是当AOF文件大小是上次rewrite后大小的一倍且文件大于64M时触发。【一般大型公司这个值会改成3G左右大小】</p><p>相关的配置项</p><ul><li>appendonly  //改为 yes 表示启用 aof机制</li><li>appendfilename  //指定生成的 aof文件名</li><li>appendfsync   //异步</li><li>no-appendfsync-on-rewrite   //重写时是否可以运用appendfsync,用默认no即可，保数据安全性</li><li>auto-aof-rewrite-min-size  //设置重写的基准值，默认是64M</li><li>auto-aof-rewrite-percentage  //设置重写的基准值，默认是100</li></ul></blockquote><h3 id="RDB-和-AOF使用建议"><a href="#RDB-和-AOF使用建议" class="headerlink" title="RDB 和 AOF使用建议"></a>RDB 和 AOF使用建议</h3><ol><li><p>如果是只做缓存的话，可以不使用任何的持久化方式，也就是关掉RDB和AOF</p></li><li><p>如果对数据的一致性要求不高时，就可以直接使用RDB，它是最简单的持久化策略</p></li><li><p>如果同时开启2种持久化方式的话，当redis重启的时候会优先载入AOF文件来恢复原始的数据，因为在通常情况下AOF文件保存的数据集要比RDB文件保存的数据集要完整。RDB的数据不实时，同时使用两者时服务器重启也只会找AOF文件。那要不要只使用AOF呢？作者建议不要，因为RDB更适合用于备份数据库(AOF在不断变化，不好备份)，快速重启，而且不会有AOF可能潜在的BUG，留着作为一个万一的手段。</p></li></ol><h3 id="性能建议"><a href="#性能建议" class="headerlink" title="性能建议"></a>性能建议</h3><blockquote><p>因为RDB文件只用作后备用途，建议只在slave上持久化RDB文件，而且只要15分钟备份一次就够了，只保留<code>save 900 1</code>这条规则。</p><p>如果Enable AOF，好处是在最恶劣情况下也只会丢失不超过2秒数据，启动脚本较简单只load自己的AOF文件就可以了。代价一是带来了持续的IO，二是AOF rewrite的最后将rewrite过程中产生的新数据写到新文件造成的阻塞几乎是不可避免的。只要硬盘许可，应该尽量减少AOF rewrite的频率，AOF重写的基础大小默认值64M太小了，可以设到5G以上。默认超过原大小100%大小时重写可以改到适当的数值。</p><p>如果不Enable AOF，仅靠Master-Slave Replication实现高可用性也可以。能省掉一大笔IO也减少了rewrite时带来的系统波动。代价是如果Master/Slave同时倒掉，会丢失十几分钟的数据，启动脚本也要比较两个Master/Slave中的RDB文件，载入较新的那个。【新浪微博就选用了这种架构】</p></blockquote><h2 id="Redis事务"><a href="#Redis事务" class="headerlink" title="Redis事务"></a>Redis事务</h2><ol><li><p>定义</p><blockquote><p>可以一次执行多个命令，本质是一组命令的集合。一个事务中的所有命令都会被序列化。按顺序地串行化执行而不会被其它命令插入，不许加塞.</p></blockquote></li><li><p>事务能干什么？</p><blockquote><p>一个队列中，一次性、顺序性、排他性的执行一系列命令。</p></blockquote></li><li><p>该如何使用?</p><blockquote><p>常用命令</p></blockquote></li></ol><ul><li>DISCARD 消取事务，放弃执行事务块内的所有命令</li><li>EXEC 执行所有事务块内的命令</li><li>MULTI 标记一个事务块的开始</li><li>UNWATCH 取消WATCH命令对所有 key的监视</li><li>WATCH key [key …] 监视一个(或多个)key,如果在事务执行之前这个(或这些)key被其它命令所改动，那么事务将被打断</li></ul><p>注：redis支持部份事务，它有如下几种情况</p><ul><li>正常执行,就是加入事务的所有命令都是正确的，并且执行时也没有错误发生</li><li>放弃事务，就是加入事务的所有命令都是正确，并且可以执行的，但是，最后没有执行<code>EXEC</code>,而是执行了<code>DISCARD</code>，表示放弃此事务</li><li>全体连坐，是指加入事务的命令中，其中有任何一条命令语法是错误的，则再加入时，REDIS就会报错，那本次事务的所有命令都会撤消。</li><li>冤有头债有主，是指加入事务的命令中，语法都没有错误，但是其中有任何一条或多条存在运行时错误【比如字符串值做了自增】,则这种情况下，REDIS不会回滚事务中的所有命令，而只是运行时错误的命令不执行，其它命令正常执行，这也就是所谓的部份支持事务。</li><li>watch监控，监视一个或多个key,如果这个key被别的客户改变了，则在事务提交时会执行失败。</li></ul><p>小结：</p><blockquote><p>watch指令，类似于乐观锁，事务提交时，如果key的值已被另的客户改为，比如某个list已被别的客户端push/pop过了，整个事务队列都不会被执行。<br>通过watch命令在事务之前监控了多个key，倘若在watch之后有任何key的值发生了变化，EXEC命令执行的事务都将被放弃，同时返回Nullmulti-bulk应答通知调用者事务执行失败。</p></blockquote><ol><li>三个阶段</li></ol><ul><li>开启：以MULTI开始一个事务</li><li>入队：将多个命令入队到事务中，接到这些命令并不会立即执行，而是放到等待执行的事务队列里面</li><li>执行：由EXEC命令触发事务</li></ul><ol><li>三个特性</li></ol><ul><li>单独的隔离操作：事务中的所有命令都会序列化、按顺序执行。事务在执行的过程中，不会被其它客户端发送来的命令请求所打断。</li><li>没有隔离级别的概念：队列中的命令没有提交之前都不会实际的被执行，因为事务提交前任何指令都不会被实际执行，也就不存在“事务内的查询要看到事务的更新，在事务外查询不能看到”这个让人万分头痛的问题。</li><li>不保证原子性：redis同一个事务中如果有一条命令执行失败，其后的命令仍然会被执行，没有回滚。</li></ul>]]></content>
    
    <summary type="html">
    
      redis的持久化，包含rdb和aof，以及redis的事务处理
    
    </summary>
    
      <category term="存储中间件" scheme="http://www.teacherye.com/categories/%E5%AD%98%E5%82%A8%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
      <category term="redis" scheme="http://www.teacherye.com/categories/%E5%AD%98%E5%82%A8%E4%B8%AD%E9%97%B4%E4%BB%B6/redis/"/>
    
    
      <category term="redis" scheme="http://www.teacherye.com/tags/redis/"/>
    
      <category term="分布式存储中间件" scheme="http://www.teacherye.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E5%AD%98%E5%82%A8%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Redis的数据类型和常用命令</title>
    <link href="http://www.teacherye.com/2019/12/19/redis/Redis-2-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://www.teacherye.com/2019/12/19/redis/Redis-2-数据类型和常用命令/</id>
    <published>2019-12-19T13:01:47.000Z</published>
    <updated>2020-05-28T14:57:17.323Z</updated>
    
    <content type="html"><![CDATA[<h1 id="学习大纲"><a href="#学习大纲" class="headerlink" title="学习大纲"></a>学习大纲</h1><ul><li>redis怎么玩</li><li>5种数据类型</li><li>通用型命令</li><li>针对key的命令</li><li>针对String[字符串]类型值的命令</li><li>针对list[列表]类型的命令</li><li>针对hash[哈希表]类型的命令</li><li>针对set[集合]类型的命令</li><li>针对zset[有序集合]类型的命令</li></ul><p>有关redis的命令文档大全，可以查看 <code>http://redisdoc.com/</code>，<a href="http://redisdoc.com/" target="_blank" rel="noopener">点击进入</a></p><h2 id="redis怎么玩"><a href="#redis怎么玩" class="headerlink" title="redis怎么玩"></a>redis怎么玩</h2><ol><li>服务端启动后，通过执行 <code>redis-cli -p 6379</code> 连接上来</li><li>在这个窗口中执行 redis相关的命令即可</li></ol><blockquote><p>注：key都是字符串类型，并且redis默认支持16个库。</p></blockquote><h2 id="redis中5种数据类型"><a href="#redis中5种数据类型" class="headerlink" title="redis中5种数据类型"></a>redis中5种数据类型</h2><ol><li><p>string,字符串类型，最大长度512M，是redis中最常用最基本的数据类型，其本操作如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">set k1 v1</span><br><span class="line">set k2 v2</span><br><span class="line">//可以通过get命令来获取key的值</span><br><span class="line">get k1</span><br><span class="line">get k2</span><br></pre></td></tr></table></figure></li><li><p>list, 列表类型，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）一个列表最多可以包含 2的32次方 - 1 个元素 (即4294967295, 超过42亿个元素)。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lpush mylist e1 e2 e3</span><br><span class="line">lpush mylist e4 e5</span><br><span class="line">//可以通过 lrange来取出列表元素</span><br><span class="line">lrange mylist 0 2</span><br></pre></td></tr></table></figure></li><li><p>hash,哈希表，是一个 string 类型的 field 和 value 的映射表，hash 特别适合用于存储对象。Redis 中每个 hash 可以存储 2的32次方 - 1 个键值对（42亿多个）。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hmset mymap name "jack" gender "M" age 18 description "good boy"</span><br><span class="line">//通过 hgetall 可以取出这些对象</span><br><span class="line">hgetall mymap</span><br></pre></td></tr></table></figure></li><li><p>set, 集合,是String类型的无序集合。集合成员是唯一的，这就意味着集合中不能出现重复的数据。Redis 中集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是 O(1)。集合中最大的成员数为 2的32次方 - 1 (4294967295, 每个集合可存储42多亿个成员)。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sadd myset oracle</span><br><span class="line">sadd myset mysql</span><br><span class="line">sadd myset redis</span><br><span class="line">sadd myset mysql   //这个将添加不进去，因为不允许重复</span><br><span class="line">//通过 smembers 命令可以取出key对应的所有list元素</span><br><span class="line">smembers myset</span><br></pre></td></tr></table></figure></li><li><p>zset,有序集合，有序集合和集合一样也是string类型元素的集合,且不允许重复的成员。不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。有序集合的成员是唯一的,但分数(score)却可以重复。集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。 集合中最大的成员数为 2的32 - 1 (4294967295, 每个集合可存储42多亿个成员)。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">zadd myzset 1 oracle</span><br><span class="line">zadd myzset 2 mysql</span><br><span class="line">zadd myzset 3 redis</span><br><span class="line">zadd myzset 4 mysql    //这个会把之前的mysql的score给覆盖掉</span><br><span class="line">//取出来</span><br><span class="line">zrange myzset 0 10 withscores    //不加 withscore 选项时，不会出现分值</span><br></pre></td></tr></table></figure></li></ol><h2 id="通用型命令"><a href="#通用型命令" class="headerlink" title="通用型命令"></a>通用型命令</h2><ol><li><p>切换库命令 <code>select 0 ~ 15</code>,  其中，0表示第一个库，15代表第16个库，默认情况下，redis有16个库。</p></li><li><p>清除当前库命令 <code>flushdb</code>，只清除当前的仓库</p></li><li><p>清除所有库命令 <code>flushall</code>, 清除所有的仓库。</p></li><li><p>查看当前库中key的数量 <code>dbsize</code></p></li></ol><h2 id="key相关的命令"><a href="#key相关的命令" class="headerlink" title="key相关的命令"></a>key相关的命令</h2><ol><li><p><code>keys *</code>  表示查看当前库中所有的key，支持通配，* 通配所有， ? 通配单个字符，如：<code>keys k?</code> 只找出key中以k开头，并且后面只跟0或1个字符的key</p></li><li><p><code>exists key</code> 用来判断这个key在当前库中是否存在，存在返回1，不存在返回0</p></li><li><p><code>move key 0 ~ 15</code>, 用来移动key到指定的仓库，其中，key就是在当前库中已有的key, 0~15代表库的序号。</p></li><li><p><code>expire key second</code>,用来给key指定过期时间，以秒为单位</p></li><li><p><code>ttl key</code>,用来查看key还有多久过期，返回-2表示已过期，-1表示永不过期，正数表示剩下的时间秒。</p></li><li><p><code>type key</code>，用来查看key的类型。</p></li></ol><h2 id="String类型相关的命令"><a href="#String类型相关的命令" class="headerlink" title="String类型相关的命令"></a>String类型相关的命令</h2><ol><li><code>set和get</code>, 设置和获取key的值</li><li><code>strlen key</code>, 获取key对应的字符串的长度</li><li><code>append key value</code>, 在key对应的字符串后面追加value字符串，形成新的字符串 </li><li><code>setrange key offset value</code>, 在key对应的字符串指定位置开始替换成新的value</li><li><code>getrange key start end</code>, 获取key对应字符串的起始位置到结束位置[含]的子串</li><li><code>incr和decr</code>, 只针对value是数字型的情况，用来进行自增和自减</li><li><code>incrby和decrby</code>, 同样只针对value是数字型的情况，指定步长进行自增和自减</li><li><code>setnx</code>, 是[set if Not eXists]的缩写，表示当key不存在的情况下，才可以设置成功，如果key已存在，则失败</li><li><code>setex</code>, 相当于是set命令和expire命令组合，不同在于此命令是一个原子[atomic]操作,当key已存在时，会覆盖原来的值。</li><li><code>mset和mget</code>，可以在一个原子操作中，同时设置多个值，此命令总是返回OK，如果key已存在，则覆盖掉原来的值。<br>11.<code>msetnx</code>，也是一个原子操作，当且仅当所有给定键都不存在时， 为所有给定键设置值，只要有一个key存在时，都不会设值。</li></ol><h2 id="list相关的命令"><a href="#list相关的命令" class="headerlink" title="list相关的命令"></a>list相关的命令</h2><ol><li><p><code>lpush,rpush,lrange</code>, 这三个命令是最常用的，分别表示从左边开始入栈【栈顶操作】，从右边开始入栈【栈尾操作】，以及查询出栈中的元素，如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lpush list01 1 2 3 4 5   //得到的栈是 5 4 3 2 1  【从栈顶进栈，先进后出】</span><br><span class="line">rpush list02 1 2 3 4 5   //得到的栈是 1 2 3 4 5   【从栈尾进栈，先进后出】</span><br><span class="line">lrange list01 0 -1   //取出栈中的所有元素</span><br></pre></td></tr></table></figure></li><li><p><code>lpop,rpop</code>, 这2条命令是出栈命令，其中lpop表示从栈顶取元素，rpop表示从栈尾取元素</p></li><li><code>lindex key index</code>, 表示根据下标来获取栈中的元素，如果下标不存在，则返回nil</li><li><code>lren key</code>, 用来获取指定的列表中元素的长度</li><li><code>lrem key count value</code>, 用来从列表中移除指定个数的value, 经常用来删除重复的元素</li><li><code>ltrim key start end</code>, 用来截取列表中的元素，从start开始，到end结束[含],并把返回的元素列表赋给key</li><li><code>rpoplpush key1 key2</code>, 把key1列表中的栈尾元素取出来放到key2列表中的栈顶中</li><li><code>lset key index value</code>, 重新设置列表中指定下标位置的元素值</li><li><code>linsert key before|after value1 value2</code>, 在列表中指定元素value1的前或后面插入新值value2,如果有多个重复的value1，则是参考第一个出现的value1</li></ol><h2 id="set-集合-相关的命令"><a href="#set-集合-相关的命令" class="headerlink" title="set[集合]相关的命令"></a>set[集合]相关的命令</h2><blockquote><p>集合是无序的，并且是不重复的。</p></blockquote><ol><li><code>sadd key value1 value2 ...</code>, 创建并添加元素到set集合中</li><li><code>smembers key</code>, 查看set集合中的所有元素</li><li><code>sismember key value</code>, 查看value是否存在于set集合中,如果存在，返回1，不存在，返回0</li><li><code>scard key</code>, 获取set集合中的元素个数</li><li><code>srem key value</code>, 从set集合中把value移除，如果元素不存在，则返回0，移除成功返回1</li><li><code>srandmember key count</code>, 从set集合中随机取出count个元素【很适合抽奖】</li><li><code>spop key</code>, 从set集合中随机取出一个元素，如果没有了元素，则这个key也消失【这点同 list】</li><li><code>smove key1 key2 member</code>, 把member元素从集合1中移动到集合2中，如果member不存在，则返回0</li><li><code>sdiff key1 key2</code>, 求两个集合的差集，返回集合1中有而集合2中没有的元素</li><li><code>sinter key1 key2</code>, 求两个集合的交集，返回集合1和集合2中共同都有的元素</li><li><code>sunion key1 key2</code>，求两个集合的并集，返回集合1和集合2中的元素并集</li></ol><h2 id="hash-哈希表-相关的命令"><a href="#hash-哈希表-相关的命令" class="headerlink" title="hash[哈希表]相关的命令"></a>hash[哈希表]相关的命令</h2><blockquote><p>还是键值对存储，不同之处在于它的value也是K-V对, K是不允许重复的</p></blockquote><ol><li><p><code>hset, hmset, hget, hmget</code>, 此4条命令分别是用来给hash设值，多个值一起设，取值，同时取多个值，如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hset user name jack   //把 属性为name，值为jack的K-V对象添加到哈希表中，哈希表的key是user</span><br><span class="line">hget user name        //取出user哈希表中的name key的值，结果是 "jack"</span><br><span class="line">hmset customer id 1 name peter phone 13899887766   //给 customer设置了3个key,分别是 id,name,phone</span><br><span class="line">hmget customer id name phone  //从customer表中同时取出3个key的值</span><br></pre></td></tr></table></figure></li><li><p><code>hgetall key</code>, 此命令是把key对应的哈希表中的所有K-V对全部取出来。</p></li><li><code>hdel key field [field]</code>, 删除key对应的哈希表中的K，可以同时删除多个K</li><li><code>hlen key</code>, 求哈希表的长度</li><li><code>hexists key field</code>, 判断哈希表中是否存在指定的K，存在返回1，不存在返回0</li><li><code>hkeys, kvals</code>, 此2个命令类似于java集合MAP API中的keyset()和values()方法，得到所有的key和所有的value</li><li><code>hincrby key field step</code>, 与string中的incrby类似，用来给哈希表中是整数的key进行增长，step是步长</li><li><code>hincrbyfloat key field step</code>, 同上面，不同在于此命令可以指定步长为小数</li><li><code>hsetnx key field value</code>, 中有当key中的field不存在，才能设置成功，如果本来就有field，则返回0</li></ol><blockquote><p>哈希表使用还是比较频繁的，以上命令需要多加练习</p></blockquote><h2 id="zset-有序集合-相关的命令"><a href="#zset-有序集合-相关的命令" class="headerlink" title="zset[有序集合]相关的命令"></a>zset[有序集合]相关的命令</h2><blockquote><p>有序集合是利用score来进行排序的，所以我们在放入数据到zset中时，需要自己指定一个score来与value对应。所以，它的语法是<code>zadd key score1 v1 score2 v2 ....</code>, key是键，score1 和 v1对应一个值。</p></blockquote><ol><li><p><code>zadd</code>, 用来添加元素到有序集合中，如</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zadd zset01 10 v1 20 v2 30 v3 40 v4 50 v5 60 v6 70 v7 80 v8 90 v9 100 v10  //添加了10个元素</span><br></pre></td></tr></table></figure></li><li><p><code>zrange key start end [withscores]</code>, 用来获取有序集合中的元素，不加withscores选项时，不显示分值，加了此选项，则显示分值</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zrange zset01 0 -1 withscores  //显示所有元素，含分值</span><br></pre></td></tr></table></figure></li><li><p><code>zrevrange key start end [withscores]</code>, 以逆向下标来获取有序集合的元素。</p></li><li><p><code>zrangebyscore key 开始score 结束score</code>, 以分值区间来查询有序集合中的元素，默认是闭区间，使用(可以切换到开区间。也支持 withscores选项，支持 limit 选项【类似于分页】</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">zrangebyscore zset01 30 60  //把30分至60分的value取出来</span><br><span class="line">zrangebyscore zset01 30 (60  //把30分至60分[不含]的value取出来</span><br><span class="line">zrangebyscore zset01 30 60 withscores //把30分至60分的value取出来，显示结果中含分值</span><br><span class="line">zrangebyscore zset01 30 60 limit 2 3  //从下标为2的位置开始，取出3条记录</span><br></pre></td></tr></table></figure></li><li><p><code>zrevrangebyscore key min_score max_score [withscores]</code>,以逆向顺序来返回满足分值条件的结果。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zrevrangebyscore zset01 60 30   //返回 v6 v5 v4 v3</span><br></pre></td></tr></table></figure></li><li><p><code>zrem key value</code>, 从有序集合中移除指定的元素，如果没有此元素，则返回0</p></li><li><p><code>zcard/zcount key [min_score max_score]</code>, zcard统计有序集合中元素个数，不支持分数条件，而zcout 是支持分数范围条件的。如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">zcard zset01   //返回zset01中的元素总数</span><br><span class="line">zcount zset01   //结果同上</span><br><span class="line">zcount zset01 30 60   //算出30分至60分之间的元素个数</span><br></pre></td></tr></table></figure></li><li><p><code>zrank key member</code>, 用来获取元素下标</p></li><li><p><code>zrevrank key member</code>,以逆向顺序来获取元素下标,如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zrank zset01 v1   //返回的是0</span><br><span class="line">zrevrank zset01 v1 //返回的是8</span><br></pre></td></tr></table></figure></li><li><p><code>zscore key member</code>,用来获取元素对应的分值</p></li></ol><h2 id="有关redis的配置文件-redis-conf"><a href="#有关redis的配置文件-redis-conf" class="headerlink" title="有关redis的配置文件 redis.conf"></a>有关redis的配置文件 redis.conf</h2><h3 id="它在哪儿"><a href="#它在哪儿" class="headerlink" title="它在哪儿"></a>它在哪儿</h3><h3 id="Units单位"><a href="#Units单位" class="headerlink" title="Units单位"></a>Units单位</h3><h3 id="INCLUDES包含"><a href="#INCLUDES包含" class="headerlink" title="INCLUDES包含"></a>INCLUDES包含</h3><h3 id="GENERAL通用"><a href="#GENERAL通用" class="headerlink" title="GENERAL通用*"></a>GENERAL通用*</h3><h3 id="SNAPSHOTTING-快照"><a href="#SNAPSHOTTING-快照" class="headerlink" title="SNAPSHOTTING 快照"></a>SNAPSHOTTING 快照</h3><h3 id="REPLICATION-复制"><a href="#REPLICATION-复制" class="headerlink" title="REPLICATION 复制"></a>REPLICATION 复制</h3><h3 id="SECURITY安全"><a href="#SECURITY安全" class="headerlink" title="SECURITY安全*"></a>SECURITY安全*</h3><h3 id="LIMITS-限制"><a href="#LIMITS-限制" class="headerlink" title="LIMITS 限制*"></a>LIMITS 限制*</h3><h3 id="APPEND-ONLY-MODE-追加"><a href="#APPEND-ONLY-MODE-追加" class="headerlink" title="APPEND ONLY MODE 追加"></a>APPEND ONLY MODE 追加</h3><h3 id="常见配置redis-conf-介绍"><a href="#常见配置redis-conf-介绍" class="headerlink" title="常见配置redis.conf 介绍*"></a>常见配置redis.conf 介绍*</h3>]]></content>
    
    <summary type="html">
    
      redis中的5大数据类型以及针对key操作的命令、各种数据类型的操作命令、以及一些共用的命令，如 dbsize, select, flushdb, flushall 等...
    
    </summary>
    
      <category term="存储中间件" scheme="http://www.teacherye.com/categories/%E5%AD%98%E5%82%A8%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
      <category term="redis" scheme="http://www.teacherye.com/categories/%E5%AD%98%E5%82%A8%E4%B8%AD%E9%97%B4%E4%BB%B6/redis/"/>
    
    
      <category term="redis" scheme="http://www.teacherye.com/tags/redis/"/>
    
      <category term="分布式存储中间件" scheme="http://www.teacherye.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E5%AD%98%E5%82%A8%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Redis的安装和配置</title>
    <link href="http://www.teacherye.com/2019/12/18/redis/Redis-1-%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE/"/>
    <id>http://www.teacherye.com/2019/12/18/redis/Redis-1-安装及配置/</id>
    <published>2019-12-18T13:01:47.000Z</published>
    <updated>2019-12-18T14:51:29.611Z</updated>
    
    <content type="html"><![CDATA[<h1 id="redis介绍"><a href="#redis介绍" class="headerlink" title="redis介绍"></a>redis介绍</h1><blockquote><p>redis是完全开源免费的，遵守BSD协议，是一个高性能的key-value存储系统。和Memcached类似，它支持存储的value类型相对更多，包括string(字符串)、list(链表)、set(集合)、zset(sorted set –有序集合)和hash（哈希类型）。这些数据类型都支持push/pop、add/remove及取交集并集和差集及更丰富的操作，而且这些操作都是原子性的。在此基础上，redis支持各种不同方式的排序。与memcached一样，为了保证效率，数据都是缓存在内存中。区别的是redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了master-slave(主从)同步<br>Redis 是一个高性能的key-value数据库。 redis的出现，很大程度补偿了memcached这类key/value存储的不足，在部 分场合可以对关系数据库起到很好的补充作用。它提供了Java，C/C++，C#，PHP，JavaScript，Perl，Object-C，Python，Ruby，Erlang等客户端，使用很方便。[来自百度百科]</p></blockquote><ul><li>官网<blockquote><p><code>https://redis.io</code></p></blockquote></li></ul><h2 id="Redis-与其他-key-value-缓存产品有以下三个特点："><a href="#Redis-与其他-key-value-缓存产品有以下三个特点：" class="headerlink" title="Redis 与其他 key - value 缓存产品有以下三个特点："></a>Redis 与其他 key - value 缓存产品有以下三个特点：</h2><ol><li>Redis支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。</li><li>Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。</li><li>Redis支持数据的备份，即master-slave模式的数据备份。</li></ol><h2 id="Redis-优势"><a href="#Redis-优势" class="headerlink" title="Redis 优势"></a>Redis 优势</h2><ul><li>性能极高 – Redis能读的速度是110000次/s,写的速度是81000次/s 。</li><li>丰富的数据类型 – Redis支持二进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作。</li><li>原子性,Redis的所有操作都是原子性的，意思就是要么成功执行要么失败完全不执行。单个操作是原子性的。多个操作也支持事务，即原子性，通过MULTI和EXEC指令包起来。</li><li>丰富的特性,Redis还支持 publish/subscribe, 通知, key 过期等等特性。</li></ul><h2 id="Redis与其他key-value存储有什么不同？"><a href="#Redis与其他key-value存储有什么不同？" class="headerlink" title="Redis与其他key-value存储有什么不同？"></a>Redis与其他key-value存储有什么不同？</h2><ul><li>Redis有着更为复杂的数据结构并且提供对他们的原子性操作，这是一个不同于其他数据库的进化路径。Redis的数据类型都是基于基本数据结构的同时对程序员透明，无需进行额外的抽象。</li><li>Redis运行在内存中但是可以持久化到磁盘，所以在对不同数据集进行高速读写时需要权衡内存，因为数据量不能大于硬件内存。在内存数据库方面的另一个优点是，相比在磁盘上相同的复杂的数据结构，在内存中操作起来非常简单，这样Redis可以做很多内部复杂性很强的事情。同时，在磁盘格式方面他们是紧凑的以追加的方式产生的，因为他们并不需要进行随机访问。</li></ul><h2 id="安装redis数据库"><a href="#安装redis数据库" class="headerlink" title="安装redis数据库"></a>安装redis数据库</h2><ul><li><p>第一步：下载 redis的安装包<br><a href="https://redis.io/download" target="_blank" rel="noopener">下载redis</a><br>或者通过<code>wget download.redis.io/releases/redis-5.0.7.tar.gz</code> 下载</p></li><li><p>第二步：利用 tar 命令解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf redis-xxx.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>第三步：执行 make</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure></li><li><p>第四步：执行 make install</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make install</span><br></pre></td></tr></table></figure></li></ul><p>注：默认情况下，CentOS系统中没有安装 gcc 组件，在执行 make 之前，需要安装一下 gcc,如下<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install gcc</span><br></pre></td></tr></table></figure></p><p>提示输入字母时，输入 y 即可</p><h2 id="启动-redis"><a href="#启动-redis" class="headerlink" title="启动 redis"></a>启动 redis</h2><ol><li><p>可以在命令行中直接启动 redis-server, 这种方式不是以后台服务方式启动，要占用一个命令行窗口，使用不太方便。</p></li><li><p>把redis加入到开机自启动项中，操作如下</p></li></ol><ul><li>2.1 把redis解压目录下的<code>redis.conf</code>文件copy一份到redis-server安装目录，默认是<code>/usr/local/bin</code> [可以通过whereis redis-server 来查看]</li><li>2.2 修改 <code>/usr/local/bin/redis.conf</code>文件，把 daemonize的值改为yes</li><li><p>2.3 在<code>/etc/systemd/system/</code>目录下创建一个 redis.service 文件，内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=redis-server</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/usr/local/bin/redis-server /usr/local/bin/redis.conf</span><br><span class="line">PrivateTmp=true</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></li><li><p>2.4 执行<code>systemctl enable redis.service</code> 来启用 redis 服务</p></li><li>2.5 执行<code>systemctl start redis.service</code> 来启动 redis 服务【以后开机不用再执行此行命令，会自启动】</li></ul>]]></content>
    
    <summary type="html">
    
      在CentOS中安装和配置Redis
    
    </summary>
    
      <category term="存储中间件" scheme="http://www.teacherye.com/categories/%E5%AD%98%E5%82%A8%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
      <category term="redis" scheme="http://www.teacherye.com/categories/%E5%AD%98%E5%82%A8%E4%B8%AD%E9%97%B4%E4%BB%B6/redis/"/>
    
    
      <category term="redis" scheme="http://www.teacherye.com/tags/redis/"/>
    
      <category term="分布式存储中间件" scheme="http://www.teacherye.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E5%AD%98%E5%82%A8%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>安装和配置centOS7[含桌面环境]</title>
    <link href="http://www.teacherye.com/2019/12/17/linux/centos-1/"/>
    <id>http://www.teacherye.com/2019/12/17/linux/centos-1/</id>
    <published>2019-12-17T09:01:47.000Z</published>
    <updated>2019-12-18T09:04:47.084Z</updated>
    
    <content type="html"><![CDATA[<h1 id="在vmware中配置CentOS"><a href="#在vmware中配置CentOS" class="headerlink" title="在vmware中配置CentOS"></a>在vmware中配置CentOS</h1><blockquote><p>本篇日志是我在VMWare中虚拟出CentOS7后，在使用的过程中所遇到的一些问题小结，并且还有些一些系统命令需要记忆下来，为防止以后忘记，所以写了这个日志</p></blockquote><p>至于如何安装 Vmware workstation软件，以及如何在 vmware中安装centos操作系统，请自行百度一下。</p><h2 id="为什么要虚拟出CentOS"><a href="#为什么要虚拟出CentOS" class="headerlink" title="为什么要虚拟出CentOS?"></a>为什么要虚拟出CentOS?</h2><blockquote><p>CentOS是 Redhat Linux衍生出来的，功能丰富、强大，完全支持rpm包以及使用yum命令进行安装，下载CentOS时，有多种版本可以选择，如下：</p><ul><li>DVD版本【我们选择这个】，功能丰富</li><li>Minimal【极简化版】，只有核心功能，适合定制化的高级用户。</li></ul></blockquote><p>官网地址：<code>https://www.centos.org/</code></p><h2 id="理解rpm包和yum命令"><a href="#理解rpm包和yum命令" class="headerlink" title="理解rpm包和yum命令"></a>理解rpm包和yum命令</h2><blockquote><p>rpm,全称<code>redhat package manager</code>，是一种linux下的软件包管理器，一般的扩展名为 .rpm, 如果是二进制发行包，则直接以 .rpm结尾，如果是源代码包发行，则一般是以 .src.rpm结尾，而源代码包将会由rpm自动编译、安装。</p><p>yum，(全称为 Yellow dog Updater, Modified)是一个在Fedora和RedHat以及CentOS中的Shell前端软件包管理器。基于RPM包管理，能够从指定的服务器自动下载RPM包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软件包，无须繁琐地一次次下载、安装[来自百度百科]</p></blockquote><p>从面的描述中可以看出，linux系统中，redhat,centos,fedora 都是基于rpm和yum做为软件包管理器的，而还有一类linux的分支，以是debian格式进行软件安装和管理的，主要是ubuntu系统，它所使用的前端软件包管理器是 apt-get, 有关yum和apt-get的区别，简单理解就是针对不同的linux系统，分别做了一套软件包管理器，它们的功能一样，如下：</p><blockquote><p>在 CentOS, Fedora, RedHat中，使用<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install &lt;package_name&gt;     //安装软件包</span><br><span class="line">yum remove &lt;package_name&gt;//卸载软件包</span><br><span class="line">yum update &lt;package_name&gt;//更新软件包</span><br></pre></td></tr></table></figure></p><p>在ubuntu中，使用<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apt-get install &lt;package_name&gt;     //安装软件包</span><br><span class="line">apt-get remove &lt;package_name&gt;//卸载软件包</span><br><span class="line">apt-get update &lt;package_name&gt;//更新软件包</span><br></pre></td></tr></table></figure></p></blockquote><p>两种都是基于“云”端的模式进行软件包的管理。当然，命令的选项和一些细节还是不同的，详情需要查看各自的手册.</p><p>当然，我们也可以下载 .rpm 格式的文件进行手动安装，<code>rpm</code> 命令常用的选项有：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-ivh：安装显示安装进度--install--verbose--hash</span><br><span class="line">-Uvh：升级软件包--Update；</span><br><span class="line">-qpl：列出RPM软件包内的文件信息[Query Package list]；</span><br><span class="line">-qpi：列出RPM软件包的描述信息[<span class="function">Query Package install <span class="title">package</span><span class="params">(s)</span>]；</span></span><br><span class="line"><span class="function">-qf：查找指定文件属于哪个RPM软件包[Query File]；</span></span><br><span class="line"><span class="function">-Va：校验所有的RPM软件包，查找丢失的文件[View Lost]；</span></span><br><span class="line"><span class="function">-e：删除包</span></span><br></pre></td></tr></table></figure></p><p>另外需要注意的是，还有些软件包是以 .tar.gz或.tar或.gz 等压缩格式发行的，这种软件包就需要通过解压缩命令进行解压，比如：</p><ul><li>针对 .tar 格式，则可以通过 <code>tar xvf xxxx.tar</code> 进行解压</li><li>针对 .gz 格式， 则可以通过 <code>gzip -d xxx.gz</code> 或 <code>gunzip xxxx.gz</code> 进行解压</li><li>针对 .tar.gz 格式，则可以通过 ‘tar zxvf xxxx.tar.gz’ 进行解压</li></ul><h2 id="理解systemctl的作用"><a href="#理解systemctl的作用" class="headerlink" title="理解systemctl的作用"></a>理解systemctl的作用</h2><blockquote><p><code>systemctl</code>命令是Linux的系统管理命令,systemd是Linux系统最新的初始化系统(init),作用是提高系统的启动速度，尽可能启动较少的进程，尽可能更多进程并发启动。systemd对应的进程管理命令是<code>systemctl</code>,systemctl命令兼容了service,即systemctl也会去/etc/init.d目录下查看，执行相关程序</p></blockquote><p>注：早期的linux系统，是通过 /etc/init.d 目录来管理自启动的服务的，现在通过 /etc/systemd 目录来管理，一般来说，通过<code>yum install &lt;package_name&gt;</code>安装的程序，会自动生成 xxx.service文件【在/etc/systemd】目录下。但如果是通过解压后的程序，需要我们手动创建 xxx.service文件， 比如我安装的redis,如果需要开机自启动的话，则需要如下配置<br><code>路径：/etc/systemd/system/redis.service</code><br>内容如下：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=redis-server</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/usr/local/bin/redis-server /usr/local/bin/redis.conf</span><br><span class="line">PrivateTmp=true</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></p><p>注：ExecStart是指向redis-server的位置以及读取的配置文件位置。</p><h2 id="配置lightdm桌面-安装图形化界面"><a href="#配置lightdm桌面-安装图形化界面" class="headerlink" title="配置lightdm桌面[安装图形化界面]"></a>配置lightdm桌面[安装图形化界面]</h2><ul><li><p>第一步：安装桌面协议 “X Window System”</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum groupinstall -y "X Window System"</span><br></pre></td></tr></table></figure></li><li><p>第二步：安装额外包yum源（extra package for Enterprise Linux）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y epel-release</span><br></pre></td></tr></table></figure></li><li><p>第三步：安装lightdm</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y lightdm</span><br></pre></td></tr></table></figure></li><li><p>第四步：安装 xfce </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum groupinstall -y xfce</span><br></pre></td></tr></table></figure></li><li><p>第五步：配置lightdm.conf 文件</p><blockquote><p>修改配置文件 <code>/etc/lightdm/lightdm.conf</code>，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line">[XDMCPServer]</span><br><span class="line">enabled=true</span><br><span class="line">port=177</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure></blockquote></li></ul><p>原来enabled=false,打开注释后改为true<br>把port=177的注释打开</p><ul><li><p>第六步：把默认的gdm桌面关闭，并启动 lightdm 服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">--先执行关闭gdm</span><br><span class="line">systemctl disable gdm</span><br><span class="line">--再执行启用 lightdm</span><br><span class="line">systemctl enable lightdm</span><br></pre></td></tr></table></figure></li><li><p>第七步：启动lightdm</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start lightdm</span><br></pre></td></tr></table></figure></li><li><p>第八步：修改开机启动模式</p><blockquote><p>编辑 <code>/etc/inittab</code> 文件，打开<code>graphical.target</code> 一行的注释，结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="meta">#</span><span class="bash"> multi-user.target: analogous to runlevel 3</span></span><br><span class="line">graphical.target: analogous to runlevel 5</span><br><span class="line">...</span><br></pre></td></tr></table></figure></blockquote></li><li><p>第九步：设置启动模式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl set-default graphical.target</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>注：yum install 和 yum groupinstall 都是yum安装软件的方式，区别如下：</p><ul><li><code>yum install</code> 它安装单个软件，以及这个软件的依赖关系</li><li><code>yum groupinstall</code> 它安装一个安装包，这个安装包包涵了很多单个软件，以及单个软件的依赖关系</li></ul></blockquote><p>我们可以通过 <code>yum info &lt;package_name&gt;</code>和<code>yum groupinfo &lt;packages_name&gt;</code> 来查看软件和软件包的信息。</p><h2 id="中文方块字解决"><a href="#中文方块字解决" class="headerlink" title="中文方块字解决"></a>中文方块字解决</h2><blockquote><p>Centos7 中没有安装中文字体，安装好Xfce，直接进入会出现乱码。所以先安装中文字体，防止进入Xfce出现中文乱码</p></blockquote><ul><li><p>首先，安装字体软件包【也可以安装单一的字体】</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum groupinstall fonts</span><br></pre></td></tr></table></figure></li><li><p>其次，进入到fonts安装的目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/share/fonts</span><br></pre></td></tr></table></figure></li><li><p>最后，执行如下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fc-cache -fv</span><br></pre></td></tr></table></figure></li></ul><p>此命令表示构建字体信息的缓存文件，-fv 是选项，详情可执行<code>man fc-cache</code></p><p>At Last, 重启系统即可, 执行 <code>reboot</code></p><blockquote><p>查看当前系统的语言，可以通过命令<code>cat /etc/locale.conf</code> 来查看[确保是中文]</p></blockquote><h2 id="systemctl命令参考"><a href="#systemctl命令参考" class="headerlink" title="systemctl命令参考"></a>systemctl命令参考</h2><blockquote><p>Systemctl是一个systemd工具，主要负责控制systemd系统和服务管理器。Systemd是一个系统管理守护进程、工具和库的集合，用于取代System V初始进程。Systemd的功能是用于集中管理和配置类UNIX系统。在Linux生态系统中，Systemd被部署到了大多数的标准Linux发行版中，只有为数不多的几个发行版尚未部署。</p></blockquote><h3 id="systemctl-命令集有"><a href="#systemctl-命令集有" class="headerlink" title="systemctl 命令集有"></a>systemctl 命令集有</h3><ul><li>systemctl –verion   //查看systemd的版本</li><li>systemctl start | restart | stop | reload | status <service> //启动|重新启动|停止|重新加载|查看状态</service></li><li>systemctl disable | enable | is-active | is-enable <service>  //关闭 | 启动 | 判断是否激活 | 判断是否启用</service></li><li>systemctl list-units   //列出所有运行单元</li><li>systemctl list-unit-files  //列出所有可用的单元</li><li>systemctl list-unit-files –type=service | socket | mount  //使用服务、套接字、挂载点 进行过滤可用的单元</li><li>systemctl –failed   //列出所有失败的单元</li><li>systemctl show <service>  //检查服务的所有配置详情</service></li><li>systemctl list-dependencies <service>  //获取服务的依赖项列表</service></li></ul><h2 id="安装redis数据库"><a href="#安装redis数据库" class="headerlink" title="安装redis数据库"></a>安装redis数据库</h2><ul><li><p>第一步：下载 redis的安装包<br><a href="https://redis.io/download" target="_blank" rel="noopener">下载redis</a><br>或者通过<code>wget download.redis.io/releases/redis-5.0.7.tar.gz</code> 下载</p></li><li><p>第二步：利用 tar 命令解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf redis-xxx.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>第三步：执行 make</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure></li><li><p>第四步：执行 make install</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make install</span><br></pre></td></tr></table></figure></li></ul><p>注：默认情况下，CentOS系统中没有安装 gcc 组件，在执行 make 之前，需要安装一下 gcc,如下<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install gcc</span><br></pre></td></tr></table></figure></p><p>提示输入字母时，输入 y 即可</p><h3 id="启动-redis"><a href="#启动-redis" class="headerlink" title="启动 redis"></a>启动 redis</h3><ol><li><p>可以在命令行中直接启动 redis-server, 这种方式不是以后台服务方式启动，要占用一个命令行窗口，使用不太方便。</p></li><li><p>把redis加入到开机自启动项中，操作如下</p></li></ol><ul><li>2.1 把redis解压目录下的<code>redis.conf</code>文件copy一份到redis-server安装目录，默认是<code>/usr/local/bin</code> [可以通过whereis redis-server 来查看]</li><li>2.2 修改 <code>/usr/local/bin/redis.conf</code>文件，把 daemonize的值改为yes</li><li><p>2.3 在<code>/etc/systemd/system/</code>目录下创建一个 redis.service 文件，内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=redis-server</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/usr/local/bin/redis-server /usr/local/bin/redis.conf</span><br><span class="line">PrivateTmp=true</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></li><li><p>2.4 执行<code>systemctl enable redis.service</code> 来启用 redis 服务</p></li><li>2.5 执行<code>systemctl start redis.service</code> 来启动 redis 服务【以后开机不用再执行此行命令，会自启动】</li></ul>]]></content>
    
    <summary type="html">
    
      如何在vmware中安装和配置centos，在centos中如何安装和配置lightdm桌面，并解决中文字方块显示问题
    
    </summary>
    
      <category term="操作系统" scheme="http://www.teacherye.com/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="linux" scheme="http://www.teacherye.com/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/linux/"/>
    
    
      <category term="centOS" scheme="http://www.teacherye.com/tags/centOS/"/>
    
      <category term="lightdm配置" scheme="http://www.teacherye.com/tags/lightdm%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>雪花算法</title>
    <link href="http://www.teacherye.com/2019/12/06/algorithms/snowflake/"/>
    <id>http://www.teacherye.com/2019/12/06/algorithms/snowflake/</id>
    <published>2019-12-06T14:01:47.000Z</published>
    <updated>2021-08-13T06:39:02.981Z</updated>
    
    <content type="html"><![CDATA[<h1 id="雪花算法"><a href="#雪花算法" class="headerlink" title="雪花算法"></a>雪花算法</h1><blockquote><p>SnowFlake 算法，是 Twitter 开源的分布式 id 生成算法。其核心思想就是：使用一个 64 bit 的 long 型的数字作为全局唯一 id。在分布式系统中的应用十分广泛，且ID 引入了时间戳，基本上保持自增的。本文主要是是实现了单机版本的算法，使用多台计算机构成分布式的ID生成服务也是可以的，预留了相关的方法参数。</p></blockquote><h2 id="应用范围"><a href="#应用范围" class="headerlink" title="应用范围"></a>应用范围</h2><ol><li><p>在jdk中自带的uuid算法可以来生成唯一性的32位字符串【拼接上‘-’之后，是36位，如：’4211210a-ba56-41b4-b055-6262411970a4’】，uuid算法得到的id是无序的，而且是字符串，数据表记录多时，查询效率不高</p></li><li><p>基于数据库的sequence【通过表也可以模拟sequence】来生成，在分布式系统中更新记录不方便，只能操作主表的更新。</p></li><li><p>雪花算法在分布式系统中可以较好地使用</p></li></ol><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>把64位进行拆分，分为如下几个部份</p><ul><li>第1部份只占1位，而且必需为0，因为最高位0表示正数。</li><li>第2部份是时间戳，占41位【为什么是41位，后面会介绍】，最多可以表示2^41，大约是69年</li><li>第3部份是产生的机器号，占10位【也可以是其它位数，不一定非得是10位，官方约定是10位】，最多可以表示2^10，相当于1024台机器，这部分可以划成两个维度，如下：<ul><li>3.1 拿5位出来做为机房号，最多可以表示 2^5个机房号，也就是最多32个机房编号</li><li>3.2 拿5位出来做为机器号，最多可以表示 2^5台电脑，也就是最多32台电脑编号</li></ul></li><li>第4部份是时间戳，占12位，相当于在同一个毫秒内，可以最大支持2^12，也就是4096个序号【普通的计算机根本达不到，我的电脑测试下来是远远用不完的】</li></ul><p>如下图<br><img src="/2019/12/06/algorithms/snowflake/assets/snowflake-1.png" alt="图示"></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IdGenerator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义属性 [机器码10位，如何分配成 机房码和电脑码，做为属性，这里默认都是5]</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> dataCenterBits = <span class="number">5L</span>; <span class="comment">//机房码的位数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> computerBits = <span class="number">5L</span>; <span class="comment">//电脑码的位数</span></span><br><span class="line">    <span class="comment">//最后的序列码，默认从0开始</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> sequence = <span class="number">0L</span>;</span><br><span class="line">    <span class="comment">//记录执行的最后时间，以毫秒为单位，默认初始化为-1L</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> lastTimeStamp = -<span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//因为要做二进制运算，我们需要定义如下属性来记录每个部份所在的位置的偏移量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> sequenceBits = <span class="number">12</span>; <span class="comment">//序号占用12位</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> computerIdShift = sequenceBits; <span class="comment">//电脑码的偏移量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> dataCenterIdShift = computerIdShift + computerBits; <span class="comment">//机房码的偏移量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> timeStampShift = dataCenterIdShift + dataCenterBits; <span class="comment">//时间戳的偏移量</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据机房码的位数，来计算出机房码最大值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> MAX_DATA_CENTER = -<span class="number">1L</span> ^ (-<span class="number">1L</span> &lt;&lt; dataCenterBits);   <span class="comment">//相当于 11111， 也就是 31</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> MAX_COMPUTER = -<span class="number">1L</span> ^ (-<span class="number">1L</span> &lt;&lt; computerBits); <span class="comment">//同上</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> SEQUENCE_MASK = -<span class="number">1L</span> ^ (-<span class="number">1L</span> &lt;&lt; sequenceBits); <span class="comment">// 为防止序列号溢出而准备的掩码，相当于 11111111 111</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义属性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> computerId; <span class="comment">//电脑的id 【在分布式系统中，记录这个雪花号是由哪一台电脑生成的】</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> dataCenterId; <span class="comment">//机房的id 【在分布式系统中，记录这个雪花号是由哪一个中心机房里的电脑生成的】</span></span><br><span class="line">    <span class="comment">//构造</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IdGenerator</span><span class="params">(<span class="keyword">long</span> computerId, <span class="keyword">long</span> dataCenterId)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//对参数的有效性进行判断，由于机房码和电脑码都是5位，所以，它们的值最大都不能超过31</span></span><br><span class="line">        <span class="keyword">if</span>(computerId &gt; MAX_COMPUTER || computerId &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(String.format(<span class="string">"电脑编号不能大于 %d 或者小于 %d \n"</span>,MAX_COMPUTER,<span class="number">0</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(dataCenterId &gt; MAX_DATA_CENTER || dataCenterId &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(String.format(<span class="string">"机房编号不能大于 %d 或者小于 %d\n"</span>,MAX_DATA_CENTER, <span class="number">0</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//赋值</span></span><br><span class="line">        <span class="keyword">this</span>.computerId = computerId;</span><br><span class="line">        <span class="keyword">this</span>.dataCenterId = dataCenterId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***************</span></span><br><span class="line"><span class="comment">     * 核心方法，利用雪花算法来获取一个唯一性的ID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">long</span> <span class="title">nextId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.获取当前的系统时间</span></span><br><span class="line">        <span class="keyword">long</span> currTime = getCurrentTime();</span><br><span class="line">        <span class="comment">//2. 判断是否在同一个时间内的请求</span></span><br><span class="line">        <span class="keyword">if</span>(currTime == lastTimeStamp) &#123;</span><br><span class="line">            <span class="comment">//2.1 sequence 要增1, 但要预防sequence超过 最大值4095，所以要 与 SEQUENCE_MASK 按位求与</span></span><br><span class="line">            sequence = (sequence + <span class="number">1</span>) &amp; SEQUENCE_MASK;</span><br><span class="line">            <span class="comment">//2.2 进一步判断，如果在同一个毫秒内，sequence达到了4096【1 0000 0000 0000】，则lastTime时间戳必需跳入下一个时间，因为同一个毫秒内</span></span><br><span class="line">            <span class="comment">//sequence只能产生4096个【0-4095】，当超过时，必需跳入下一个毫秒</span></span><br><span class="line">            <span class="comment">// 【此情况极少出现，但不可不防，这意味着1个毫秒内，JVM要执行此方法达到4096次，我这个电脑执行远达不到。】</span></span><br><span class="line">            <span class="keyword">if</span>(sequence == <span class="number">0</span>) &#123;</span><br><span class="line">                currTime = unitNextTime();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//如果不是与lastTime一样，则表示进入了下一个毫秒，则sequence重新计数</span></span><br><span class="line">            sequence = <span class="number">0L</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3. 把当前时间赋值给 lastTime, 以便下一次判断是否处在同一个毫秒内</span></span><br><span class="line">        lastTimeStamp = currTime;</span><br><span class="line">        <span class="comment">//4. 依次把各个部门求出来并通过逻辑或 拼接起来</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">this</span>.lastTimeStamp &lt;&lt; timeStampShift) |               <span class="comment">//把当前系统时间 左移22位</span></span><br><span class="line">                (<span class="keyword">this</span>.dataCenterId &lt;&lt; dataCenterIdShift) |  <span class="comment">//把机房编号 左移17位</span></span><br><span class="line">                (<span class="keyword">this</span>.computerId &lt;&lt; computerIdShift) |      <span class="comment">//把计算机号编号左移 12位</span></span><br><span class="line">                <span class="keyword">this</span>.sequence;                                   <span class="comment">//最后的序列号占12位，无需移动</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/******</span></span><br><span class="line"><span class="comment">     * 等待毫秒数进入下一个时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">long</span> <span class="title">unitNextTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.再次获取系统时间</span></span><br><span class="line">        <span class="keyword">long</span> timestamp = getCurrentTime();</span><br><span class="line">        <span class="comment">//2. 判断 lastTime与currentTime是否一样</span></span><br><span class="line">        <span class="keyword">while</span>(timestamp &lt;= lastTimeStamp) &#123;</span><br><span class="line">            <span class="comment">//2.1 继续获取系统时间，直到上面的条件不成立为止</span></span><br><span class="line">            timestamp = getCurrentTime();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3. 返回</span></span><br><span class="line">        <span class="keyword">return</span> timestamp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*****</span></span><br><span class="line"><span class="comment">     * 用来获取当前的系统时间，以毫秒为单位</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">long</span> <span class="title">getCurrentTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> System.currentTimeMillis();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>上面有详细的注释，这里就不再做解释了</p></blockquote><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UseIdGenerator</span> </span>&#123;</span><br><span class="line"><span class="comment">/****</span></span><br><span class="line"><span class="comment">     * 主方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//这里两个参数都是1，表示1号机房和1号电脑【在分布式系统中，每个电脑知道自己所在的机房和编号】</span></span><br><span class="line">        IdGenerator ig = <span class="keyword">new</span> IdGenerator(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//循环生成</span></span><br><span class="line">        <span class="keyword">long</span> result = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">10000</span>;i++) &#123;</span><br><span class="line">            result = ig.nextId();</span><br><span class="line">            System.out.println(result+<span class="string">" , "</span>+Long.toBinaryString(result));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>上面循环了10000次，可以看到，生成的ID是在同一个毫秒内是连续的。</p></blockquote><h2 id="附录：时间戳为什么是41位？"><a href="#附录：时间戳为什么是41位？" class="headerlink" title="附录：时间戳为什么是41位？"></a>附录：时间戳为什么是41位？</h2><blockquote><p>我个人理解是目前计算机的系统时间是从1970年1月1号午夜开始到现在经过的毫秒数，刚好使用到了41位，有兴趣的可以自己写如下代码来验证一下</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class XXX &#123;</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">//</span><br><span class="line">long now = Sytem.currentTimeMillils();</span><br><span class="line">int bits = Long.toBinaryString(now).length();</span><br><span class="line">System.out.println(bits);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个结果刚好是41，所以，如果时间戳低于41位的话，则就不能精确到毫秒了。</p><h2 id="关注"><a href="#关注" class="headerlink" title="关注"></a>关注</h2><p>关注微信公众号后留言<br><img src="/2019/12/06/algorithms/snowflake/assets/qrcode_for_teacherye.jpg" alt="扫码"></p>]]></content>
    
    <summary type="html">
    
      雪花算法
    
    </summary>
    
      <category term="数据结构" scheme="http://www.teacherye.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="http://www.teacherye.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="id生成器" scheme="http://www.teacherye.com/tags/id%E7%94%9F%E6%88%90%E5%99%A8/"/>
    
      <category term="idgenerate" scheme="http://www.teacherye.com/tags/idgenerate/"/>
    
      <category term="雪花算法" scheme="http://www.teacherye.com/tags/%E9%9B%AA%E8%8A%B1%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB数据库操作</title>
    <link href="http://www.teacherye.com/2019/11/05/mongodb/mongodb-1/"/>
    <id>http://www.teacherye.com/2019/11/05/mongodb/mongodb-1/</id>
    <published>2019-11-05T04:41:47.000Z</published>
    <updated>2019-11-15T07:05:28.625Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h1><blockquote><p>MongoDB 是由C++语言编写的，是一个基于分布式文件存储的开源数据库系统。</p><p>在高负载的情况下，添加更多的节点，可以保证服务器性能。</p><p>MongoDB 旨在为WEB应用提供可扩展的高性能数据存储解决方案。</p><p>MongoDB 将数据存储为一个文档，数据结构由键值(key=&gt;value)对组成。MongoDB 文档类似于 JSON 对象。字段值可以包含其他文档，数组及文档数组。</p></blockquote><h2 id="主要特点"><a href="#主要特点" class="headerlink" title="主要特点"></a>主要特点</h2><ul><li>MongoDB 是一个面向文档存储的数据库，操作起来比较简单和容易。</li><li>你可以在MongoDB记录中设置任何属性的索引 (如：FirstName=”Sameer”,Address=”8 Gandhi Road”)来实现更快的排序。</li><li>你可以通过本地或者网络创建数据镜像，这使得MongoDB有更强的扩展性。</li><li>如果负载的增加（需要更多的存储空间和更强的处理能力） ，它可以分布在计算机网络中的其他节点上这就是所谓的分片。</li><li>Mongo支持丰富的查询表达式。查询指令使用JSON形式的标记，可轻易查询文档中内嵌的对象及数组。 </li><li>MongoDb 使用update()命令可以实现替换完成的文档（数据）或者一些指定的数据字段 。</li><li>Mongodb中的Map/reduce主要是用来对数据进行批量处理和聚合操作。</li><li>Map和Reduce。Map函数调用emit(key,value)遍历集合中所有的记录，将key与value传给Reduce函数进行处理。</li><li>Map函数和Reduce函数是使用Javascript编写的，并可以通过db.runCommand或mapreduce命令来执行MapReduce操作。</li><li>GridFS是MongoDB中的一个内置功能，可以用于存放大量小文件。</li><li>MongoDB允许在服务端执行脚本，可以用Javascript编写某个函数，直接在服务端执行，也可以把函数的定义存储在服务端，下次直接调用即可。</li><li>MongoDB支持各种编程语言:RUBY，PYTHON，JAVA，C++，PHP，C#等多种语言。</li><li>MongoDB安装简单。</li></ul><h2 id="Windows下安装MongoDB"><a href="#Windows下安装MongoDB" class="headerlink" title="Windows下安装MongoDB"></a>Windows下安装MongoDB</h2><ol><li>官网下载安装文件   www.mongodb.com</li><li>双击安装</li></ol><h3 id="配置-MongoDB"><a href="#配置-MongoDB" class="headerlink" title="配置 MongoDB"></a>配置 MongoDB</h3><blockquote><p>在MongoDB的安装目录下，有 一个 mongod.cfg 的配置文件， 这个配置文件采用 YAML 语法格式。如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&gt; # Where and how to store data.</span></span><br><span class="line"><span class="string">&gt; storage:</span></span><br><span class="line"><span class="string">&gt;   dbPath: D:\database\MongoDB\Server\4.2\data</span></span><br><span class="line"><span class="string">&gt;   journal:</span></span><br><span class="line"><span class="string">&gt;     enabled: true</span></span><br><span class="line"><span class="string">&gt; #  engine:</span></span><br><span class="line"><span class="string">&gt; #  mmapv1:</span></span><br><span class="line"><span class="string">&gt; #  wiredTiger:</span></span><br><span class="line"><span class="string">&gt; </span></span><br><span class="line"><span class="string">&gt; # where to write logging data.</span></span><br><span class="line"><span class="string">&gt; systemLog:</span></span><br><span class="line"><span class="string">&gt;   destination: file</span></span><br><span class="line"><span class="string">&gt;   logAppend: true</span></span><br><span class="line"><span class="string">&gt;   path:  D:\database\MongoDB\Server\4.2\log\mongod.log</span></span><br><span class="line"><span class="string">&gt; </span></span><br><span class="line"><span class="string">&gt; # network interfaces</span></span><br><span class="line"><span class="string">&gt; net:</span></span><br><span class="line"><span class="string">&gt;   port: 27017</span></span><br><span class="line"><span class="string">&gt;   bindIp: 127.0.0.1</span></span><br><span class="line"><span class="string">&gt;</span></span><br></pre></td></tr></table></figure></blockquote><p>&gt;</p><blockquote><p>其中，我们在启动 mongodb服务之前，需要自己指定 dbpath 和 systemlog 的值，一般是自己创建一个新的数据目录和日志目录【不建议直接使用系统自带的】</p><ol><li>新建一个 data 文件夹，用来做为 storage的 dbpath</li><li>在这个data文件夹下面新建  db 和  log 子文件夹<ol><li>db 文件夹, 存放数据</li><li>log 文件夹 ，存放系统日志</li></ol></li></ol></blockquote><h3 id="启动MongoDB服务"><a href="#启动MongoDB服务" class="headerlink" title="启动MongoDB服务"></a>启动MongoDB服务</h3><blockquote><p>打开命令行，执行：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; mongod.exe --config "D:\database\MongoDB\Server\<span class="number">4</span>.<span class="number">2</span>\bin\mongod.cfg"</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>&gt;</p><blockquote></blockquote><h3 id="MongoDB以WINDOWS服务方式启动"><a href="#MongoDB以WINDOWS服务方式启动" class="headerlink" title="MongoDB以WINDOWS服务方式启动"></a>MongoDB以WINDOWS服务方式启动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-- 安装服务</span><br><span class="line">mongod.exe --config &quot;xxx\xx\xx\mongod.cfg&quot; --install</span><br><span class="line"></span><br><span class="line">-- 移除服务</span><br><span class="line">mongod.exe --remove</span><br><span class="line"></span><br><span class="line">-- 多个不同的配置，安装多个MongoDB服务</span><br><span class="line">mongod.exe --config &quot;xx\xx\xx\mongod.cfg&quot; --serviceName MongoDB2 --serviceDisplayName MongoDB2Service</span><br><span class="line"></span><br><span class="line">-- 命令行启动、停止服务</span><br><span class="line">net stop MongoDB</span><br><span class="line">net start MongoDB</span><br></pre></td></tr></table></figure><h2 id="使用MongoDB-shell客户端"><a href="#使用MongoDB-shell客户端" class="headerlink" title="使用MongoDB shell客户端"></a>使用MongoDB shell客户端</h2><h2 id="连接到MongoDB"><a href="#连接到MongoDB" class="headerlink" title="连接到MongoDB"></a>连接到MongoDB</h2><blockquote><p>语法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; mongodb:<span class="comment">//[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h3 id="MongoDB-和-mysql-中的数据库相关概念对比"><a href="#MongoDB-和-mysql-中的数据库相关概念对比" class="headerlink" title="MongoDB 和 mysql 中的数据库相关概念对比"></a>MongoDB 和 mysql 中的数据库相关概念对比</h3><table><thead><tr><th>MongoDB</th><th>MYSQL</th><th>区别</th></tr></thead><tbody><tr><td>database</td><td>database</td><td>一样</td></tr><tr><td>集合 collection</td><td>表 table</td><td>都是数据集</td></tr><tr><td>文档 document</td><td>行 row</td><td>文档是bson格式，行 是逻辑概念</td></tr><tr><td>属性 field或者 键 key</td><td>列 column</td></tr></tbody></table><h2 id="MongoDB的基本操作"><a href="#MongoDB的基本操作" class="headerlink" title="MongoDB的基本操作"></a>MongoDB的基本操作</h2><h3 id="创建、删除、查看、使用数据库"><a href="#创建、删除、查看、使用数据库" class="headerlink" title="创建、删除、查看、使用数据库"></a>创建、删除、查看、使用数据库</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查看</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">databases</span> 或  <span class="keyword">show</span> dbs</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建库并使用</span></span><br><span class="line"><span class="keyword">use</span> databaseName</span><br><span class="line"><span class="comment">-- 注：没有文档的数据库是不会创建的，只有当真正插入文档[docuement]之后，库才会真正被创建</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除当前库 [要先使用 这个库]</span></span><br><span class="line">db.dropDatabase()</span><br></pre></td></tr></table></figure><h3 id="创建、删除、查看集合【集合相当于-表】"><a href="#创建、删除、查看集合【集合相当于-表】" class="headerlink" title="创建、删除、查看集合【集合相当于 表】"></a>创建、删除、查看集合【集合相当于 表】</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查看集合</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span> 或  <span class="keyword">show</span> collections</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建集合</span></span><br><span class="line">db.collectionName.insert(&#123;&#125;)   </span><br><span class="line"><span class="comment">-- 注：这种情况会自动创建 collectionName</span></span><br><span class="line">db.createCollection(<span class="keyword">name</span>, &#123;options&#125;)</span><br><span class="line"><span class="comment">-- 其中， options 有如下选项</span></span><br><span class="line">｛</span><br><span class="line">capped: <span class="literal">true</span> | fase,</span><br><span class="line">autoIndexId: <span class="literal">true</span> | <span class="literal">false</span>,</span><br><span class="line"><span class="keyword">size</span>: 大小，单位是 kb,</span><br><span class="line"><span class="keyword">max</span>: 文档记录数</span><br><span class="line">｝</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除集合</span></span><br><span class="line">db.collectionName.drop()</span><br></pre></td></tr></table></figure><h3 id="插入文档【文档相当于行记录】"><a href="#插入文档【文档相当于行记录】" class="headerlink" title="插入文档【文档相当于行记录】"></a>插入文档【文档相当于行记录】</h3><blockquote><p>使用 db.collection_name.insert(doc)  或  db.collection_name.save(doc) </p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">db.emp.insert(&#123;</span><br><span class="line">              name:"张三丰",</span><br><span class="line">              start_date: "2016-03-19",</span><br><span class="line">              salary: 18000,</span><br><span class="line">              age: 31,</span><br><span class="line">              title: "Java开发工程师",</span><br><span class="line">              tag: ["活泼","外向","有亲和力"]</span><br><span class="line">              &#125;)</span><br><span class="line">注：如果当前数据库中没有 emp 这个集合，则会自动创建 emp 集合</span><br><span class="line"></span><br><span class="line">或者通过一个变量来保存 文档</span><br><span class="line">doc = (&#123;</span><br><span class="line">       name:"李四",</span><br><span class="line">       start_date: "2018-09-11",</span><br><span class="line">       salary: 6785.5,</span><br><span class="line">       age: 23,</span><br><span class="line">       title: "助理工程师",</span><br><span class="line">       tag: ["沉稳","内向"]</span><br><span class="line">      &#125;);</span><br><span class="line">再通过：</span><br><span class="line">db.emp.insert(doc) </span><br><span class="line">插入</span><br></pre></td></tr></table></figure><h3 id="更新文档"><a href="#更新文档" class="headerlink" title="更新文档"></a>更新文档</h3><blockquote><p>使用 db.collection_name.update(<query>, <update>, options)</update></query></p><p>其中，query 表示更新的条件</p><p>update 表示更新的列值</p><p>options 主要有：</p><ul><li><p><strong> upsert</strong>  : 可选，这个参数的意思是，如果不存在update的记录，是否插入objNew,true为插入，默认是false，不插入。</p></li><li><p><strong>multi</strong>  : 可选，mongodb 默认是false,只更新找到的第一条记录，如果这个参数为true,就把按条件查出来多条记录全部更新。</p></li><li><p><strong>writeConcern</strong>  :可选，抛出异常的级别。</p></li></ul></blockquote><p>更新指定列： 前面加上 $set:</p><h3 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h3><blockquote><p>使用 db.collection_name.remove(<query>, options)</query></p><p>其中，</p><p>query 表示删除的条件，满足此条件的记录删除</p><p>options 主要有：</p><ul><li><strong>justOne</strong>: true|false   如果设置成true或1，表示只删除1行，不设置的话，则删除所有匹配的行</li><li><strong>writeConcern</strong> :可选，抛出异常的级别。</li></ul></blockquote><h3 id="查询文档"><a href="#查询文档" class="headerlink" title="查询文档"></a>查询文档</h3><blockquote><p>语法：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.collection_name.find(&#123;query&#125;,&#123;projection&#125;)</span><br><span class="line">&gt; 其中，</span><br><span class="line">&gt; &#123;query&#125; 是指查询的条件，语法如下：</span><br><span class="line">&gt; &#123;&lt;field1&gt;: &#123;expression1&#125;, &lt;field2&gt;: &#123;expression2&#125;, ... , &lt;fieldN&gt;: &#123;expressionN&#125;&#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt; 在expression中，可以使用各种运算符，语法: 运算符: value,  如：$gt 表示大于</span><br><span class="line">&gt; </span><br><span class="line">&gt; &#123;projection&#125; 是指投影查询的列，语法如下：</span><br><span class="line">&gt; &#123;field1:true|false, field2:true|flase, ... , fileldN:true|false&#125;</span><br><span class="line">&gt; 也可以使用整数，其中，0代表false, 非0代表true</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>&gt;</p><blockquote><p>指定查询条件的逻辑符号，主要有：</p><p>$or</p><p>$and   默认值</p><p>$nor   异或</p><p>$in</p><p>$nin</p><p>$not</p><p>语法：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; find(&#123;</span><br><span class="line">&gt;     $or: [</span><br><span class="line">&gt; &#123;条件1&#125;,</span><br><span class="line">&gt;        &#123;条件2&#125;</span><br><span class="line">&gt; ]</span><br><span class="line">&gt; </span><br><span class="line">&gt; &#125;)</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>&gt;</p><blockquote></blockquote><h3 id="type运算"><a href="#type运算" class="headerlink" title="$type运算"></a>$type运算</h3><blockquote><p> 根据文档值的类型进行过滤，这个类型要查询官方的手册</p></blockquote><h3 id="limit-和skip-操作"><a href="#limit-和skip-操作" class="headerlink" title="limit()和skip() 操作"></a>limit()和skip() 操作</h3><blockquote><p>limit(n) 表示限定多少行</p><p>skip(n) 表示跳过多行少</p></blockquote><h3 id="练习："><a href="#练习：" class="headerlink" title="练习："></a>练习：</h3><ol><li><p>查询出工资范围在 10000 至 15000之间的员工</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SQL:</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> salary &gt; <span class="number">10000</span> <span class="keyword">and</span> salary &lt; <span class="number">15000</span>;</span><br><span class="line"><span class="comment">-- MongoDB:</span></span><br><span class="line">db.emp.find(&#123;salary: &#123;$gt: 10000, $lt: 15000&#125;&#125;,&#123;_id:0,tag:0&#125;)</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>查询出职位含有 ‘java’ 的员工</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SQL:</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> title <span class="keyword">like</span> <span class="string">'%java%'</span>;</span><br><span class="line"><span class="comment">-- MongoDB:</span></span><br><span class="line">db.emp.find(&#123;title: /java/i&#125;)</span><br></pre></td></tr></table></figure><p>注： 以 i 结尾表示 忽略大小写</p></li></ol><ol><li><p>查询出名字中以’袁’开头或者工资大于15000或者年龄大于 28岁的员工</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">db.emp.find(</span><br><span class="line">    <span class="comment">-- 条件 condition</span></span><br><span class="line">    &#123;</span><br><span class="line">            $or: </span><br><span class="line">            [</span><br><span class="line">                    &#123;name: /^袁/&#125;,</span><br><span class="line">                    &#123;salary: &#123;$gt: 15000&#125;&#125;,</span><br><span class="line">                    &#123;age: &#123;$gt: 28&#125;&#125;</span><br><span class="line">                ]</span><br><span class="line">         &#125;,</span><br><span class="line">    <span class="comment">-- 投影 projection</span></span><br><span class="line">         &#123;</span><br><span class="line">    _id:0,</span><br><span class="line">    tag:0</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>查询出总记录数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SQL:</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="string">"total"</span> <span class="keyword">from</span> emp;</span><br><span class="line"><span class="comment">-- MongoDB:</span></span><br><span class="line">db.emp.aggregate([&#123;$group: &#123;_id: null, total: &#123;$sum: 1&#125;&#125;&#125;])</span><br><span class="line"><span class="comment">-- 或者</span></span><br><span class="line">db.emp.find().count(true);</span><br></pre></td></tr></table></figure><p>以上的语句相当于执行了： select count(*) from emp; </p></li></ol><ol><li><p>查询出各职称的工资总和。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SQL:</span><br><span class="line"><span class="keyword">select</span> title, <span class="keyword">sum</span>(salary) <span class="string">"totalSalary"</span> <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> title;</span><br><span class="line"><span class="comment">-- MongoDB:</span></span><br><span class="line">db.emp.aggregate([&#123;$group: &#123;_id: '$title', totalSalary: &#123;$sum: '$salary'&#125;&#125;&#125;])</span><br></pre></td></tr></table></figure></li></ol><h3 id="基本查询汇总"><a href="#基本查询汇总" class="headerlink" title="基本查询汇总"></a>基本查询汇总</h3><blockquote><p>语法：</p><p>db.collection_name.find(</p><p>​    {where},     – 指定查询的条件</p><p>​    {projection}    – 指定查询的列</p><p>).sort({属性名: 1|-1})</p><p>排重的语法：</p><p>db.collection_name.distinct(“属性名”,{where})</p></blockquote><h4 id="1-行记录过滤"><a href="#1-行记录过滤" class="headerlink" title="1.行记录过滤"></a>1.行记录过滤</h4><p>支持的条件指令</p><ul><li>$gt, $lt, $gte, $lte, $ne</li><li>$in(list)</li><li>…</li></ul><p>– 年龄在22至28岁之间员工</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.emp.find(&#123;age: &#123;$gte: 22, $lte: 28&#125;&#125;,&#123;_id: 0, tag: 0&#125;)</span><br></pre></td></tr></table></figure><p>…</p><h4 id="2-模糊匹配"><a href="#2-模糊匹配" class="headerlink" title="2.模糊匹配"></a>2.模糊匹配</h4><blockquote><p>采用正则表达式的方式进行匹配。</p><p>…</p></blockquote><h4 id="3-排重"><a href="#3-排重" class="headerlink" title="3.排重"></a>3.排重</h4><blockquote><p>排重的语法：</p><p>db.collection_name.distinct(“属性名”,{where})</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询出所有员工的入职时间 </span></span><br><span class="line"><span class="comment">-- sql</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> start_date <span class="keyword">from</span> emp;</span><br><span class="line"><span class="comment">-- MongoDB:</span></span><br><span class="line">db.emp.distinct("start_date")</span><br></pre></td></tr></table></figure><h4 id="4-投影查询"><a href="#4-投影查询" class="headerlink" title="4.投影查询"></a>4.投影查询</h4><blockquote><p>可以从两个角度来定义</p><ol><li><p>不想显示哪些域</p><blockquote><p>{属性名: 0} 或 {属性名: false}</p></blockquote></li><li><p>只想显示哪些域</p><blockquote><p>{属性名: 1} 或 {属性名:  true}</p></blockquote></li></ol></blockquote><p>如:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- SQL</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">name</span>,age <span class="keyword">from</span> emp;</span><br><span class="line"><span class="comment">-- MongoDB:</span></span><br><span class="line">db.emp.find(&#123;&#125;, &#123;name: 1, age: 1, _id: 0&#125;)</span><br><span class="line">或</span><br><span class="line">db.emp.find(&#123;&#125;, &#123;name: true, age: true, _id: false&#125;)</span><br></pre></td></tr></table></figure><h4 id="5-多个逻辑条件"><a href="#5-多个逻辑条件" class="headerlink" title="5.多个逻辑条件"></a>5.多个逻辑条件</h4><blockquote><p>当有多个条件时，要么是 $and, 要么是 $or, 它们的值都是 数组类型。</p><p>语法：</p><p>db.collection_name.find(</p><p>​    {$or|$and: [</p><p>​        {条件1},</p><p>​        {条件2},</p><p>​        ….</p><p>​        {条件N}</p><p>​    ]},</p><p>​    {属性名: 0} 或 {属性名: false}</p><p>)</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 工资大于20000并且年龄大于30岁 或者 职位中以是Java开头的 员工</span></span><br><span class="line"><span class="comment">-- SQL:</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> (salary &gt; <span class="number">20000</span> <span class="keyword">AND</span> age &gt; <span class="number">30</span>) <span class="keyword">OR</span> title <span class="keyword">like</span> <span class="string">'Java%'</span>;</span><br><span class="line"><span class="comment">-- MongoDB:</span></span><br><span class="line">db.emp.find(</span><br><span class="line">&#123;</span><br><span class="line">    $or: [</span><br><span class="line">            &#123;title: /^Java/&#125;,</span><br><span class="line">            &#123;</span><br><span class="line">            $and: [</span><br><span class="line">                &#123;salary: &#123;$gt: 20000&#125;&#125;,</span><br><span class="line">                &#123;age: &#123;$gt: 30&#125;&#125;</span><br><span class="line">            ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;_id:0,name:1, salary:1, age:1, title:1&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="6-排序"><a href="#6-排序" class="headerlink" title="6.排序"></a>6.排序</h4><blockquote><p>在查询的方法后面，再调用 sort 方法即可，语法：</p><p>sort({属性名: 1 | -1, 属性名: 1|-1, […]})</p><p>1代表 升序， -1 代表降序。</p></blockquote><p>如：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 按年龄排序显示所有的员工名、职位、工资、年龄</span></span><br><span class="line"><span class="comment">-- sql:</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">name</span>,title,salary, age <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">asc</span>, salary <span class="keyword">desc</span>;</span><br><span class="line"><span class="comment">-- MongoDB:</span></span><br><span class="line">db.emp.find(&#123;&#125;,&#123;name:1,salary:1,age:1,title:1,_id:0&#125;).sort(&#123;age: 1, salary: -1&#125;)</span><br></pre></td></tr></table></figure><h4 id="7-分页"><a href="#7-分页" class="headerlink" title="7.分页"></a>7.分页</h4><blockquote><p>limit(n) , 只查询出指定的条目数【行数】</p><p>skip(n)， 跳过指定的条目数【行数】</p><p>所以，分页的查询是基于以上两个函数，其中， limit的参数代表 每页多少行[pageSize], skip的参数应该是 (当前页 - 1) * pageSize.</p></blockquote><p>如：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.emp.find(&#123;&#125;,&#123;name:1,salary:1, age:1, title:1, _id:0&#125;).limit(5).skip(5)</span><br></pre></td></tr></table></figure><h4 id="8-统计行数"><a href="#8-统计行数" class="headerlink" title="8.统计行数"></a>8.统计行数</h4><blockquote><p>调用 count() 方法</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询有多少员工的工资大于15000元</span></span><br><span class="line"><span class="comment">-- sql:</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> emp <span class="keyword">where</span> salary &gt; <span class="number">15000</span>;</span><br><span class="line"><span class="comment">-- MongoDB:</span></span><br><span class="line">db.emp.find(&#123;salary: &#123;$gt: 15000&#125;&#125;,&#123;_id:0&#125;).count()</span><br></pre></td></tr></table></figure><h3 id="聚合操作"><a href="#聚合操作" class="headerlink" title="聚合操作"></a>聚合操作</h3><blockquote><p>db.collection_name.aggregate([管道操作])</p><p>常用的管道操作符：</p><ul><li>$project：修改输入文档的结构。可以用来重命名、增加或删除域，也可以用于创建计算结果以及嵌套文档。</li><li>$match：用于过滤数据，只输出符合条件的文档。$match使用MongoDB的标准查询操作。</li><li>$limit：用来限制MongoDB聚合管道返回的文档数。</li><li>$skip：在聚合管道中跳过指定数量的文档，并返回余下的文档。</li><li>$unwind：将文档中的某一个数组类型字段拆分成多条，每条包含数组中的一个值。</li><li>$group：将集合中的文档分组，可用于统计结果。</li><li>$sort：将输入文档排序后输出。</li></ul></blockquote><p>语法规则：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">db.collection_name.aggregate([</span><br><span class="line">    <span class="comment">-- 每一个都是一个管道</span></span><br><span class="line">    &#123;$match: &#123;salary: &#123;$gt: 15000, $lt: 20000&#125;&#125;&#125;,</span><br><span class="line">    &#123;$group: &#123;_id: null, totalSalary: &#123;$sum: '$salary'&#125;&#125;&#125;,</span><br><span class="line">    &#123;$sort: &#123;name: 1&#125;&#125;,</span><br><span class="line">    ...,</span><br><span class="line">    &#123;$unwind: '$tag'&#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure><p>其中，_id 后面指定分组的列，可以有多列</p><p>$group 之前的 $match 表示 where 子句</p><p>$group 之后的 $match 表示 having 子句</p><p>$sort 表示排序</p><p>$unwind 表示将文档中的某一个数组类型字段拆分成多条，每条包含数组中的一个值</p><p>如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询出员工总记录数</span></span><br><span class="line"><span class="comment">-- sql:</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="string">"total"</span> <span class="keyword">from</span> emp;</span><br><span class="line"><span class="comment">-- MongoDB 1:</span></span><br><span class="line">db.emp.find().count()</span><br><span class="line"><span class="comment">-- MongoDB 2:</span></span><br><span class="line">db.emp.aggregate(</span><br><span class="line">    [</span><br><span class="line">        &#123;</span><br><span class="line">        $group: &#123;</span><br><span class="line">        _id: null, </span><br><span class="line">        total: &#123;$sum: 1&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>注：</p><blockquote><p>aggregate 函数的执行过程也叫上管道操作，前面的执行结果做为后面的执行输入。</p></blockquote><h4 id="管道操作的图示"><a href="#管道操作的图示" class="headerlink" title="管道操作的图示"></a>管道操作的图示</h4><p><img src="/2019/11/05/mongodb/mongodb-1/assets/mongdb-pipe.png" alt="mongdb-管道"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- MongoDB:</span></span><br><span class="line">db.orders.aggregate([</span><br><span class="line">    &#123;$match: &#123;status: 'Normal'&#125;&#125;,</span><br><span class="line">    &#123;$group: &#123;_id: '$cust_id', totalAmount: &#123;$sum: '$amount'&#125;&#125;&#125;,</span><br><span class="line">    &#123;$match: &#123;totalAmount: &#123;$gt: 500&#125;&#125;&#125;,</span><br><span class="line">    &#123;$sort: &#123;totalAmount: -1&#125;&#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure><h2 id="索引操作"><a href="#索引操作" class="headerlink" title="索引操作"></a>索引操作</h2><blockquote><p>作用：</p><ol><li>提高文档的检索效率</li><li>索引是存储在内存之中的，索引的效率非常高。</li></ol></blockquote><h3 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h3><blockquote><p>db.collection_name.createIndex({field: 1 | 0,  fileld: 1|0, … }, options)</p><p>或</p><p>db.getCollection(“collection_name”).createIndex({field: 1 | 0,  fileld: 1|0, … }, options)</p><p>其中，1代表 升序索引， 0 代表降序索引</p></blockquote><h3 id="查看索引"><a href="#查看索引" class="headerlink" title="查看索引"></a>查看索引</h3><blockquote><p>db.collection_name.getIndexes()  </p><p>– 查看索引大小</p><p>db.collection_name.totalIndexSize()</p></blockquote><h3 id="删除集合所有索引"><a href="#删除集合所有索引" class="headerlink" title="删除集合所有索引"></a>删除集合所有索引</h3><blockquote><p>db.collection_name.dropIndexes()</p><p>或</p><p>db.collection_name.dropIndex(index_name)</p></blockquote><h3 id="MongoDB-客户端"><a href="#MongoDB-客户端" class="headerlink" title="MongoDB 客户端"></a>MongoDB 客户端</h3><blockquote><p>可以使用 ROBO Studio 3T, 下载地址： <a href="https://studio3t.com/" target="_blank" rel="noopener">https://studio3t.com/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      MongoDB的基本操作
    
    </summary>
    
      <category term="数据库" scheme="http://www.teacherye.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="Nosql" scheme="http://www.teacherye.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/Nosql/"/>
    
      <category term="MongoDB" scheme="http://www.teacherye.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/Nosql/MongoDB/"/>
    
    
      <category term="mongodb" scheme="http://www.teacherye.com/tags/mongodb/"/>
    
      <category term="文档型数据库" scheme="http://www.teacherye.com/tags/%E6%96%87%E6%A1%A3%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="sql" scheme="http://www.teacherye.com/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>Mysql数据库基本操作</title>
    <link href="http://www.teacherye.com/2019/11/04/mysql/msyql-1/"/>
    <id>http://www.teacherye.com/2019/11/04/mysql/msyql-1/</id>
    <published>2019-11-04T04:41:47.000Z</published>
    <updated>2019-11-15T07:00:34.530Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mysql数据库"><a href="#Mysql数据库" class="headerlink" title="Mysql数据库"></a>Mysql数据库</h1><blockquote><p>基于GPL协议开源的一个RDBMS【关系型数据库管理系统】</p></blockquote><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><blockquote><p>数据库, DataBase, 数据集的集合体</p><p>数据库管理系统， DBMS,  一套软件，包含客户端、服务端、后台服务进程等组成</p><p>关系型数据库管理系统， RDBMS， 一套RDBMS，可以管理多个数据库</p><p>schema,  简单地理解为数据库对象的命名空间</p><p>用户， 数据库对使用者的一个身份认证</p><p>客户端， RDBMS都是基于C/S架构的软件，这个客户端就是与用户交互的软件</p><p>服务端，也就是可以响应/解释 客户端发送过来的命令/指令，并返回结果给客户端。</p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote><p>Windows:   一步 下一步 即可安装完成</p></blockquote><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><blockquote><p>在mysql 8.0 之后，需要手动创建一个 my.ini 的配置文件， 手动创建一个这个文件，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&gt; [mysqld]</span><br><span class="line">&gt; # 设置3306端口</span><br><span class="line">&gt; port=3306</span><br><span class="line">&gt; </span><br><span class="line">&gt; # 自定义设置mysql的安装目录，即解压mysql压缩包的目录</span><br><span class="line">&gt; basedir=D:\database\mysql-8.0.17-winx64</span><br><span class="line">&gt; </span><br><span class="line">&gt; # 自定义设置mysql数据库的数据存放目录</span><br><span class="line">&gt; datadir=D:\database\mysqlDATA</span><br><span class="line">&gt; </span><br><span class="line">&gt; # 允许最大连接数</span><br><span class="line">&gt; max_connections=200</span><br><span class="line">&gt; </span><br><span class="line">&gt; # 允许连接失败的次数，这是为了防止有人从该主机试图攻击数据库系统</span><br><span class="line">&gt; max_connect_errors=10</span><br><span class="line">&gt; </span><br><span class="line">&gt; # 服务端使用的字符集默认为UTF8</span><br><span class="line">&gt; character-set-server=utf8</span><br><span class="line">&gt; </span><br><span class="line">&gt; # 创建新表时将使用的默认存储引擎</span><br><span class="line">&gt; default-storage-engine=INNODB</span><br><span class="line">&gt; </span><br><span class="line">&gt; # 默认使用“mysql_native_password”插件认证</span><br><span class="line">&gt; default_authentication_plugin=mysql_native_password</span><br><span class="line">&gt; </span><br><span class="line">&gt; [mysql]</span><br><span class="line">&gt; # 设置mysql客户端默认字符集</span><br><span class="line">&gt; default-character-set=utf8</span><br><span class="line">&gt; </span><br><span class="line">&gt; [client]</span><br><span class="line">&gt; # 设置mysql客户端连接服务端时默认使用的端口和默认字符集</span><br><span class="line">&gt; port=3306</span><br><span class="line">&gt; default-character-set=utf8</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>另外，需要配置一下 mysql</p><p>mysqld –initialize</p><h3 id="启动mysql"><a href="#启动mysql" class="headerlink" title="启动mysql"></a>启动mysql</h3><blockquote><ol><li><p>先把mysql添加到服务中 ，   mysqld install  [服务名]</p></li><li><p>通过 net start mysql 来启动 mysql</p></li><li><p>通过 net stop mysql 来停止 mysql</p></li></ol></blockquote><h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><blockquote><p>默认情况下，mysql会有一个 root 用户，从 8.0开始，在配置完成后，系统会自动打印出 root 用户的随机密码，通过这个随机密码登录后，要你修改这个密码，以后，就通过这个修改后的密码进行登录。</p><p>创建，通过 root 用户登录后，我们可以添加/创建  新的用户，可以使用如下命令：</p><ol><li>往 mysql.user 表中添加一条记录来添加一个新用户</li><li>通过命令来创建用户</li></ol></blockquote><h2 id="客户端连接"><a href="#客户端连接" class="headerlink" title="客户端连接"></a>客户端连接</h2><ol><li><p>通过命令行去连接 MYSQL 数据库</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line">提示你输入 root 用户的密码</span><br></pre></td></tr></table></figure></li><li><p>连接成功后，命令行的提示符将变成  mysql&gt; </p></li><li><p>我们可以在命令行中，输入 mysql客户端相关的命令以及SQL命令</p><blockquote><p>\h  命令，查看帮助文档</p><p>\s 命令，查看服端的状态信息</p><p>use 命令， 使用指定 的数据库</p></blockquote></li><li><p>常用的客户端命令</p><blockquote><ol><li>show databases   查看当前RDBMS中所管理的所有数据仓库</li><li>use databaseName  使用/进入 指定的数据库</li><li>show tables  查看当前数据仓库中的所有表结构</li></ol></blockquote></li></ol><h2 id="创建和删除数据库"><a href="#创建和删除数据库" class="headerlink" title="创建和删除数据库"></a>创建和删除数据库</h2><p>1.创建数据库语法</p><blockquote><p>create database [IF NOT EXISTS] databaseName;</p><p>注：</p><p>如果没有添加 IF NOT EXISTS 选项的话，则当系统中存在相同名字的数据库时，会报错。</p><p>如果加了 IF NOT EXISTS 选项的话，则不会报错。</p></blockquote><ol><li><p>删除数据库</p><blockquote><p>drop database databaseName;</p></blockquote></li></ol><h2 id="选择数据库"><a href="#选择数据库" class="headerlink" title="选择数据库"></a>选择数据库</h2><blockquote><p>我们都知道，一套RDBMS中可以管理多个 DATABASE,  所以，我们要先 选项使用哪个 DATABASE， 使用 USE  命令。如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; mysql&gt; use databaseName</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>&gt;</p><blockquote><p>注：databaseName 就是RDBMS中已有的数据库</p></blockquote><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>也就是表中列的数据类型，MYSQL中主要有三大数据类型</p><h3 id="数值型"><a href="#数值型" class="headerlink" title="数值型"></a>数值型</h3><blockquote><p>主要是表达数字相关的数据，有：</p><ol><li>整数类<ul><li>tinyint   【相当于byte,单字节】</li><li>smallint 【相当于 short, 双字节】</li><li>int   【4字节】</li><li>bigint  【相当于 long, 8字节】</li></ul></li><li>浮点数类<ul><li>float</li><li>double</li><li>decimal</li></ul></li></ol></blockquote><h3 id="日期-时间型"><a href="#日期-时间型" class="headerlink" title="日期/时间型"></a>日期/时间型</h3><ol><li>Date     只含 年、月、日</li><li>Time    只含 时、分、秒</li><li>DateTime  包含年、月、日、时、分、秒</li><li>Timestamp  与 datatime 类似</li><li>Year   就是年份</li></ol><h3 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h3><p>字符：</p><ol><li><p>定长字符  char[length],  length 的最大值是 4000</p></li><li><p>可变长字符  varchar[length]  ,  length 的最大值是 4000</p></li></ol><p><strong>字节字符：</strong></p><ol><li><p>binary ，相当于 char</p></li><li><p>varbinary, 相当于 varchar</p></li><li><p>tinytext   短文本二进制字符</p></li><li><p>mediumtext,  …</p></li><li><p>longtext  极大文本数据，4G</p></li><li><p>Blob  二进制形式的长文本字符</p></li><li><p>longBlog  极大的， 4G</p></li></ol><h2 id="创建表结构"><a href="#创建表结构" class="headerlink" title="创建表结构"></a>创建表结构</h2><blockquote><p>语法：</p><p>CREATE TABLE [IF NOT EXISTS] table_name(</p><p>​    column_name DATA_TYPE [DEFAULT value] [约束信息],</p><p>​    column_name DATA_TYPE [DEFAULT value] [约束信息],</p><p>​    …</p><p>​    column_name DATA_TYPE [DEFAULT value] [约束信息]</p><p>)engine=INNODB charset=utf-8;</p><p>注： </p><p>列名 不能使用关键字</p></blockquote><p>如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span> TBL_USER(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">bigint</span> auto_increment,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">    email <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">unique</span>,</span><br><span class="line">    <span class="keyword">status</span> tinyint <span class="keyword">default</span> <span class="number">0</span>,</span><br><span class="line">    enroll_date datetime,</span><br><span class="line">    <span class="comment">-- 添加约束</span></span><br><span class="line">    primary <span class="keyword">key</span>(<span class="keyword">id</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>– 查询表结构：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">desc 表名;</span><br><span class="line">或者：</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">columns</span> <span class="keyword">from</span> 表名;</span><br></pre></td></tr></table></figure><h2 id="约束定义"><a href="#约束定义" class="headerlink" title="约束定义"></a>约束定义</h2><blockquote><p>约束，Constraints, 是一种数据库对象，用来对表中的列值或表之间的关系进行限定。一般来讲，主要有5种约束</p><ol><li>主键约束  [Primary key], 唯一且非空，一个表中最多只有一个主键约束。【但主键约束可以跨列，形成联合主键】</li><li>非空约束  【NOT NULL】</li><li>唯一性约束  【UNIQUE】， 唯一性</li><li>自定义约束  【CHECK】</li><li>外键约束  【FOREIGN KEY】，它主要是用来表达表之间的关系。</li></ol></blockquote><p>如何来约表中的列添加约束？</p><ol><li><p>列级语法</p><blockquote><p>指的是在列定义结束之前添加约束</p></blockquote><p>案例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tbl_demo(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">bigint</span> auto_increment PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    email <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">UNIQUE</span>,</span><br><span class="line">    age tinyint <span class="keyword">check</span>(age &gt; <span class="number">0</span> <span class="keyword">and</span> age &lt; <span class="number">127</span>) <span class="keyword">DEFAULT</span> <span class="number">18</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>表级语法</p><blockquote><p>指的是在列定义完成之后再来添加约束</p></blockquote><p>案例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tbl_demo(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">bigint</span> auto_increment,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    email <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    age tinyint <span class="keyword">DEFAULT</span> <span class="number">18</span>,</span><br><span class="line">    <span class="comment">-- 再来添加约束</span></span><br><span class="line">    primary <span class="keyword">key</span>(<span class="keyword">id</span>),</span><br><span class="line">    <span class="keyword">UNIQUE</span>(email),</span><br><span class="line">    <span class="keyword">check</span>(age &gt; <span class="number">0</span> <span class="keyword">and</span> age &lt; <span class="number">127</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ol><h2 id="删除表结构"><a href="#删除表结构" class="headerlink" title="删除表结构"></a>删除表结构</h2><blockquote><p>删除数据库对象的命令：</p><p>DROP TABLE  table_name [CASCADE CONSTRAINTS];</p></blockquote><h2 id="SQL命令的分类"><a href="#SQL命令的分类" class="headerlink" title="SQL命令的分类"></a>SQL命令的分类</h2><ol><li><p>DDL 语句， Data Definition Language, 数据定义语句，主要包含：</p><p>create 命令   – 创建数据库对象</p><p>drop 命令    – 删除数据库对象</p><p>ALTER 命令     – 修改数据库对象</p><p>comment 命令</p><p>truncate 命令</p><p>rename 命令</p><p>….</p></li><li><p>DML 语句， Data Manipulation Language, 数据操作语句， 主要包含：</p><p>INSERT 命令</p><p>DELETE 命令</p><p>UPDATE 命令</p></li><li><p>DQL 语句， Data Query Language, 数据查询语句，主要包含：</p><p>SELECT 命令</p></li><li><p>DCL 语句</p><p>grant</p><p>revoke</p></li><li><p>DTL 语句</p><p>begin | start transaction</p><p>commit</p><p>rollback</p><p>savepoint </p><p>release savepoint </p></li><li><p>….</p></li></ol><h2 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h2><blockquote><p>语法：</p><p>INSERT INTO  table_name(column_name[,column_name,….. ])  VALUES(v1[,v2,…..]);</p></blockquote><p>注：如果我们省略 table_name后面的列名，则表示所有列都要插入，有默认值的都无效。</p><p>如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tbl_demo(<span class="keyword">name</span>,email,age) <span class="keyword">values</span>(<span class="string">'jack'</span>,<span class="string">'jack@gmail.com'</span>,<span class="number">19</span>);</span><br><span class="line">或</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tbl_demo(<span class="keyword">name</span>,email) <span class="keyword">values</span>(<span class="string">'smith'</span>,<span class="string">'smith@163.com'</span>);</span><br></pre></td></tr></table></figure><p>不带列名：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tbl_demo <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">'ann'</span>,<span class="string">'ann@gmail.com'</span>,<span class="number">20</span>);</span><br></pre></td></tr></table></figure><h2 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h2><blockquote><p>语法：</p><p>UPDATE table_name SET column_name=value1[,column_name=value2, …. ]</p><p>[WHERE 子句]</p><p>注：</p><p>如果没有WHERE条件的话，则表示更新表中的所有行的列值。</p></blockquote><p>如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> tbl_demo <span class="keyword">SET</span> age = age + <span class="number">5</span>;</span><br><span class="line">或</span><br><span class="line"><span class="keyword">UPDATE</span> tbl_demo <span class="keyword">SET</span> age = age + <span class="number">5</span> <span class="keyword">where</span> <span class="keyword">id</span> &gt;= <span class="number">2</span>;</span><br></pre></td></tr></table></figure><h2 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h2><blockquote><p>语法</p><p>DELETE FROM table_name [WHERE 子句]</p></blockquote><p>备注：</p><p>如果没有条件的删除，则表示删除表中的所有行记录。</p><p>如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> tbl_demo <span class="keyword">where</span> <span class="keyword">id</span> &lt; <span class="number">2</span>;</span><br></pre></td></tr></table></figure><h2 id="事务操作"><a href="#事务操作" class="headerlink" title="事务操作"></a>事务操作</h2><blockquote><p>事务，Transaction, 一组相关的操作，它是不可再分的，要么一起成功，要么一起失败。</p><p>数据库事务，一组相关的SQL操作。这组SQL命令不分再分，一起成功或一起失败。</p><p>数据库事务有以下的4种特性：</p><ol><li>原子性, Atomic, 它不可再分。</li><li>一致性，Consistency, 当事结束后，内存数据与底层磁盘数据是一致的。</li><li>隔离性，Isolation,  多个事务之间互相隔离。</li><li>持久层，Durability, 当事务提交成功后，数据保证不会丢失。</li></ol></blockquote><p>注：</p><p>mysql数据库本身支持多种数据存储引擎，有些是支持事务的，如：InnoDB引擎。 有些是不支持事务的，如: MyISAM 引擎。</p><p>所以，我们在创建表结构时，要指定存储的引擎，不过在 mysql8.0之后，我们在启动数据库之前，通过在my.ini 配置文件中进行配置，可以指定默认的数据存储引擎。</p><p>– 创建表结构时指定引擎的语法：</p><p>CREATE TABLE table_name(</p><p>​    column_name DATATYPE [约束信息] [DEFAULT 默认值],</p><p>​    column_name DATATYPE [约束信息] [DEFAULT 默认值],</p><p>​    ….</p><p>​    …</p><p>) engine=引擎类型</p><h3 id="事务操作的基本命令"><a href="#事务操作的基本命令" class="headerlink" title="事务操作的基本命令"></a>事务操作的基本命令</h3><blockquote><p>注： mysql 默认情况下，事务是自动提交的。</p></blockquote><p>所以，我们要自已控制事务的话，则需要关闭自动提交。如何关闭？有以下方法</p><ol><li>在我们执行目标SQL之前，先执行 BEGIN 命令 或  START TRANSACTION</li><li>在会话中，执行 set auto commit = 1</li></ol><p>事务命令</p><p>commit  提交事务</p><p>rollback  回滚事务</p><p>savepoint 保存事务点</p><p>事务的边界：从事务的开始到事务的结束。</p><p>什么是事务开始？</p><p>​    执行 begin 命令</p><p>什么是事务的结束？</p><p>​    以commit命令或rollback命令为界限，当执行到 commit或rollback时，就表示一个事务结束。</p><p>注：</p><p>DDL 命令是自动提交事务的，</p><p>而DML 命令我们是可以手动控制事务的。</p><h2 id="用户管理-1"><a href="#用户管理-1" class="headerlink" title="用户管理"></a>用户管理</h2><blockquote><p>mysql数据库是一种用表来管理表的数据库。</p><p>而所有的MYSQL用户记录都是存储在 mysql.user 这个表中。</p><p>所以，添加一个mysql用户，本质上就是往 mysql.user 表中插入一条记录。 但是，在mysql8.0之后，好像是不允许这么做了，而推荐使用 CREATE USER 命令来创建，这个就与 ORACLE 的用户管理命令是一样的。</p><p>语法：</p><p>CREATE USER ‘user_name’@’host’ IDENTIFIED BY ‘密码’</p></blockquote><p>给用户权限</p><blockquote><p>语法：</p><p>GRANT 权限1,权限2[,权限3,….] | all privileges ON database_name.table_name TO ‘user_name’@’host’</p><p>注：</p><p>database_name.table_name 经常写成 *.*</p><p>第一个 * 代表 数据库， 第二个* 代表 表</p></blockquote><p>从用户外收回权限</p><blockquote><p>语法：</p><p>REVOKE 权限1,权限2[,权限3,….] | all privileges ON database_name.table_name FROM ‘user_name’@’host’</p></blockquote><p>注：</p><p>做完授权后，一定要执行：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;</span><br></pre></td></tr></table></figure><h2 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h2><blockquote><p>语法：</p><p>SELECT [表别名.]column_name [列别名] [,column2_name 列别名] | *  FROM  table1_name [表别名]  </p><p>[left | right [outer] JOIN table2_name [表别名] ON 关联条件</p><p>[WHERE 子句]</p><p>[GROUP BY 子句]</p><p>[HAVING 子句]</p><p>[ORDER BY 子句]</p></blockquote><h3 id="Where子句"><a href="#Where子句" class="headerlink" title="Where子句"></a>Where子句</h3><blockquote><p>可以使用的运算符有：</p><ul><li>比较运算符, 有：&gt;, &lt;,  &gt;=,  &lt;=, =,   !=,  &lt;&gt;</li><li>算术运算 【列值是可以进行运算的】</li><li>IN (list)   和   NOT IN (list)</li><li>LIKE 主要是用来比较字符串，支持通配符，主要有2个通配符<ul><li>_  通配任意单个字符</li><li>%  通配任意多个字符</li></ul></li><li>BETWEEN AND  和  NOT BETWEEN AND </li><li>IS NULL   和   IS NOT NULL</li><li>EXISTS  和  NOT EXISTS   主要是用在子查询中的，判断子查询是否有结果。</li><li>AND</li><li>OR</li><li>…</li></ul></blockquote><h3 id="关联查询"><a href="#关联查询" class="headerlink" title="关联查询"></a>关联查询</h3><blockquote><p>主要是内联[INNER JOIN]和外联 [OUTER JOIN], 外联又分为 左外联和右外联。</p><p>注：</p><p>当查询的列分散在不同的表中或要查询的列和条件分散在不同的表中时，都需要使用关联查询。</p></blockquote><ol><li><p><strong>内联操作</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询部门名及此部门下的所有员工名和工资、入职时间</span></span><br><span class="line"><span class="keyword">select</span> d.name <span class="string">"部门名"</span>, e.first_name <span class="string">"员工名"</span>,e.start_date <span class="string">"入职时间"</span>,e.salary <span class="string">"月薪"</span></span><br><span class="line"><span class="keyword">from</span> s_dept d <span class="keyword">JOIN</span> s_emp e <span class="keyword">ON</span> d.id = e.dept_id</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询出员工名、工资及上司的名字和工资</span></span><br><span class="line"><span class="keyword">select</span> e.first_name <span class="string">"员工名"</span>, e.salary, m.first_name <span class="string">"经理名"</span>,m.salary </span><br><span class="line"><span class="keyword">from</span> s_emp e <span class="keyword">JOIN</span> s_emp m <span class="keyword">ON</span> e.manager_id = m.id</span><br></pre></td></tr></table></figure><p>注： 上面的查询中，如果某个员工的上司ID是NULL值 的话，则这个员工记录将不会被查询出来。</p></li></ol><ol><li><p>外联操作</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询出员工名、工资及上司的名字和工资【注：没有上司的员工也要被查询出来】</span></span><br><span class="line"><span class="keyword">select</span> e.first_name <span class="string">"员工名"</span>, e.salary, m.first_name <span class="string">"经理名"</span>,m.salary </span><br><span class="line"><span class="keyword">from</span> s_emp e <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> s_emp m <span class="keyword">ON</span> e.manager_id = m.id</span><br></pre></td></tr></table></figure><p><strong>这里使用了左外联，以关联左表为准，即使右边没有与之对应的记录，左边的记录也要被查询出来，右边全部以NULL值显示。</strong></p><p>如果是右外联，会怎么样？</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> e.first_name <span class="string">"员工名"</span>, e.salary, m.first_name <span class="string">"经理名"</span>,m.salary </span><br><span class="line"><span class="keyword">from</span> s_emp e <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> s_emp m <span class="keyword">ON</span> e.manager_id = m.id</span><br></pre></td></tr></table></figure></li><li><p>思考？</p><blockquote><p>查询出不是经理的员工？</p></blockquote></li></ol><h3 id="分组查询和组函数"><a href="#分组查询和组函数" class="headerlink" title="分组查询和组函数"></a>分组查询和组函数</h3><blockquote><p>什么是分组？</p><p>​    就是看待数据的角度。</p><p>什么是组函数？</p><p>​    就是对分组之后的同一组记录进行计算的函数，它都是多进单出。</p><p>注：</p><p>如果使用了组函数，但是没有显示地分组，则表示所有查询出来的记录归为一组。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; -- 统计记录数</span><br><span class="line">&gt; select count(*) from 表名;</span><br><span class="line">&gt; -- 按性别分组统计出各有多少学员</span><br><span class="line">&gt; select gender, count(*) from tbl_class group by gender;</span><br><span class="line">&gt; </span><br><span class="line">&gt; -- 统计出各部门的员工数</span><br><span class="line">&gt; select dept_id, count(*) from s_emp group by dept_id;</span><br><span class="line">&gt; </span><br><span class="line">&gt; -- 统计出同一部门、同一职称的人数</span><br><span class="line">&gt; select dept_id,title count(*) from s_emp group by dept_id,title;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>&gt;</p><blockquote><p>注：</p><p>只有出现在group by 后面的列才能做为select 后面查询的列，除非使用了组函数修饰。</p></blockquote><p><strong>常用的组函数</strong></p><ol><li>count([DISTINCT] * | column_name)   用来统计行数</li><li>sum([DISTINCT] column_name)   用来求和的</li><li>MIN(column_name)  求最小值</li><li>MAX(column_name)  求最大值</li><li>AVG(column_name)   求平均值</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询出员工的最高、最低、平均、工资总和</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">MAX</span>(salary), <span class="keyword">min</span>(salary), <span class="keyword">avg</span>(salary), <span class="keyword">sum</span>(salary) </span><br><span class="line"><span class="keyword">from</span> s_emp;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询出各部门的员工的最高、最低、平均、工资总和</span></span><br><span class="line"><span class="keyword">select</span> dept_id <span class="string">"部门号"</span>,<span class="keyword">MAX</span>(salary), <span class="keyword">min</span>(salary), <span class="keyword">avg</span>(salary), <span class="keyword">sum</span>(salary) </span><br><span class="line"><span class="keyword">from</span> s_emp <span class="keyword">group</span> <span class="keyword">by</span> dept_id;</span><br></pre></td></tr></table></figure><h3 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h3><blockquote><p>SQL是第四代语言，只关心你做什么？不需要关心怎么做！ 它是无需编写逻辑代码集合的。所以，要达到一些功能，平台提供了很多函数供我们使用，主要分成以下三类：</p><ol><li>字符函数</li><li>数值函数</li><li>日期函数</li></ol></blockquote><h4 id="字符函数"><a href="#字符函数" class="headerlink" title="字符函数"></a>字符函数</h4><ul><li><p>format(var, pattern)      格式化日期或数字</p></li><li><p>replace(str, old, new)    替换</p></li><li>reverse(str)   反转</li><li>locate(sub, str)    求 sub 在 str 中的最开始位置</li><li>position(sub, str)   同上</li><li>repeat(str, n)   重复</li><li>substr(str, start, length)   求 str的子串，从start位置开始，截取length个长度</li><li>lpad</li><li>rpad</li><li>ltrim</li><li>rtrim</li><li>….</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">reverse</span>(<span class="string">'hello'</span>);</span><br><span class="line">....</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">format</span>(<span class="number">3.1456405</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><h4 id="数字函数"><a href="#数字函数" class="headerlink" title="数字函数"></a>数字函数</h4><ul><li>pi()   </li><li>rand()    随机数</li><li>round()  四舍五入</li><li>truncate()   直接截取， 不做四舍五入</li><li>…</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">pi</span>();  </span><br><span class="line"><span class="keyword">select</span> <span class="keyword">rand</span>();</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">round</span>(<span class="number">3.4567</span>, <span class="number">1</span>);    <span class="comment">-- 3.5</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">truncate</span>(<span class="number">3.4567</span>, <span class="number">1</span>);   <span class="comment">-- 3.4</span></span><br></pre></td></tr></table></figure><h4 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h4><ul><li>current_date();   </li><li>curdate();</li><li>now()</li><li>current_time();</li><li>curtime();</li><li>adddate(d, n)    返回在d的基础上加上n天的日期</li><li>addtimie(t,  n)    返回在t的基础上加上 n秒的时间</li><li>datediff(d1, d2)    计算 两个日期相差多少天</li><li>date_format(d, f);  按达式 f的要求显示日期 d</li><li>EXTRACT(type FROM d)    从日期中提取指定的部份</li><li>year()</li><li>month()</li><li>day()</li><li>…</li></ul><h3 id="CASE-WHEN-语句"><a href="#CASE-WHEN-语句" class="headerlink" title="CASE WHEN 语句"></a>CASE WHEN 语句</h3><blockquote><p>经常用在来把“行”转换成“列”的查询中。它支持两种语法</p><p>一、 类似于switch</p><p>CASE x</p><p>WHEN 值1 THEN expr1</p><p>WHEN 值2 THEN expr2</p><p>…</p><p>WHEN 值n THEN exprN</p><p>ELSE</p><p>​    else_expr</p><p>END;</p><p>如：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; -- 查询出员工及所在的部门中文名</span><br><span class="line">&gt; select e.first_name,e.salary,</span><br><span class="line">&gt;     CASE e.dept_id</span><br><span class="line">&gt;         WHEN 10 THEN '财务部'</span><br><span class="line">&gt;         WHEN 31 THEN '销售部'</span><br><span class="line">&gt;         WHEN 41 THEN '业务部'</span><br><span class="line">&gt;         WHEN 50 THEN '行政部'</span><br><span class="line">&gt;         ELSE '未知部门'</span><br><span class="line">&gt;     END "中文部门名"</span><br><span class="line">&gt; from s_emp e;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>&gt;</p><blockquote><p>二、 多分支 if</p><p>语法：</p><p>CASE </p><p>WHEN 条件1 THEN expr1</p><p>WHEN 条件2 THEN expr2</p><p>…</p><p>WHEN 条件N THEN exprN</p><p>ELSE</p><p>​    else_expr</p><p>END;</p><p>如：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; -- 把把员工工资分成高、中、低三档显示，其中，大于1400元的为高，在1100和1400之间的为中，低于1100的为低</span><br><span class="line">&gt; select e.first_name,</span><br><span class="line">&gt; CASE</span><br><span class="line">&gt; WHEN e.salary &gt; 1400 THEN '高薪'</span><br><span class="line">&gt; WHEN e.salary BETWEEN 1100 AND 1400 THEN '中薪'</span><br><span class="line">&gt; WHEN e.salary &lt; 1100 THEN '低薪'</span><br><span class="line">&gt; END "工资级别"</span><br><span class="line">&gt; from s_emp e;</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>思考： 统计出高、中、低 三档薪水的员工数量。</p><h3 id="子查询-subquery"><a href="#子查询-subquery" class="headerlink" title="子查询 [subquery]"></a>子查询 [subquery]</h3><blockquote><p>就是查询，它可以出现在任意的位置， 主要有用在如下位置：</p><ul><li>子查询做为列</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; -- 查询出员工名及他的上司名</span><br><span class="line">&gt; select e.first_name "员工名", </span><br><span class="line">&gt; -- 上司名[使用子查询来写]</span><br><span class="line">&gt; IFNULL((select m.first_name from s_emp m where e.manager_id = m.id),'董事会') "上司名"</span><br><span class="line">&gt; from s_emp e;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>&gt;</p><blockquote><ul><li>子查询做为条件</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; -- 查询出与'Ben'同一部门的员工</span><br><span class="line">&gt; select e.first_name,e.salary,e.title from s_emp e where e.dept_id = (</span><br><span class="line">&gt; -- 查询出Ben所在的部门名</span><br><span class="line">&gt; select dept_id from s_emp where first_name = 'Ben'</span><br><span class="line">&gt; )</span><br><span class="line">&gt; AND e.first_name &lt;&gt; 'Ben'</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>&gt;</p><blockquote><ul><li>子查询做为“虚表【内联视图】”</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; -- 查询出工资排名前三的员工</span><br><span class="line">&gt; select e.first_name,e.salary from (select * from s_emp order by salary desc) e limit 3;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>&gt;</p>]]></content>
    
    <summary type="html">
    
      msyql的基本操作
    
    </summary>
    
      <category term="数据库" scheme="http://www.teacherye.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="关系型" scheme="http://www.teacherye.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%85%B3%E7%B3%BB%E5%9E%8B/"/>
    
      <category term="mysql" scheme="http://www.teacherye.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%85%B3%E7%B3%BB%E5%9E%8B/mysql/"/>
    
    
      <category term="sql" scheme="http://www.teacherye.com/tags/sql/"/>
    
      <category term="rdbms" scheme="http://www.teacherye.com/tags/rdbms/"/>
    
      <category term="mysql" scheme="http://www.teacherye.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>SpringData JPA操作指南(三)</title>
    <link href="http://www.teacherye.com/2019/11/03/springData/SpringDataJpa-3/"/>
    <id>http://www.teacherye.com/2019/11/03/springData/SpringDataJpa-3/</id>
    <published>2019-11-03T10:41:47.000Z</published>
    <updated>2019-11-15T06:39:55.649Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Data-JPA-amp-Hibernate"><a href="#Spring-Data-JPA-amp-Hibernate" class="headerlink" title="Spring Data JPA &amp; Hibernate"></a>Spring Data JPA &amp; Hibernate</h1><h2 id="1-JPA规范中的注解"><a href="#1-JPA规范中的注解" class="headerlink" title="1. JPA规范中的注解"></a>1. JPA规范中的注解</h2><blockquote><p>软件包：  javax.persistence</p><p>常用的注解：</p><ul><li><p>@Entity(name=””)    表示实体的名字，默认就是被修饰的实体的非全限定名【也就是simple class name】</p></li><li><p>@Table(name=””)   表示实体映射的表名，这个表名一般以 T或TBL 为前缀</p></li><li><p>@Id  表示映射的主键，一般来说，做为主键列的属性，最好是 Integer, Long或String 三种类型之一，在没有使用@Column修饰时，表中的主键列名与@Id修饰的属性名同名。</p><blockquote><p>一般都是自动生成的，它有很多的生成策略，其中，JPA规范中定义的策略不多，但是，HIbernate本身提供了很多的主键生成策略。</p><p>JPA规范中定义的4种生成策略：</p><ul><li>AUTO       自动，由底层的数据库产品来决定使用哪种策略</li><li>IDENTITY， 支持Identify column的数据库</li><li>SEQUENCE， 支持序列的数据库</li><li>TABLE， 使用表来做为主键生成策略</li></ul><p>Hibernate框架实现了JPA规范，所以，它除了支持上面4种方式外，它还支持更多的主键生成策略，比如：</p><ul><li>HiLo 高低位算法的主键生成策略</li><li>UUID 生成唯一性字符串做为主键</li><li>…</li></ul></blockquote></li><li><p>@Column(name=””, unique=false, insertable=true, updatable=true, columnDefinition=”check约束”)   用来修饰普通属性，把普通属性映射成列名。</p></li><li><p>@ManyToOne   表示多对一，也就是在多的那边映射时使用，一般要配合 @JoinColumn </p></li><li><p>@JoinColumn 用来在多的那边定义一个外键列</p></li><li><p>@OneToMany  表示一对多，定义在一的那边</p></li><li><p>@ManyToMany  表示多对多， 由于在DB关系列中，不能表达多对多，所以，它会拆分成2个一对多。【基于中间表】</p></li><li><p>@OneToOne  表示一对一， 本质就是特殊的一对多。【也就是 外键+唯一性约束 的情况】</p></li><li><p>….</p></li></ul></blockquote><h3 id="RepositoryDefinition-注解的使用"><a href="#RepositoryDefinition-注解的使用" class="headerlink" title="@RepositoryDefinition 注解的使用"></a>@RepositoryDefinition 注解的使用</h3><blockquote><p>这个注解也是用来避免我们定义的Repository接口方法暴露的，使用它来标记的类型是不需要继承任何父接口的。我们的方法按照规则定义即可。</p></blockquote><h2 id="2-JPQL的使用"><a href="#2-JPQL的使用" class="headerlink" title="2. JPQL的使用"></a>2. JPQL的使用</h2><h2 id="3-关联映射"><a href="#3-关联映射" class="headerlink" title="3. 关联映射"></a>3. 关联映射</h2><h3 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h3><blockquote><p>主要就是使用 </p><p>@OneToMany</p><p>@ManyToOne + @JoinColumn  [多的那边负责维护外键]</p></blockquote><h3 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h3><blockquote><p>注意：数据库中不支持多对多，要把它折分2个一对多关系，使用的注解：</p><p>@ManyToMany</p><p>另一边就是</p><p>@ManyToMany + @JoinTable</p></blockquote><h3 id="延迟加载"><a href="#延迟加载" class="headerlink" title="延迟加载"></a>延迟加载</h3><blockquote><p>关联时，针对多的那一边默认会采用延迟加载策略，可以通过设置 fetch属性的值来改变这个默认值。</p><p>fetch=FetchType.EAGER</p><p>fetch=FetchType.LAZY </p></blockquote><h3 id="级联操作"><a href="#级联操作" class="headerlink" title="级联操作"></a>级联操作</h3><blockquote><p>关联时，操作一个实体对象时，是否要级联操作关联的另一边，默认情况下是不操作的，可以通过修改 cascade属性的值来改变这个默认值。</p><p>cascade=CascadeType.ALL</p><p>…</p></blockquote><h3 id="no-Session-问题的解决"><a href="#no-Session-问题的解决" class="headerlink" title="no Session 问题的解决"></a>no Session 问题的解决</h3><blockquote><p>默认情况下，hibernate的session会被 Spring Boot 托管，当我们调用的Repository方法结束后，hibernate框架的session就会关闭，而此时再去调用实体加载关联的另一边时，就会出现加载异常[no session]，我们可以通过在 application.yml 中添加如下配置来解决：</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  jpa:</span></span><br><span class="line"><span class="attr">    generate-ddl:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    open-in-view:</span> <span class="literal">true</span>     <span class="comment"># 添加此项</span></span><br><span class="line"><span class="attr">    hibernate:</span></span><br><span class="line"><span class="attr">      ddl-auto:</span> <span class="string">update</span></span><br><span class="line"><span class="attr">    show-sql:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    properties:</span></span><br><span class="line"><span class="attr">      hibernate:</span></span><br><span class="line"><span class="attr">        format_sql:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">        dialect:</span> <span class="string">org.hibernate.dialect.MySQL8Dialect</span></span><br><span class="line"><span class="attr">        enable_lazy_load_no_trans:</span> <span class="literal">true</span>     <span class="comment"># 添加此项</span></span><br></pre></td></tr></table></figure><h2 id="常用查询："><a href="#常用查询：" class="headerlink" title="常用查询："></a>常用查询：</h2><ol><li><p>限定查询结果的行数</p><p>first</p><p>top</p><p>distinct</p></li><li><p>使用 @Query 注解来自定义查询</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Query</span>(<span class="string">"from User u where u.name = ?1"</span>)</span><br><span class="line"><span class="function">User <span class="title">getByName</span><span class="params">(String name)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>使用命名参数，注解@Param</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Query</span>(<span class="string">"from User u where u.name = :username or u.status = :status"</span>)</span><br><span class="line"><span class="function">User <span class="title">getByUsernameOrStatus</span><span class="params">(@Param(<span class="string">"username"</span>)</span> String username, @<span class="title">Param</span><span class="params">(<span class="string">"status"</span>)</span> <span class="keyword">int</span> status)</span>;</span><br></pre></td></tr></table></figure></li><li><p>关联查询</p><ol><li><p>隐式关联，适合于关联的另一边是一的情况，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Query</span>(<span class="string">"from Address a where a.user.name = :uname"</span>)</span><br><span class="line"><span class="function">List&lt;Address&gt; <span class="title">findByUserName</span><span class="params">(@Param(<span class="string">"uname"</span>)</span> String userName)</span>;</span><br></pre></td></tr></table></figure></li></ol></li></ol><ol><li><p>显示关联，适合于关联的另一边是多的情况</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Query</span>(<span class="string">"select u from User u join u.addressList a where a.province = :province"</span>)</span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">findByProvince</span><span class="params">(@Param(<span class="string">"province"</span>)</span> String province)</span>;</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>使用 SpEL Expression 语法</p><blockquote><p>注： 需要在 @Entity注解上通过 name来指定实体的名字，然后才可以用如下的语法去引用</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Query</span>(<span class="string">"select u from #&#123;#entityName&#125; u where u.name = ?1"</span>)</span><br><span class="line"><span class="function">User <span class="title">getByName</span><span class="params">(String name)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>投影查询 [projection]</p><blockquote><p>利用 select 关键字来查询你想要的列.</p></blockquote><p>语法：</p><p>select 类别名.属性名, 类别名.属性名, … FROM 类名 类别名 WHERE 条件…</p><p>如果要把这些列“封装”成一个对象，我们可以开发这类对象【叫 值对象，Value Object, VO]</p><p>上面的语法就可以改成：</p><p>select new xx.xx.xxVO(类别名.属性名, 类别名.属性名, …)  FROM 类名 类别名 WHERE 条件…</p></li><li><p>使用原生查询 nativeQuery</p><blockquote><p>写原生态的sql 语句， 在@Query 注解中，使用 nativeQuery=true 属性</p></blockquote></li><li><p>分页查询及排序</p><blockquote><p>方法的设计上，参数加上 Pageable ， 返回值以 Page<t> 做为类型</t></p></blockquote></li></ol><ol><li><p>自定义修改和删除 操作  @Modifying 注解的应用</p><blockquote><p>在@Query注解上面再加上一个注解： @Modifying </p><p>就可以支持如下语法：</p><ol><li><p>UPDATE 实体名 别名 Set 别名.属性名 = :参数 ….</p></li><li><p>DELETE FROM  实体名 别名 WHERE  别名.属性名 = :参数 ….</p></li></ol></blockquote></li><li><p>多表查询</p><blockquote><p>本质上是关联</p></blockquote></li></ol>]]></content>
    
    <summary type="html">
    
      Spring Data JPA
    
    </summary>
    
      <category term="框架" scheme="http://www.teacherye.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="SpringData" scheme="http://www.teacherye.com/categories/%E6%A1%86%E6%9E%B6/SpringData/"/>
    
    
      <category term="spring" scheme="http://www.teacherye.com/tags/spring/"/>
    
      <category term="SpringData" scheme="http://www.teacherye.com/tags/SpringData/"/>
    
      <category term="JPA" scheme="http://www.teacherye.com/tags/JPA/"/>
    
  </entry>
  
  <entry>
    <title>SpringData JPA操作指南(二)</title>
    <link href="http://www.teacherye.com/2019/11/02/springData/SpringDataJpa-2/"/>
    <id>http://www.teacherye.com/2019/11/02/springData/SpringDataJpa-2/</id>
    <published>2019-11-02T04:41:47.000Z</published>
    <updated>2019-11-15T06:39:45.776Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Data-JPA-amp-Hibernate"><a href="#Spring-Data-JPA-amp-Hibernate" class="headerlink" title="Spring Data JPA &amp; Hibernate"></a>Spring Data JPA &amp; Hibernate</h1><h2 id="思考：Spring-框架中直接使用-Spring-Data-JPA"><a href="#思考：Spring-框架中直接使用-Spring-Data-JPA" class="headerlink" title="思考：Spring 框架中直接使用 Spring Data JPA ?"></a>思考：Spring 框架中直接使用 Spring Data JPA ?</h2><blockquote><p>当然是可以使用的，但是，需要做一些额外的配置【相对于SpringBoot而言的】, 其中，最主要的就是： @EnableJpaRepositories 注解</p><p>如果在 Web项目使用 DATA JPA，则还需要在WEB配置类中添加另一个注解： @EnableSpringDataWebSupport 注解</p></blockquote><p>配置如下：</p><ol><li><p>在 <strong>AppConfig.java</strong>配置类中，添加对 Spring DATA JPA的支持</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">// repositoryImplementationPostfix默认就是Impl</span></span><br><span class="line"><span class="comment">// entityManagerFactoryRef默认就是entityManagerFactory</span></span><br><span class="line"><span class="comment">// transactionManagerRef默认就是transactionManager</span></span><br><span class="line"><span class="meta">@EnableJpaRepositories</span>(basePackages = &#123;<span class="string">"com.example.repository"</span>&#125;,</span><br><span class="line">        repositoryImplementationPostfix = <span class="string">"Impl"</span>,</span><br><span class="line">        entityManagerFactoryRef = <span class="string">"entityManagerFactory"</span>,</span><br><span class="line">        transactionManagerRef = <span class="string">"transactionManager"</span>)</span><br><span class="line"><span class="meta">@EnableTransactionManagement</span>    <span class="comment">// 启用事务管理器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringDataJpaConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//....</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 配置jpa厂商适配器（参见spring实战p320）</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JpaVendorAdapter <span class="title">jpaVendorAdapter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        HibernateJpaVendorAdapter jpaVendorAdapter = <span class="keyword">new</span> HibernateJpaVendorAdapter();</span><br><span class="line">        <span class="comment">// 设置数据库类型（可使用org.springframework.orm.jpa.vendor包下的Database枚举类）</span></span><br><span class="line">        jpaVendorAdapter.setDatabase(Database.MYSQL);</span><br><span class="line">        <span class="comment">// 设置打印sql语句</span></span><br><span class="line">        jpaVendorAdapter.setShowSql(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 设置不生成ddl语句</span></span><br><span class="line">        jpaVendorAdapter.setGenerateDdl(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">// 设置hibernate方言</span></span><br><span class="line">        jpaVendorAdapter.setDatabasePlatform(<span class="string">"org.hibernate.dialect.MySQL5Dialect"</span>);</span><br><span class="line">        <span class="keyword">return</span> jpaVendorAdapter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置实体管理器工厂</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocalContainerEntityManagerFactoryBean <span class="title">entityManagerFactory</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            DataSource dataSource, JpaVendorAdapter jpaVendorAdapter)</span> </span>&#123;</span><br><span class="line">        LocalContainerEntityManagerFactoryBean emfb = <span class="keyword">new</span> LocalContainerEntityManagerFactoryBean();</span><br><span class="line">        <span class="comment">// 注入数据源</span></span><br><span class="line">        emfb.setDataSource(dataSource);</span><br><span class="line">        <span class="comment">// 注入jpa厂商适配器</span></span><br><span class="line">        emfb.setJpaVendorAdapter(jpaVendorAdapter);</span><br><span class="line">        <span class="comment">// 设置扫描基本包</span></span><br><span class="line">        emfb.setPackagesToScan(<span class="string">"com.example.entity"</span>);</span><br><span class="line">        <span class="keyword">return</span> emfb;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置jpa事务管理器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PlatformTransactionManager <span class="title">transactionManager</span><span class="params">(EntityManagerFactory emf)</span> </span>&#123;</span><br><span class="line">        JpaTransactionManager transactionManager = <span class="keyword">new</span> JpaTransactionManager();</span><br><span class="line">        <span class="comment">// 配置实体管理器工厂</span></span><br><span class="line">        transactionManager.setEntityManagerFactory(emf);</span><br><span class="line">        <span class="keyword">return</span> transactionManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>如果是WEB 项目，则在 <strong>WebMvcConfig.java</strong> 中，也需要启动一个注解来表示对 Spring DATA JPA的支持</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(basePackages = &#123;<span class="string">"cn.fulgens.controller"</span>&#125;)</span><br><span class="line"><span class="meta">@EnableWebMvc</span>   <span class="comment">// 启用spring mvc</span></span><br><span class="line"><span class="meta">@EnableSpringDataWebSupport</span>     <span class="comment">// 启用springmvc对spring data的支持</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>可以看出，程序员需要做一些配置才能在 spring framework或 spring mvc中使用 spring data jpa，来做开发项目的持久层。</p><p>如果是在 spring boot中，以上的配置都可以不需要。</p></blockquote><h2 id="在-Spring-Boot中-整合-Spring-Data-JPA"><a href="#在-Spring-Boot中-整合-Spring-Data-JPA" class="headerlink" title="在 Spring Boot中 整合 Spring Data JPA"></a>在 Spring Boot中 整合 Spring Data JPA</h2><blockquote><ol><li><p>只需要导入 相关的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">&gt;        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">&gt;        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">&gt;    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ol></blockquote><p>&gt;</p><blockquote><ol><li><p>在 application.yml 中配置一下即可\</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&gt;    # jpa config</span></span><br><span class="line"><span class="string">&gt;    spring:</span></span><br><span class="line"><span class="string">&gt;      jpa:</span></span><br><span class="line"><span class="string">&gt;        generate-ddl: true</span></span><br><span class="line"><span class="string">&gt;        hibernate:</span></span><br><span class="line"><span class="string">&gt;          ddl-auto: update</span></span><br><span class="line"><span class="string">&gt;        show-sql: true</span></span><br><span class="line"><span class="string">&gt;        properties:</span></span><br><span class="line"><span class="string">&gt;          hibernate:</span></span><br><span class="line"><span class="string">&gt;            format_sql: true</span></span><br><span class="line"><span class="string">&gt;            dialect: org.hibernate.dialect.MySQL8Dialect</span></span><br><span class="line"><span class="string">&gt;</span></span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="Spring-Data-JPA-的核心API"><a href="#Spring-Data-JPA-的核心API" class="headerlink" title="Spring Data JPA 的核心API"></a>Spring Data JPA 的核心API</h2><p>​    Repository<t, id=""></t,></p><p>​        \- CrudRepository<t, id=""></t,></p><p>​            \-  PagingAndSortingRepository<t, id=""></t,></p><p>​                    \- JpaRepository<t, id=""></t,></p><p>​                            \-  程序员的开发的持久层接口</p><p>​    如下图：</p><p>​    <img src="/2019/11/02/springData/SpringDataJpa-2/assets/springdatajpa-classdiagram.png" alt="springdatajpa-classdiagram"></p><h2 id="自定义查询方法"><a href="#自定义查询方法" class="headerlink" title="自定义查询方法"></a>自定义查询方法</h2><blockquote><p>在SQL语句中，有很多运算符来组织查询的条件，如：</p><p>比较运算符,  &gt;,  &lt;,  &gt;=,  &lt;=, ==, &lt;&gt;,  !=</p><p>NULL判断，  is null, is not null</p><p>in, not in</p><p>between and</p><p>or</p><p>…</p></blockquote><p>SPRING DATA JPA SQL转换引擎在translate我们的方法名时，会根据关键字来翻译，常用的关键字有：</p><table><thead><tr><th>Keyword</th><th>Sample</th><th>JPQL snippet</th></tr></thead><tbody><tr><td><code>And</code></td><td><code>findByLastnameAndFirstname</code></td><td><code>… where x.lastname = ?1 and x.firstname = ?2</code></td></tr><tr><td><code>Or</code></td><td><code>findByLastnameOrFirstname</code></td><td><code>… where x.lastname = ?1 or x.firstname = ?2</code></td></tr><tr><td><code>Is,Equals</code></td><td><code>findByFirstname</code>,<code>findByFirstnameIs</code>,<code>findByFirstnameEquals</code></td><td><code>… where x.firstname = ?1</code></td></tr><tr><td><code>Between</code></td><td><code>findByStartDateBetween</code></td><td><code>… where x.startDate between ?1 and ?2</code></td></tr><tr><td><code>LessThan</code></td><td><code>findByAgeLessThan</code></td><td><code>… where x.age &lt; ?1</code></td></tr><tr><td><code>LessThanEqual</code></td><td><code>findByAgeLessThanEqual</code></td><td><code>… where x.age &lt;= ?1</code></td></tr><tr><td><code>GreaterThan</code></td><td><code>findByAgeGreaterThan</code></td><td><code>… where x.age &gt; ?1</code></td></tr><tr><td><code>GreaterThanEqual</code></td><td><code>findByAgeGreaterThanEqual</code></td><td><code>… where x.age &gt;= ?1</code></td></tr><tr><td><code>After</code></td><td><code>findByStartDateAfter</code></td><td><code>… where x.startDate &gt; ?1</code></td></tr><tr><td><code>Before</code></td><td><code>findByStartDateBefore</code></td><td><code>… where x.startDate &lt; ?1</code></td></tr><tr><td><code>IsNull</code></td><td><code>findByAgeIsNull</code></td><td><code>… where x.age is null</code></td></tr><tr><td><code>IsNotNull,NotNull</code></td><td><code>findByAge(Is)NotNull</code></td><td><code>… where x.age not null</code></td></tr><tr><td><code>Like</code></td><td><code>findByFirstnameLike</code></td><td><code>… where x.firstname like ?1</code></td></tr><tr><td><code>NotLike</code></td><td><code>findByFirstnameNotLike</code></td><td><code>… where x.firstname not like ?1</code></td></tr><tr><td><code>StartingWith</code></td><td><code>findByFirstnameStartingWith</code></td><td><code>… where x.firstname like ?1</code> (parameter bound with appended <code>%</code>)</td></tr><tr><td><code>EndingWith</code></td><td><code>findByFirstnameEndingWith</code></td><td><code>… where x.firstname like ?1</code> (parameter bound with prepended <code>%</code>)</td></tr><tr><td><code>Containing</code></td><td><code>findByFirstnameContaining</code></td><td><code>… where x.firstname like ?1</code> (parameter bound wrapped in <code>%</code>)</td></tr><tr><td><code>OrderBy</code></td><td><code>findByAgeOrderByLastnameDesc</code></td><td><code>… where x.age = ?1 order by x.lastname desc</code></td></tr><tr><td><code>Not</code></td><td><code>findByLastnameNot</code></td><td><code>… where x.lastname &lt;&gt; ?1</code></td></tr><tr><td><code>In</code></td><td><code>findByAgeIn(Collection&lt;Age&gt; ages)</code></td><td><code>… where x.age in ?1</code></td></tr><tr><td><code>NotIn</code></td><td><code>findByAgeNotIn(Collection&lt;Age&gt; ages)</code></td><td><code>… where x.age not in ?1</code></td></tr><tr><td><code>True</code></td><td><code>findByActiveTrue()</code></td><td><code>… where x.active = true</code></td></tr><tr><td><code>False</code></td><td><code>findByActiveFalse()</code></td><td><code>… where x.active = false</code></td></tr><tr><td><code>IgnoreCase</code></td><td><code>findByFirstnameIgnoreCase</code></td><td><code>… where UPPER(x.firstame) = UPPER(?1)</code></td></tr></tbody></table><p>参考： <a href="https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#jpa.java-config" target="_blank" rel="noopener">官方文档</a></p><h2 id="JPQL"><a href="#JPQL" class="headerlink" title="JPQL"></a>JPQL</h2><blockquote><p>全称： Java Persistence Query Language,  Java持久化查询语言， 类似于 HQL[Hibernate Query Language]</p><p>SQL语法：</p><p>SELECT [表别名.] 列名 [列别名],列名[列别名] | *  FROM  表名 [表别名] </p><p>WHERE 条件</p><p>GROUP BY 分组</p><p>HAVING 分组过滤</p><p>ORDER BY 列名|表达式|列序号  [ASC | DESC]</p><hr><p>JPQL: 可以简单地理解为在 SQL的基础上，把所有写列名的位置改成 属性名，把表名的位置 改成 实体类名 即可。</p></blockquote><h2 id="如何去避免暴露不必要的父接口中的方法"><a href="#如何去避免暴露不必要的父接口中的方法" class="headerlink" title="如何去避免暴露不必要的父接口中的方法"></a>如何去避免暴露不必要的父接口中的方法</h2><blockquote><p>我们开发的Repository接口是继承于 JpaRepository接口的，而这个父接口中有些方法我们是不需要的，如果不做处理，则会暴露给业务层，造成调用者不必要的“麻烦”</p></blockquote><p>处理式方式一：</p><blockquote><ol><li>我们可以自定义一个接口，直接从 Repository<t, id=""> 接口处继承， 并打上 @NoRepositoryBean 注解。然后在此方法定义你想要暴露的方法出来。</t,></li><li>我们开发的Repository接口从我们自定义的  <strong>@NoRepositoryBean</strong> 接口中派生出来，这样就可以达到目的。</li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      Spring Data JPA
    
    </summary>
    
      <category term="框架" scheme="http://www.teacherye.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="SpringData" scheme="http://www.teacherye.com/categories/%E6%A1%86%E6%9E%B6/SpringData/"/>
    
    
      <category term="spring" scheme="http://www.teacherye.com/tags/spring/"/>
    
      <category term="SpringData" scheme="http://www.teacherye.com/tags/SpringData/"/>
    
      <category term="JPA" scheme="http://www.teacherye.com/tags/JPA/"/>
    
  </entry>
  
  <entry>
    <title>SpringData JPA操作指南(一)</title>
    <link href="http://www.teacherye.com/2019/11/01/springData/SpringDataJpa-1/"/>
    <id>http://www.teacherye.com/2019/11/01/springData/SpringDataJpa-1/</id>
    <published>2019-11-01T04:41:47.000Z</published>
    <updated>2019-11-15T06:39:34.817Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Data-JPA-amp-Hibernate"><a href="#Spring-Data-JPA-amp-Hibernate" class="headerlink" title="Spring Data JPA &amp; Hibernate"></a>Spring Data JPA &amp; Hibernate</h1><h2 id="什么是-ORM"><a href="#什么是-ORM" class="headerlink" title="什么是 ORM"></a>什么是 ORM</h2><blockquote><p>ORM, Object Relationship Mapping, 对象关系映射，表达的是实体类与数据库表之间的映射关系，核心思想是如下规则：</p><ul><li>实体类映射成表名</li><li>对象标识映射成主键列</li><li>属性映射成列名</li><li>对象关系映射成外键</li></ul><p>ORM有很多已经实现了的框架，比如：</p><p>​    Hibernate框架</p><p>​    MyBatis框架、</p><p>​    …</p></blockquote><h2 id="Hibernate-框架"><a href="#Hibernate-框架" class="headerlink" title="Hibernate 框架"></a>Hibernate 框架</h2><blockquote><p>它是一款非常优秀的ORM框架，它可以自动创建并执行DDL语句、DML语句、事务语句等操作，程序员使用HIBERNATE后无需写原生态的SQL命名，通过面向对象的操作就可以完成CRUD操作。</p></blockquote><h2 id="JPA-又是什么？"><a href="#JPA-又是什么？" class="headerlink" title="JPA 又是什么？"></a>JPA 又是什么？</h2><blockquote><p>JPA 是ORACLE公司制定的数据持久层的规范，它的全称：Java Persistence API, 它的目的是整合市面上所有的数据持久层框架，如：Hibernate, mybatis, …</p></blockquote><p>那么这些数据持久层框架要遵守 JPA规范，Hibernate框架是最早实现了JPA规范，它还得到了JPA的兼容性认证。</p><p>使用JPA规范去开发数据持久层的好处是：</p><ol><li>将来可以很方便地从 HIBERNATE 切换到 mybatis或是 toplink.  或者是反过来。</li><li>由官方提供后续的版本升级</li></ol><p><img src="/2019/11/01/springData/SpringDataJpa-1/assets/jpa-spec.png" alt="jpa-spec"></p><blockquote><p>所以，我们可以理解为：</p><p>Hibernate框架是JPA规范的实现者之一，当然，是目前JPA实现最好的框架</p></blockquote><h2 id="Spring-DATA-JPA-又是什么？"><a href="#Spring-DATA-JPA-又是什么？" class="headerlink" title="Spring DATA JPA 又是什么？"></a>Spring DATA JPA 又是什么？</h2><blockquote><p>Spring Data 是Spring 技术生态下的一个“顶级”项目，与Spring Framework, Spring Boot “平级”， 它也是想一统数据持久层的技术，它当然是基于 Spring 生态， 而Spring Data jpa 是  Spring Data 框架下的一个组成部份，专注于 JPA 规范的实现，由于 Hibernate框架本身是得到了JPA官方的兼容性认证的，所以，Spring DATA JPA并没有重新去实现JPA规范，则是基于 Hibernate 框架做了改良和辅助性功能的提供，使之更好地融入到Spring技术生态中去。</p><p>如：</p></blockquote><p><img src="/2019/11/01/springData/SpringDataJpa-1/assets/spring-data-jpa.png" alt="spring-data-jpa"></p><p>所以，我们可以这么理解，Spring Data JPA 是更高层次的API抽象【相当于具体的ORM框架而言的】</p><h2 id="Spring-boot-中整合-Spring-Data-JPA"><a href="#Spring-boot-中整合-Spring-Data-JPA" class="headerlink" title="Spring boot 中整合 Spring Data JPA"></a>Spring boot 中整合 Spring Data JPA</h2><ol><li><p>在pom.xml导入 spring data jpa的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><ol><li><p>在 application.yml 中配置 spring data jpa</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># jpa config</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  jpa:</span></span><br><span class="line"><span class="attr">    generate-ddl:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    hibernate:</span></span><br><span class="line"><span class="attr">      ddl-auto:</span> <span class="string">update</span></span><br><span class="line"><span class="attr">    show-sql:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    properties:</span></span><br><span class="line"><span class="attr">      hibernate:</span></span><br><span class="line"><span class="attr">        format_sql:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">        dialect:</span> <span class="string">org.hibernate.dialect.MySQL8Dialect</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://localhost:3306/master?characterEncoding=UTF8&amp;serverTimezone=UTC</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure></li></ol><ol><li><p>实体类使用JPA规范中的注解来与表进行映射</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kclmedu.datajpa.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"TBL_LOG_RECORD"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogRecord</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span>  <span class="comment">//表明是主键</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span></span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"record_time"</span>)</span><br><span class="line">    <span class="keyword">private</span> Date recordTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span></span><br><span class="line">    <span class="keyword">private</span> String user;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>写一个类继承 JpaRepository 类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kclmedu.datajpa.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.kclmedu.datajpa.entity.LogRecord;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span>  <span class="comment">//可选</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">LogRecordRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">LogRecord</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//nothing!</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>编写测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kclmedu.datajpa.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.kclmedu.datajpa.entity.LogRecord;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogRecordRepositoryTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LogRecordRepository logRecordRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSave</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LogRecord record = <span class="keyword">new</span> LogRecord();</span><br><span class="line">        record.setTitle(<span class="string">"添加操作"</span>);</span><br><span class="line">        record.setContent(<span class="string">"添加了一条日志记录"</span>);</span><br><span class="line">        record.setRecordTime(<span class="keyword">new</span> Date());</span><br><span class="line">        record.setUser(<span class="string">"admin"</span>);</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        logRecordRepository.save(record);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      Spring Data JPA
    
    </summary>
    
      <category term="框架" scheme="http://www.teacherye.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="SpringData" scheme="http://www.teacherye.com/categories/%E6%A1%86%E6%9E%B6/SpringData/"/>
    
    
      <category term="spring" scheme="http://www.teacherye.com/tags/spring/"/>
    
      <category term="SpringData" scheme="http://www.teacherye.com/tags/SpringData/"/>
    
      <category term="JPA" scheme="http://www.teacherye.com/tags/JPA/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC学习小结</title>
    <link href="http://www.teacherye.com/2019/10/10/springmvc/09-Spring%20MVC%E5%B0%8F%E7%BB%93/"/>
    <id>http://www.teacherye.com/2019/10/10/springmvc/09-Spring MVC小结/</id>
    <published>2019-10-10T14:51:47.000Z</published>
    <updated>2019-10-10T14:50:58.912Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-MVC常用的功能"><a href="#Spring-MVC常用的功能" class="headerlink" title="Spring MVC常用的功能"></a>Spring MVC常用的功能</h1><h2 id="1-文件上传下载"><a href="#1-文件上传下载" class="headerlink" title="1. 文件上传下载"></a>1. 文件上传下载</h2><h3 id="A-必要条件"><a href="#A-必要条件" class="headerlink" title="A.必要条件"></a>A.必要条件</h3><ol><li><p>在WebMvcConfig.java中，添加处理 Multipart-formdata 的功能@Bean， 如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CommonsMultipartResolver <span class="title">multipartResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        CommonsMultipartResolver multipartResolver = <span class="keyword">new</span> CommonsMultipartResolver();</span><br><span class="line">        <span class="comment">//做一些设置</span></span><br><span class="line">        multipartResolver.setDefaultEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">        multipartResolver.setMaxUploadSize(<span class="number">20</span>*<span class="number">1024</span>*<span class="number">1024</span>);</span><br><span class="line">        multipartResolver.setMaxUploadSizePerFile(<span class="number">2</span>*<span class="number">1024</span>*<span class="number">1024</span>); <span class="comment">//单个文件不能超过2M</span></span><br><span class="line">        <span class="keyword">return</span> multipartResolver;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="B-文件上传操作"><a href="#B-文件上传操作" class="headerlink" title="B.文件上传操作"></a>B.文件上传操作</h3><ol><li><p>在前台的页面表单上，需要保证 form 表单的 method=post 以及 enctype=multipart/form-data</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">"$&#123;pageContext.request.contextPath&#125;/upload"</span> method=<span class="string">"post"</span></span><br><span class="line">                enctype=<span class="string">"multipart/form-data"</span> name=<span class="string">"uploadForm"</span>&gt;</span><br><span class="line">    选择一个文件：&lt;input type=<span class="string">"file"</span> name=<span class="string">"uploadFile"</span> accept=<span class="string">"*/*"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"上传"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure></li><li><p>在后台的控制器中，需要在参数中加上 MultipartFile 对象，并且参数名要与前台表单中<input type="file" name="与方法参数一样">  name属性值保持一致</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/upload"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">upload</span><span class="params">(MultipartFile uploadFile, Model model,</span></span></span><br><span class="line"><span class="function"><span class="params">                            HttpSession session)</span></span></span><br><span class="line"><span class="function">                                <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        log.debug(<span class="string">"-- 上传的文件名："</span>+uploadFile.getOriginalFilename());</span><br><span class="line">        log.debug(<span class="string">"-- 文件大小： "</span>+uploadFile.getSize());</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        String originalFilename = uploadFile.getOriginalFilename();</span><br><span class="line">        <span class="keyword">int</span> pos = originalFilename.lastIndexOf(<span class="string">"."</span>);</span><br><span class="line">        <span class="comment">//原文件后缀名</span></span><br><span class="line">        String suffix = originalFilename.substring(pos);</span><br><span class="line">        <span class="comment">//确定好服务端保存文件的具体位置</span></span><br><span class="line">        ServletContext context = session.getServletContext();</span><br><span class="line">        String realpath = context.getRealPath(UPLOAD_DIR);</span><br><span class="line">        <span class="comment">//产生一个uuid式的随机文件名</span></span><br><span class="line">        String uuid = UUID.randomUUID().toString();</span><br><span class="line">        <span class="comment">//构建目标的完整文件名</span></span><br><span class="line">        String fullname = realpath+ File.separator+uuid+suffix;</span><br><span class="line">        log.debug(<span class="string">"** 目标文件名"</span>+fullname);</span><br><span class="line">        <span class="comment">//利用IO流进行读写，此处可以利用 commons-io中的工具类来快速完成</span></span><br><span class="line">        FileUtils.copyInputStreamToFile(uploadFile.getInputStream(), <span class="keyword">new</span> File(fullname));</span><br><span class="line">        log.debug(<span class="string">"-- 把上传的源文件COPY到目标文件完成...."</span>);</span><br><span class="line">        <span class="comment">//把一个信息绑定到model中，以便在前端可以显示</span></span><br><span class="line">        model.addAttribute(<span class="string">"originalFilename"</span>,originalFilename);</span><br><span class="line">        model.addAttribute(<span class="string">"server_file_name"</span>,fullname);</span><br><span class="line">        model.addAttribute(<span class="string">"filesize"</span>, uploadFile.getSize());</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"forward:/common/upload.jsp"</span>; <span class="comment">//不经过视图解析器</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="C-文件下载"><a href="#C-文件下载" class="headerlink" title="C.文件下载"></a>C.文件下载</h3><blockquote><p>需要注意的是设置响应内容类型和响应头，代码片断如下：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/download"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">downloadFile</span><span class="params">(String id, HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//获取应用上下文</span></span><br><span class="line">        ServletContext context = request.getServletContext();</span><br><span class="line">        String realpath = context.getRealPath(UPLOAD_DIR);</span><br><span class="line">        log.debug(<span class="string">"要下载的文件名："</span>+id);</span><br><span class="line">        <span class="comment">//找到指定的文件</span></span><br><span class="line">        File parent = <span class="keyword">new</span> File(realpath);</span><br><span class="line">        File target = <span class="keyword">new</span> File(parent, id);</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="keyword">if</span>(target.isFile()) &#123;</span><br><span class="line">            <span class="comment">//根据文件的类型不同，设置不同的响应内容类型</span></span><br><span class="line">            <span class="keyword">if</span>(id.endsWith(<span class="string">".zip"</span>)) &#123;</span><br><span class="line">                log.debug(<span class="string">"-- 文件内容是 zip 格式，应响头为：application/zip"</span>);</span><br><span class="line">                response.setContentType(<span class="string">"application/zip"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(id.endsWith(<span class="string">".jpg"</span>) || id.endsWith(<span class="string">".jpeg"</span>)) &#123;</span><br><span class="line">                log.debug(<span class="string">"-- 文件内容是图片格式，应响头为：image/jpeg"</span>);</span><br><span class="line">                response.setContentType(<span class="string">"image/jpeg"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                log.debug(<span class="string">"-- 设置成通用的格式：application/octet-stream "</span>);</span><br><span class="line">                response.setContentType(<span class="string">"application/octet-stream"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//这个头可以让浏览器弹出保存框</span></span><br><span class="line">            response.setHeader(<span class="string">"Content-disposition"</span>,<span class="string">"attachment;filename=\""</span>+id+<span class="string">"\""</span>);</span><br><span class="line">            <span class="comment">//            //把此文件以流的方式输出到客户端</span></span><br><span class="line">            <span class="keyword">try</span>(FileInputStream fis = <span class="keyword">new</span> FileInputStream(target);) &#123;</span><br><span class="line">                <span class="comment">//利用commons-io的工具类来完成读写的COPY</span></span><br><span class="line">                IOUtils.copy(fis, response.getOutputStream());</span><br><span class="line">                <span class="comment">//刷新缓存</span></span><br><span class="line">                response.flushBuffer();</span><br><span class="line">                log.debug(<span class="string">"下载完成"</span>);</span><br><span class="line">            &#125;<span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        log.debug(<span class="string">"下载的文件："</span>+id);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="2-Bean-Validation-后补充的笔记"><a href="#2-Bean-Validation-后补充的笔记" class="headerlink" title="2.Bean Validation[后补充的笔记]"></a>2.Bean Validation[后补充的笔记]</h2><h3 id="传统的写法"><a href="#传统的写法" class="headerlink" title="传统的写法"></a>传统的写法</h3><p>写起来代码量很大,且效率低下.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">String name = user.getName();</span><br><span class="line">        <span class="keyword">if</span>(name == <span class="keyword">null</span> || name.trim().equals(<span class="string">""</span>) )&#123;</span><br><span class="line">            errors.put(<span class="string">"name"</span>, <span class="string">"name不能为空!"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(name.trim().length()&gt;<span class="number">20</span> )&#123;</span><br><span class="line">                errors.put(<span class="string">"name"</span>, <span class="string">"name长度不能超过20!"</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(name 不满足某个格式)&#123;</span><br><span class="line">                    errors.put(<span class="string">"name"</span>, <span class="string">"name格式不正确!"</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(userService.getByName(name.trim()) != <span class="keyword">null</span>)&#123;</span><br><span class="line">                        errors.put(<span class="string">"name"</span>, <span class="string">"用户名已被使用!"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p><ul><li>JSR-303 是JAVA EE 6 中的一项子规范，称为Bean Validation，官方参考实现是Hibernate Validator.</li><li>此实现与Hibernate ORM 没有任何关系， JSR303 用于对Java Bean 的属性值值进行验证。</li><li>Spring MVC 支持 JSR-303，可以在控制器中对表单提交的数据方便地验证。</li></ul><h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><h4 id="配置-pom-xml"><a href="#配置-pom-xml" class="headerlink" title="配置 pom.xml"></a>配置 pom.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--JSR303--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.0.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="配置-MessageSource"><a href="#配置-MessageSource" class="headerlink" title="配置 MessageSource"></a>配置 MessageSource</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MessageSource <span class="title">validationMessageSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ResourceBundleMessageSource messageSource = <span class="keyword">new</span> ResourceBundleMessageSource();</span><br><span class="line">        <span class="comment">//字符编码</span></span><br><span class="line">        messageSource.setDefaultEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">        <span class="comment">//Set an array of basenames</span></span><br><span class="line">        messageSource.setBasenames(<span class="string">"validationMessages"</span>);</span><br><span class="line">        <span class="comment">//whether to use the message code as default message</span></span><br><span class="line">        messageSource.setUseCodeAsDefaultMessage(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> messageSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Validator <span class="title">getValidator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LocalValidatorFactoryBean lvfb = <span class="keyword">new</span> LocalValidatorFactoryBean();</span><br><span class="line">        lvfb.setValidationMessageSource(validationMessageSource());</span><br><span class="line">        <span class="keyword">return</span> lvfb;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="准备校验逻辑"><a href="#准备校验逻辑" class="headerlink" title="准备校验逻辑"></a>准备校验逻辑</h4><ul><li>彻底理解需求</li><li>整理请求参数列表</li><li>整理校验逻辑</li></ul><h3 id="准备资源文件"><a href="#准备资源文件" class="headerlink" title="准备资源文件"></a>准备资源文件</h3><p>基于 i18n 国际化技术，需要提供多语言环境下的各种资源文件</p><h5 id="validationMessages-en-properties"><a href="#validationMessages-en-properties" class="headerlink" title="validationMessages_en.properties"></a>validationMessages_en.properties</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">user.name.invalid=Username must be between 6 and 12</span><br><span class="line">user.password.invalid=The password must be between 6 and 12</span><br><span class="line">user.age.invalid=Age must be between 18 and 80.</span><br></pre></td></tr></table></figure><h5 id="validationMessages-zh-properties"><a href="#validationMessages-zh-properties" class="headerlink" title="validationMessages_zh.properties"></a>validationMessages_zh.properties</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">user.name.invalid=用户名必须在6到12之间</span><br><span class="line">user.password.invalid=密码必须在6到12之间</span><br><span class="line">user.age.invalid=年龄必须在18到200之间</span><br></pre></td></tr></table></figure><h3 id="定义校验封装类"><a href="#定义校验封装类" class="headerlink" title="定义校验封装类"></a>定义校验封装类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.hibernate.validator.constraints.NotEmpty;</span><br><span class="line"><span class="keyword">import</span> javax.validation.GroupSequence;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.Max;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.Min;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.NotNull;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.Size;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * User Data Transfer Object</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDto</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="meta">@Size</span>(min = <span class="number">6</span>, max = <span class="number">12</span>, message = <span class="string">"&#123;user.name.invalid&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="meta">@Size</span>(min = <span class="number">6</span>, max = <span class="number">12</span>, message = <span class="string">"&#123;user.password.invalid&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Min</span>(value = <span class="number">18</span>, message = <span class="string">"&#123;user.age.invalid&#125;"</span>)</span><br><span class="line">    <span class="meta">@Max</span>(value = <span class="number">80</span>, message = <span class="string">"&#123;user.age.invalid&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserDto</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="控制器"><a href="#控制器" class="headerlink" title="控制器"></a>控制器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"add"</span>, method = RequestMethod.POST)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(Model model, @Valid UserDto user, BindingResult bindingResult)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (bindingResult.hasErrors()) &#123;</span><br><span class="line">        model.addAttribute(<span class="string">"user"</span>, user);</span><br><span class="line">        model.addAttribute(<span class="string">"errors"</span>, getErrorMap(bindingResult));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"userAdd"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    model.addAttribute(<span class="string">"user"</span>, user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"result"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="可自定义提供转换方法"><a href="#可自定义提供转换方法" class="headerlink" title="可自定义提供转换方法:"></a>可自定义提供转换方法:</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将参数错误信息封装到 map</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">getErrorMap</span><span class="params">(BindingResult bindingResult)</span> </span>&#123;</span><br><span class="line">    Map&lt;String, String&gt; errorMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (ObjectError objectError : bindingResult.getAllErrors()) &#123;</span><br><span class="line">        FieldError fieldError = (FieldError) objectError;</span><br><span class="line">        String field = fieldError.getField();</span><br><span class="line">        String error = fieldError.getDefaultMessage();</span><br><span class="line">        errorMap.put(field, error);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> errorMap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="页面"><a href="#页面" class="headerlink" title="页面"></a>页面</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> pageEncoding=<span class="string">"UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;<span class="function">Bean <span class="title">Validation</span> <span class="params">(JSR303)</span>&lt;/title&gt;</span></span><br><span class="line"><span class="function">&lt;/head&gt;</span></span><br><span class="line"><span class="function">&lt;body&gt;</span></span><br><span class="line"><span class="function">&lt;h1&gt;Bean <span class="title">Validation</span> <span class="params">(JSR303)</span>&lt;/h1&gt;</span></span><br><span class="line"><span class="function">&lt;hr/&gt;</span></span><br><span class="line"><span class="function">&lt;p&gt;演示提交一个User对象&lt;/p&gt;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">&lt;form id</span>=<span class="string">"user"</span> action=<span class="string">"$&#123;path&#125;/demo/add"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    &lt;table width=<span class="string">"30%"</span>&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;th&gt;Name:&lt;/th&gt;</span><br><span class="line">            &lt;td&gt;</span><br><span class="line">                &lt;input id=<span class="string">"name"</span> name=<span class="string">"name"</span> type=<span class="string">"text"</span> value=<span class="string">"$&#123;user.name&#125;"</span>/&gt;</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">            &lt;td&gt;</span><br><span class="line">                &lt;span&gt;$&#123;errors.name&#125;&lt;/span&gt;</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;th&gt;Password:&lt;/th&gt;</span><br><span class="line">            &lt;td&gt;</span><br><span class="line">                &lt;input id=<span class="string">"password"</span> name=<span class="string">"password"</span> type=<span class="string">"password"</span> value=<span class="string">"$&#123;user.password&#125;"</span>/&gt;</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">            &lt;td&gt;</span><br><span class="line">                &lt;span&gt;$&#123;errors.password&#125;&lt;/span&gt;</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;th&gt;Age:&lt;/th&gt;</span><br><span class="line">            &lt;td&gt;</span><br><span class="line">                &lt;input id=<span class="string">"age"</span> name=<span class="string">"age"</span> type=<span class="string">"text"</span> value=<span class="string">"$&#123;user.age&#125;"</span>/&gt;</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">            &lt;td&gt;</span><br><span class="line">                &lt;span&gt;$&#123;errors.age&#125;&lt;/span&gt;</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td style=<span class="string">"text-align: center"</span>&gt;</span><br><span class="line">                &lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交"</span>&gt;</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h3><h4 id="JSR303提供"><a href="#JSR303提供" class="headerlink" title="JSR303提供"></a>JSR303提供</h4><table><thead><tr><th>注解类</th><th>说明</th></tr></thead><tbody><tr><td>@Null</td><td>必须为 null</td></tr><tr><td>@NotNull</td><td>必须不为 null</td></tr><tr><td>@AssertTrue</td><td>必须为 true</td></tr><tr><td>@AssertFalse</td><td>必须为 false</td></tr><tr><td>@Min(value)</td><td>必须是一个数字，其值必须大于等于指定的最小值</td></tr><tr><td>@Max(value)</td><td>必须是一个数字，其值必须小于等于指定的最大值</td></tr><tr><td>@DecimalMin(value)</td><td>必须是一个数字，其值必须大于等于指定的最小值</td></tr><tr><td>@DecimalMax(value)</td><td>必须是一个数字，其值必须小于等于指定的最大值</td></tr><tr><td>@Size(max, min)</td><td>大小必须在指定的范围内</td></tr><tr><td>@Digits (integer, fraction)</td><td>必须是一个数字，其值必须在可接受的范围内</td></tr><tr><td>@Past</td><td>必须是一个过去的日期</td></tr><tr><td>@Future</td><td>必须是一个将来的日期</td></tr><tr><td>@Pattern(value)</td><td>必须符合指定的正则表达式</td></tr></tbody></table><h4 id="Hibernate-Validator提供"><a href="#Hibernate-Validator提供" class="headerlink" title="Hibernate Validator提供"></a>Hibernate Validator提供</h4><table><thead><tr><th>注解类</th><th>说明</th></tr></thead><tbody><tr><td>@Email</td><td>必须是电子邮箱地址</td></tr><tr><td>@Length</td><td>字符串的长度必须在指定的范围内</td></tr><tr><td>@NotEmpty</td><td>必须非空(有空格就不算Empty)</td></tr><tr><td>@NotBlank</td><td>字符串的必须非空(单纯空格算Blank)</td></tr><tr><td>@Range</td><td>必须在指定范围内</td></tr></tbody></table><h4 id="Spring-MVC提供"><a href="#Spring-MVC提供" class="headerlink" title="Spring MVC提供"></a>Spring MVC提供</h4><table><thead><tr><th>注解类</th><th>说明</th></tr></thead><tbody><tr><td>@Valid</td><td>数据需要校验</td></tr></tbody></table><h2 id="3-拦截器-【Interceptor】"><a href="#3-拦截器-【Interceptor】" class="headerlink" title="3.拦截器 【Interceptor】"></a>3.拦截器 【Interceptor】</h2><blockquote><p>主要就是要弄清楚  Filter、 Interceptor、 AOP三者的区别，以及各自的应用场景。</p><ol><li><strong>Filter:</strong> <strong>过滤器</strong>，主要是针对<strong>请求</strong> 的过滤，在容器层次上进行，保证<strong>“取你所需”</strong></li><li><strong>Interceptor:</strong>  拦截器, 是过滤器的延伸，除了可以对请求操作外，还可以对 视图和模型进行拦截，是 “拒你所拒”</li><li><strong>AOP:</strong>  面向切面编程， 主要针对 业务层和持久层的代码织入，它是降低代码耦合度的一种很好的方式，基于动态代理</li></ol></blockquote><p><img src="/2019/10/10/springmvc/09-Spring MVC小结/D:/学习工作区\1.codeArea\3.JavaEE_Workspace\0.SpringEcoSystem\trainer-ibm\notes\images\interceptor.png" alt="interceptor"></p>]]></content>
    
    <summary type="html">
    
      Spring mvc， MVC框架
    
    </summary>
    
      <category term="框架" scheme="http://www.teacherye.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="MVC" scheme="http://www.teacherye.com/categories/%E6%A1%86%E6%9E%B6/MVC/"/>
    
      <category term="SpringMVC" scheme="http://www.teacherye.com/categories/%E6%A1%86%E6%9E%B6/MVC/SpringMVC/"/>
    
    
      <category term="spring" scheme="http://www.teacherye.com/tags/spring/"/>
    
      <category term="springmvc" scheme="http://www.teacherye.com/tags/springmvc/"/>
    
      <category term="mvc框架" scheme="http://www.teacherye.com/tags/mvc%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC中RestFUL风格的API设计</title>
    <link href="http://www.teacherye.com/2019/10/10/springmvc/10-REST%E9%A3%8E%E6%A0%BCAPI%E7%9A%84%E8%AE%BE%E8%AE%A1/"/>
    <id>http://www.teacherye.com/2019/10/10/springmvc/10-REST风格API的设计/</id>
    <published>2019-10-10T14:51:47.000Z</published>
    <updated>2019-10-10T14:52:00.377Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Restful-风构架构"><a href="#Restful-风构架构" class="headerlink" title="Restful  风构架构"></a>Restful  风构架构</h1><blockquote><p>Spring mvc 框架是完全支持 Restful 风格的，我们采用 / 匹配模式可以完美地实现Restful 操作</p></blockquote><h2 id="REST-定义"><a href="#REST-定义" class="headerlink" title="REST 定义"></a>REST 定义</h2><blockquote><p>Representation State Transfer, 表述性状态转移， 后端的任何资源都可以采用 统一资源定位符[URI] 来定位，配合上请求的动作，可以完整地表达出请求的含义。 根据数据的常用操作，把它与不同的请求类型相匹配，主要有：</p><p>C操作，Create, 创建数据,  可以使用  POST 请求</p><p>R操作，Retrieve, 获取数据，可以使用 GET 请求</p><p>U操作，Update， 更新数据，可以使用  PUT 请求</p><p>D操作，Delete， 删除数据，可以使用  DELETE 请求</p></blockquote><p>在控制器的方法中， @RequestMapping中有一个 method属性，它可以指定此方法只接收哪种请求类型。</p><h2 id="如何开发-REST风格的控制器"><a href="#如何开发-REST风格的控制器" class="headerlink" title="如何开发 REST风格的控制器"></a>如何开发 REST风格的控制器</h2><blockquote><p>与开发普通的控制器相比，需要使用 @ResponseBody 来表明以方法返回值做为响应体，基本上都是以JSON做数据交换的格式。</p></blockquote><ol><li>我们的控制器可以使用 @Controller + @ResponseBody 组合注解，也可以使用 @RestController 【推荐这个】</li><li>在方法上面，使用 @RequestMapping 时，要指定 method 以及 produces</li><li>由于在Rest风格上，可以通过 路径参数来传递请求参数，所以需要用到 @PathVariable 注解以及 @RequestBody 注解</li></ol><h2 id="Rest风格与普通的URI对比"><a href="#Rest风格与普通的URI对比" class="headerlink" title="Rest风格与普通的URI对比"></a>Rest风格与普通的URI对比</h2><ol><li><p>获取id为1的Employee实例或获取所有的Employee实例</p><p>非REST风格URI:  localhost:9090/emp/get?id=1   和   localhost:9090/emp/list</p><p> Rest风格URI:   GET localhost:9090/emp/1         和    GET localhost:9090/emp</p></li><li><p>删除ID为2的Employee 和  删除所有的 Employee</p><p>非REST风格URI:  localhost:9090/emp/delete?id=1   和   localhost:9090/emp/deleteAll</p><p> Rest风格URI:  DELETE localhost:9090/emp/2         和    DELETE localhost:9090/emp</p></li></ol><p>综上所述，REST风格的URI 充份利用了请求的类型这个动词，所以，不需要在URI层面再去说明不同的操作【相当于“动词”前移】，在REST风格的URI中，它的格式：</p><p>​     请求动作  +  URI名词</p><h2 id="REST风格API的设计"><a href="#REST风格API的设计" class="headerlink" title="REST风格API的设计"></a>REST风格API的设计</h2><p>首先了解一下HTTP的请求方式</p><ol><li>GET            -&gt;　获取数据，也就是对应 查询【R】</li><li>POST         -&gt;    提交数据， 也就是对应 创建 【C】</li><li>DELETE      -&gt;    删除数据，也就是对应  删除【D】</li><li>PUT            -&gt;   更新数据【全部】，也就是对应 更新【U】</li><li>PATCH       -&gt;   更新数据【局部】， 也就是对应 更新 【U】</li><li>….</li></ol><p>再来看一下设计REST 风格API时需要注意的事项：</p><ol><li>在URI中不要使用动词，仅可能地全部使用名词</li><li>在URI中尽可能使用复数，如：/users, /users/1</li><li>如果有多级层的情况，可以把子级做为查询字符串【请求参数】来传递</li><li>在URI中加入版本号， 如：/api/v1/users,    /api/v2/users</li><li>当然，也要根据公司的具体业务情况，再具体分析</li></ol><p>如：</p><table><thead><tr><th>请求方式</th><th>URI</th><th>描述</th></tr></thead><tbody><tr><td>GET</td><td>/users</td><td>获取所有的用户信息</td></tr><tr><td>GET</td><td>/users/{id}</td><td>获取指定ID的用户信息</td></tr><tr><td>GET</td><td>/addr/{province}?q=xxx</td><td>根据省份以及过滤条件查询出地址信息</td></tr><tr><td>POST</td><td>/users</td><td>插入用户信息</td></tr><tr><td>DELETE</td><td>/users</td><td>删除所有用户信息</td></tr><tr><td>DELETE</td><td>/USERS/{id}</td><td>删除指定的用户</td></tr><tr><td>PUT</td><td>/users/{id}</td><td>更新指定ID的用户所有信息【ID除外】</td></tr><tr><td>PATCH</td><td>/user/{id}</td><td>更新指定ID的用户部分信息</td></tr></tbody></table><h3 id="响应状态码"><a href="#响应状态码" class="headerlink" title="响应状态码"></a>响应状态码</h3><blockquote><p>在HTTP协议中定义了5大类，分别是：</p><ul><li>1xx</li><li>2xx       —&gt;  服务端处理OK<ul><li>200   代表OK</li><li>201   代表 CREATE</li><li>203    …</li><li>204   …</li><li></li></ul></li><li>3xx       -&gt;  服务端请求转移</li><li>4xx       –&gt; 访问的资源不存在</li><li>5xx       –&gt;  服务端出错了<ul><li>500   </li><li>50？  …</li></ul></li></ul></blockquote><h3 id="Spring-框架提供的-响应体实例类-ResponseEntity"><a href="#Spring-框架提供的-响应体实例类-ResponseEntity" class="headerlink" title="Spring 框架提供的 响应体实例类 ResponseEntity"></a>Spring 框架提供的 响应体实例类 ResponseEntity<t></t></h3><blockquote><p>此类可以封装响应数据以及响应头和响应状态，并由spring mvc框架自动转换成 json格式后响应给客户端。</p><p>具体的代码操作请查看 项目案例</p></blockquote><p>所涉及到的注解及API</p><ol><li>注解<ul><li>@PathVariable </li><li>@RequestBody</li><li>@RestController</li></ul></li><li>API<ul><li>ResponseEntity<t></t></li><li>HttpStatus</li><li>HttpHeaders</li><li>UriComponentBuilder</li></ul></li></ol><p>注：以上类型 和注解 都可以在 API 中查看原义，或是通过阅读代码理解它的作用。</p>]]></content>
    
    <summary type="html">
    
      Spring mvc， MVC框架, RestFul
    
    </summary>
    
      <category term="框架" scheme="http://www.teacherye.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="MVC" scheme="http://www.teacherye.com/categories/%E6%A1%86%E6%9E%B6/MVC/"/>
    
      <category term="SpringMVC" scheme="http://www.teacherye.com/categories/%E6%A1%86%E6%9E%B6/MVC/SpringMVC/"/>
    
      <category term="RestFul" scheme="http://www.teacherye.com/categories/%E6%A1%86%E6%9E%B6/MVC/SpringMVC/RestFul/"/>
    
    
      <category term="spring" scheme="http://www.teacherye.com/tags/spring/"/>
    
      <category term="springmvc" scheme="http://www.teacherye.com/tags/springmvc/"/>
    
      <category term="mvc框架" scheme="http://www.teacherye.com/tags/mvc%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC中控制器的测试</title>
    <link href="http://www.teacherye.com/2019/10/10/springmvc/11-Spring%20MVC%E4%B8%AD%E6%8E%A7%E5%88%B6%E5%99%A8%E7%9A%84%E6%B5%8B%E8%AF%95/"/>
    <id>http://www.teacherye.com/2019/10/10/springmvc/11-Spring MVC中控制器的测试/</id>
    <published>2019-10-10T14:51:47.000Z</published>
    <updated>2019-10-10T14:52:55.907Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-MVC中控制器的测试"><a href="#Spring-MVC中控制器的测试" class="headerlink" title="Spring MVC中控制器的测试"></a>Spring MVC中控制器的测试</h1><blockquote><p>目的是在不启动WEB容器的情况下，对我们开发的控制器进行单行测试。</p></blockquote><p>Spring测试框架提供了 MockMvc 类，这个类是Spring mvc框架对控制器做测试的主要入口。</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol><li><p>编写一个测试类，打上 @ContextConfiguration注解和@RunWith注解，另外再加一个 @WebAppCofigruation注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ContextConfiguration</span>(classes = WebMvcConfig.class)</span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="meta">@WebAppConfiguration</span>  <span class="comment">//是为了让spring测试框架注入 WebApplicationContext对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseControllerTests</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>在测试类中，构建 MockMvc 对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ContextConfiguration</span>(classes = WebMvcConfig.class)</span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="meta">@WebAppConfiguration</span>  <span class="comment">//是为了让spring测试框架注入 WebApplicationContext对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseControllerTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> WebApplicationContext wac;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> MockMvc mockMvc;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initMockMvc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//初始化MockMvc</span></span><br><span class="line">        <span class="keyword">this</span>.mockMvc = webAppContextSetup(wac).build();</span><br><span class="line">        <span class="comment">//如果针对单个控制器的测试</span></span><br><span class="line">        <span class="comment">/*EmployeeController ec = new EmployeeController();</span></span><br><span class="line"><span class="comment">        this.mockMvc = standaloneSetup(ec).build();*/</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>利用MockMvc执行各种不同的请求【GET, POST, DELETE,  PUT, PATCH， …】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRestControllerTest</span> <span class="keyword">extends</span> <span class="title">BaseControllerTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testgetUsers</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        MvcResult mvcResult = mockMvc.perform(get(<span class="string">"/v1/api/users"</span>))</span><br><span class="line">                .andExpect(status().is(<span class="number">200</span>))</span><br><span class="line">                .andReturn();</span><br><span class="line">        System.out.println(mvcResult.getResponse().getContentAsString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>根据响应进行断言</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testgetEmployee</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        MvcResult mvcResult = mockMvc.perform(post(<span class="string">"/emp/2"</span>))</span><br><span class="line">                                    .andExpect(status().is(<span class="number">200</span>))</span><br><span class="line">                                    .andExpect(content().contentType(<span class="string">"application/json;charset=UTF-8"</span>))</span><br><span class="line">                                    .andExpect(content().json(<span class="string">"&#123;\"id\":2,\"name\":\"员工二\",\"start_date\":1567699200000,\"salary\":12098.0,\"title\":\"Java开发工程师\"&#125;"</span>))</span><br><span class="line">                                    .andReturn();</span><br><span class="line">        <span class="comment">//通过 mvcResult来获取数据</span></span><br><span class="line">        System.out.printf(<span class="string">"本次请求响应的数据模型：%s"</span>,mvcResult.getResponse().getContentAsString());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol><p>注: 如果要对 json 数据进行断言，需要加入 jsonassert 依赖，如下 ：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.skyscreamer<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsonassert<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="所涉及到的API"><a href="#所涉及到的API" class="headerlink" title="所涉及到的API"></a>所涉及到的API</h2><ul><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MockMvcBuilder    // 用来构建 MockMvc 对象</span><br></pre></td></tr></table></figure></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MockMvcBuilders    // 用来构建 MockMvcBuilder 对象</span><br></pre></td></tr></table></figure></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MockMvcRequestBuilders  //用来构建各种不同类型的请求</span><br></pre></td></tr></table></figure></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MockMvcResultHandlers    //针对响应结果的处理，主要是 log， print 操作</span><br></pre></td></tr></table></figure></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MockMvcResultMatchers  // 针对响应结果的匹配</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      Spring mvc， MVC框架, Controller单元测试
    
    </summary>
    
      <category term="框架" scheme="http://www.teacherye.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="MVC" scheme="http://www.teacherye.com/categories/%E6%A1%86%E6%9E%B6/MVC/"/>
    
      <category term="SpringMVC" scheme="http://www.teacherye.com/categories/%E6%A1%86%E6%9E%B6/MVC/SpringMVC/"/>
    
    
      <category term="spring" scheme="http://www.teacherye.com/tags/spring/"/>
    
      <category term="springmvc" scheme="http://www.teacherye.com/tags/springmvc/"/>
    
      <category term="mvc框架" scheme="http://www.teacherye.com/tags/mvc%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot开发进阶</title>
    <link href="http://www.teacherye.com/2019/10/10/springboot/Spring%20Boot%E5%BC%80%E5%8F%91/"/>
    <id>http://www.teacherye.com/2019/10/10/springboot/Spring Boot开发/</id>
    <published>2019-10-10T14:41:47.000Z</published>
    <updated>2019-10-10T14:43:56.493Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Boot开发"><a href="#Spring-Boot开发" class="headerlink" title="Spring Boot开发"></a>Spring Boot开发</h1><h2 id="多数据源的配置"><a href="#多数据源的配置" class="headerlink" title="多数据源的配置"></a>多数据源的配置</h2><blockquote><p>在实际的开发中，很有可能会需要配置多个数据源的情况，下面我们来看一下配置的步骤</p><ol><li><p>在 application.yml 文件中添加多个数据源的属性定义，如下 ：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&gt;    spring:</span></span><br><span class="line"><span class="string">&gt;      # 多数据源配置</span></span><br><span class="line"><span class="string">&gt;      # 主数据库连接属性</span></span><br><span class="line"><span class="string">&gt;      datasource:</span></span><br><span class="line"><span class="string">&gt;        master:</span></span><br><span class="line"><span class="string">&gt;          driver-class-name: com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="string">&gt;          jdbc-url: jdbc:mysql://localhost:3306/master?characterEncoding=UTF8&amp;serverTimezone=UTC</span></span><br><span class="line"><span class="string">&gt;          username: root</span></span><br><span class="line"><span class="string">&gt;          password: root</span></span><br><span class="line"><span class="string">&gt;        slave:</span></span><br><span class="line"><span class="string">&gt;          driver-class-name: com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="string">&gt;          jdbc-url: jdbc:mysql://localhost:3306/slave?characterEncoding=UTF8&amp;serverTimezone=UTC</span></span><br><span class="line"><span class="string">&gt;          username: root</span></span><br><span class="line"><span class="string">&gt;          password: root</span></span><br><span class="line"><span class="string">&gt;    </span></span><br><span class="line"><span class="string">&gt;</span></span><br></pre></td></tr></table></figure></li></ol></blockquote><p>&gt;</p><blockquote><ol><li><p>在config 包下面，开发一个 MasterDataSourceConfig 配置类，如下 ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&gt;    <span class="meta">@Configuration</span> <span class="comment">//表示自己是一个配置类</span></span><br><span class="line">&gt;    <span class="meta">@EnableTransactionManagement</span> <span class="comment">//启动事务管理器</span></span><br><span class="line">&gt;    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MasterDataSourceConfig</span> </span>&#123;</span><br><span class="line">&gt;    </span><br><span class="line">&gt;        <span class="meta">@Bean</span>(<span class="string">"masterDS"</span>)</span><br><span class="line">&gt;        <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource.master"</span>)</span><br><span class="line">&gt;        <span class="function"><span class="keyword">public</span> DataSource <span class="title">masterDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&gt;            <span class="comment">//设置 数据源属性</span></span><br><span class="line">&gt;            DataSource ds = DataSourceBuilder.create().build();</span><br><span class="line">&gt;            System.out.println(<span class="string">"-- 创建主数据源："</span>+ds);</span><br><span class="line">&gt;            <span class="comment">//返回</span></span><br><span class="line">&gt;            <span class="keyword">return</span> ds;</span><br><span class="line">&gt;        &#125;</span><br><span class="line">&gt;    </span><br><span class="line">&gt;        <span class="meta">@Bean</span>(name = <span class="string">"masterSesssionFactory"</span>)</span><br><span class="line">&gt;        <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">masterSessionFactory</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">&gt;                @Qualifier(<span class="string">"masterDS"</span>)</span> DataSource dataSource) <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">&gt;            SqlSessionFactoryBean sqlSessionFactoryBean =</span><br><span class="line">&gt;                        <span class="keyword">new</span> SqlSessionFactoryBean();</span><br><span class="line">&gt;            sqlSessionFactoryBean.setDataSource(dataSource);</span><br><span class="line">&gt;            <span class="comment">//如果要指定 映射文件的位置</span></span><br><span class="line">&gt;            sqlSessionFactoryBean</span><br><span class="line">&gt;                .setTypeAliasesPackage(<span class="string">"com.kclmedu.springboot.entity"</span>);</span><br><span class="line">&gt;            <span class="comment">//</span></span><br><span class="line">&gt;            <span class="keyword">return</span> sqlSessionFactoryBean.getObject();</span><br><span class="line">&gt;        &#125;</span><br><span class="line">&gt;    </span><br><span class="line">&gt;        <span class="meta">@Bean</span>(name=<span class="string">"masterTxManager"</span>)</span><br><span class="line">&gt;        <span class="function"><span class="keyword">public</span> PlatformTransactionManager <span class="title">masterTxManager</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">&gt;                        @Qualifier(<span class="string">"masterDS"</span>)</span> DataSource dataSource) </span>&#123;</span><br><span class="line">&gt;            DataSourceTransactionManager dstm = <span class="keyword">new</span> DataSourceTransactionManager();</span><br><span class="line">&gt;            dstm.setDataSource(dataSource);</span><br><span class="line">&gt;            <span class="comment">//</span></span><br><span class="line">&gt;            <span class="keyword">return</span> dstm;</span><br><span class="line">&gt;        &#125;</span><br><span class="line">&gt;    &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ol></blockquote><p>&gt;</p><blockquote><ol><li><p>在 config  包下面，开发一个 SlaveDataSourceConfig 配置类，功能同上</p><p>代码略….</p><p>注意每个Bean的名字要与上面的不同</p></li><li><p>在业务层中，添加事务注解，指定事务管理器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&gt;    <span class="meta">@Service</span></span><br><span class="line">&gt;    <span class="meta">@Transactional</span>(transactionManager=<span class="string">"masterTxManager"</span>)</span><br><span class="line">&gt;    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerServiceImpl</span> <span class="keyword">implements</span> <span class="title">ICustomerService</span> </span>&#123;</span><br><span class="line">&gt;    </span><br><span class="line">&gt;        <span class="meta">@Autowired</span></span><br><span class="line">&gt;        <span class="keyword">private</span> ICustomerDao customerDao;</span><br><span class="line">&gt;    </span><br><span class="line">&gt;        <span class="meta">@Override</span></span><br><span class="line">&gt;        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Customer c)</span> </span>&#123;</span><br><span class="line">&gt;            customerDao.save(c);</span><br><span class="line">&gt;        &#125;</span><br><span class="line">&gt;    </span><br><span class="line">&gt;        <span class="meta">@Override</span></span><br><span class="line">&gt;        <span class="function"><span class="keyword">public</span> Customer <span class="title">findById</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">&gt;            <span class="keyword">return</span> customerDao.findById(id);</span><br><span class="line">&gt;        &#125;</span><br><span class="line">&gt;    </span><br><span class="line">&gt;        <span class="meta">@Override</span></span><br><span class="line">&gt;        <span class="function"><span class="keyword">public</span> List&lt;Customer&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&gt;            <span class="keyword">return</span> customerDao.findAll();</span><br><span class="line">&gt;        &#125;</span><br><span class="line">&gt;    &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ol></blockquote><p>&gt;</p><blockquote></blockquote><h2 id="Spring-Boot中添加拦截器"><a href="#Spring-Boot中添加拦截器" class="headerlink" title="Spring Boot中添加拦截器"></a>Spring Boot中添加拦截器</h2><blockquote><p>本质上与 Spring MVC中使用是一样的，唯一不同的时，我们无需手动指定去扫描包了，步骤如下</p><ol><li><p>自定义一个拦截器类，继承 <strong>HandlerInterceptorAdapter</strong> 类，并重写你想要的方法，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&gt;    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogInterceptor</span> <span class="keyword">extends</span> <span class="title">HandlerInterceptorAdapter</span> </span>&#123;</span><br><span class="line">&gt;    </span><br><span class="line">&gt;        <span class="meta">@Override</span></span><br><span class="line">&gt;        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">&gt;                                 HttpServletResponse response, Object handler)</span></span></span><br><span class="line"><span class="function">&gt;                                    <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">&gt;                <span class="comment">//通过request参数来获取数据</span></span><br><span class="line">&gt;            String remoteAddr = request.getRemoteAddr();</span><br><span class="line">&gt;            String url = request.getRequestURL().toString();</span><br><span class="line">&gt;            String uri = request.getRequestURI();</span><br><span class="line">&gt;            <span class="comment">//还可以获取所有的请求参数</span></span><br><span class="line">&gt;            Map&lt;String, String[]&gt; parameterMap = request.getParameterMap();</span><br><span class="line">&gt;            <span class="comment">//</span></span><br><span class="line">&gt;            System.out.println(<span class="string">"-- 请求IP:"</span>+remoteAddr);</span><br><span class="line">&gt;            System.out.println(<span class="string">"-- 请求URL: "</span>+url);</span><br><span class="line">&gt;            System.out.println(<span class="string">"请求URI："</span>+uri);</span><br><span class="line">&gt;            <span class="comment">//</span></span><br><span class="line">&gt;            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&gt;        &#125;</span><br><span class="line">&gt;    &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ol></blockquote><p>&gt;</p><blockquote><ol><li><p>在 config 包中，添加一个 WebMvcConfig 类，用来注册我们的拦截器类，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt;    <span class="meta">@Configuration</span></span><br><span class="line">&gt;    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">&gt;    </span><br><span class="line">&gt;    <span class="comment">//    注册拦截器</span></span><br><span class="line">&gt;        <span class="meta">@Override</span></span><br><span class="line">&gt;        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">&gt;            System.out.println(<span class="string">"--  注册拦截器"</span>);</span><br><span class="line">&gt;            <span class="comment">//创建我们自定义的拦截器</span></span><br><span class="line">&gt;            LogInterceptor logInterceptor = <span class="keyword">new</span> LogInterceptor();</span><br><span class="line">&gt;            <span class="comment">//</span></span><br><span class="line">&gt;            registry.addInterceptor(logInterceptor).addPathPatterns(<span class="string">"/**"</span>);</span><br><span class="line">&gt;        &#125;</span><br><span class="line">&gt;    &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ol></blockquote><p>&gt;</p><blockquote></blockquote><p>思考一下，我们还可以在这种类中，添加哪些配置？</p><h2 id="有关YAML格式"><a href="#有关YAML格式" class="headerlink" title="有关YAML格式"></a>有关YAML格式</h2><blockquote><p>spring boot 项目中，配置文件支持两种数据格式，、</p><ul><li>.properties 属性文件，默认文件名: application.properties</li><li>.yml 文件，它是YAML格式， 默认文件名：application.yml </li></ul></blockquote><p>YAML 是一种新型的标记语言格式，它相比 properties 而言，具有：</p><ol><li>有良好的层次结构来表达数据， 这样可以大大减小KEY的冗余。</li><li>它充份利用了缩进，使用缩进来表达层次【注：不能使用TAB，而是采用空格，每个层次比上层要多2个以上的空格】</li></ol><p>如：</p><p>abc.properties</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spring.datasource.url=xxxxxx</span><br><span class="line">spring.datasource.driver-class-name=xxxx</span><br><span class="line">spring.datasource.username=xxxx</span><br></pre></td></tr></table></figure><p>如果改成 abc.yml </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span> </span><br><span class="line"><span class="attr">    datasource:</span></span><br><span class="line"><span class="attr">        url:</span> <span class="string">xxxx</span></span><br><span class="line"><span class="attr">        driver-class-name:</span> <span class="string">xxxx</span></span><br><span class="line"><span class="attr">        username:</span> <span class="string">xxxx</span></span><br></pre></td></tr></table></figure><h2 id="如何使用Spring-Boot-把项目发布成传统的war部署格式"><a href="#如何使用Spring-Boot-把项目发布成传统的war部署格式" class="headerlink" title="如何使用Spring Boot 把项目发布成传统的war部署格式"></a>如何使用Spring Boot 把项目发布成传统的war部署格式</h2><blockquote><p>在默认情况下，spring boot项目打包的格式是 jar, 它是基于 main 方法来执行的，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">package</span> com.kclmedu.springboot;</span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line">&gt; <span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line">&gt; <span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">&gt; <span class="keyword">import</span> org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;</span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="meta">@SpringBootApplication</span></span><br><span class="line">&gt; <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloSpringboot03Application</span> </span>&#123;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">&gt;         SpringApplication.run(HelloSpringboot03Application.class, args);</span><br><span class="line">&gt;         System.out.println(<span class="string">"--- SpringBootApplication run success...."</span>);</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>&gt;</p><blockquote><p>打包成 jar 格式后，我们可以使用：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; java -jar xxxx.jar    //就可以执行这个 spring boot 项目</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>要把 spring boot 打包成 war 格式，这个很简单，只需要在 pom.xml 中把 <packaging>这个标签的值设为 war 即可。如下：</packaging></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但是，光改变这个，只是输出的格式变化了，当我们把此 war 文件放入到 WEB服务器中，如何去引导执行这个war包就成了一问题。</p><p>实际上，我们的WEB 服务器加载 部署的应用时，有两种方式</p><ol><li><p>基于传统的 web.xml 方式进行加载</p></li><li><p>纯代码的方式来加载应用， 本质上是利用 <strong>WebApplicationInitializer</strong> , 如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kclmedu.springboot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.builder.SpringApplicationBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.support.SpringBootServletInitializer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloApplicationInitializer</span> <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> SpringApplicationBuilder <span class="title">configure</span><span class="params">(SpringApplicationBuilder builder)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        System.out.println(<span class="string">"--- 基于web 方式启动SpringBoot应用...."</span>);</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="keyword">return</span> builder.sources(HelloSpringboot03Application.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="Spring、Spring-MVC-、Spring-Boot小结"><a href="#Spring、Spring-MVC-、Spring-Boot小结" class="headerlink" title="Spring、Spring MVC 、Spring Boot小结"></a>Spring、Spring MVC 、Spring Boot小结</h2><blockquote><p>Spring Framework 是包含 Spring MVC的，Spring 框架是一个大家族，里面包含很多子框架，如：</p><p>​    IOC</p><p>​    AOP</p><p>​    DT[tx]</p><p>​    SPRING MVC [是MVC思想的一种实现]</p><p>​    …</p><p>Spring Boot 是与Spring Framework “平级”的一个项目，它是项目开发、部署、组织的一种新型方式，有可以有效地减化我们开发项目时的配置</p></blockquote><h3 id="Spring-Boot-Spring-MVC-时为我们减化了哪些操作？"><a href="#Spring-Boot-Spring-MVC-时为我们减化了哪些操作？" class="headerlink" title="Spring Boot + Spring MVC 时为我们减化了哪些操作？"></a>Spring Boot + Spring MVC 时为我们减化了哪些操作？</h3><p>首先，来看一下 Spring mvc 的项目配置清单</p><ol><li>web.xml  [或者是纯代码]</li><li>web环境的配置类，一般命名为： <strong>WebMvcConfig.java</strong> , 在此类中，会进行如下配置<ul><li>静态资源的访问配置  【一般要有】</li><li>注册拦截器   【可选】</li><li>视图解析器的配置 【可选】<ul><li>JSP</li><li>Thymeleaf</li><li>Beetl</li><li>Velocity</li><li>…</li></ul></li><li>文件上传的配置 【可选】</li><li>表单数据的后端验证 【可选】</li><li>国际化 【可选】</li><li>注册全局异常处理器 【可选】</li><li>…</li></ul></li><li>持久层和业务层的配置类，一般命名为： <strong>AppConfig.java</strong> , 此类中，会进行如下配置<ul><li>数据源的配置  【必选】</li><li>根据不同的持久层实现技术，来配置不同的东西  【必选】<ul><li>如果是JDBC技术，则 配置 JdbcTemplate 模板类</li><li>如果是 mybatis框架， 则配置 SqlSessionFactoryBean </li><li>如果是 Hibernate 框架， 则配置 SessionFactoryBean </li><li>….</li></ul></li><li>配置事务管理器  【如果开启DT的话，则必配】</li></ul></li><li>pom.xml 的配置   【有时会出现版本冲突】</li></ol><p><strong>如果引入了 Spring Boot，则配置清单如下：</strong></p><ol><li><p>web.xml 没了</p></li><li><p>WebMvcConfig.java 配置类不需要</p></li><li><p>AppConfig.java 不需要</p></li><li><p>pom.xml  更加精减了，而且不会再有 版本冲突的问题</p></li></ol><p><strong>那么，增加了哪些？</strong></p><ol><li>所有的配置信息，都可以定义在 <strong>application.properties 或 application.yml</strong> 文件中</li><li>springboot会根据导入的依赖【也就是classpath下的jar包】自动为我们进行配置【也就是自动化配置】</li></ol>]]></content>
    
    <summary type="html">
    
      Spring Boot
    
    </summary>
    
      <category term="框架" scheme="http://www.teacherye.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="SpringBoot" scheme="http://www.teacherye.com/categories/%E6%A1%86%E6%9E%B6/SpringBoot/"/>
    
    
      <category term="spring" scheme="http://www.teacherye.com/tags/spring/"/>
    
      <category term="SpringBoot" scheme="http://www.teacherye.com/tags/SpringBoot/"/>
    
      <category term="快速构建框架" scheme="http://www.teacherye.com/tags/%E5%BF%AB%E9%80%9F%E6%9E%84%E5%BB%BA%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot开发入门指南</title>
    <link href="http://www.teacherye.com/2019/10/09/springboot/Spring%20Boot%E5%85%A5%E9%97%A8/"/>
    <id>http://www.teacherye.com/2019/10/09/springboot/Spring Boot入门/</id>
    <published>2019-10-09T14:41:47.000Z</published>
    <updated>2019-12-17T08:58:28.637Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Boot"><a href="#Spring-Boot" class="headerlink" title="Spring Boot"></a>Spring Boot</h1><blockquote><p>它的目的就是为了减化基于Spring 框架生态开发项目的配置，它是COC【Convention Over Configuration, 约定优于配置】理念具体的实现。</p></blockquote><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li>Create stand-alone Spring applications</li><li>Embed Tomcat, Jetty or Undertow directly (no need to deploy WAR files)</li><li>Provide opinionated ‘starter’ dependencies to simplify your build configuration</li><li>Automatically configure Spring and 3rd party libraries whenever possible</li><li>Provide production-ready features such as metrics, health checks and externalized configuration</li><li>Absolutely no code generation and no requirement for XML configuration</li></ul><h2 id="开发步骤"><a href="#开发步骤" class="headerlink" title="开发步骤"></a>开发步骤</h2><ol><li><p>利用 Initializr 脚手架来生成 Spring Boot 项目结构 【IDEA中自带此功能，建议直接使用IDEA来创建】</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">https://start.spring.io</span></span><br></pre></td></tr></table></figure></li></ol><ol><li><p>输入相关的项目信息，主要就是 groupId, artifactId, version, name, description, url 等pom元信息</p></li><li><p>选择项目需要依赖的springboot组件，一般 spring web 是要选的，其它的可以根据情况</p></li><li><p>生成的项目中，主要就是  pom.xml 和 src目录下的 xxxxApplication.java 文件，这个java文件就是springboot的启动类。</p></li><li><p>开发一个控制器</p></li><li><p>直接启动 xxxApplication 类，然后，打开浏览器，访问 控制器的 uri 即可以看结果。</p></li></ol><h2 id="Spring-Boot-常用注解"><a href="#Spring-Boot-常用注解" class="headerlink" title="Spring Boot 常用注解"></a>Spring Boot 常用注解</h2><ol><li>@SpringBootApplication    //由以下三个注解合成<ol><li>@SpringBootConfiguration       //代表这是一个配置类， 相当于 @Configuration</li><li>@EnableAutoConfiguration      //启动自动化配置，会根据项目导入的依赖来自动化创建一些实例来为项目服务</li><li>@ComponentScan       //描扫指定包及其子包下的所有组件</li></ol></li><li></li></ol><h2 id="Spring-boot-项目的-pom-xml-文件"><a href="#Spring-boot-项目的-pom-xml-文件" class="headerlink" title="Spring boot 项目的 pom.xml 文件"></a>Spring boot 项目的 pom.xml 文件</h2><blockquote><p>最关键的是一段 parent 的引入，如下 ：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="comment">&lt;!-- 引用spring-boot-starter 配置 --&gt;</span></span><br><span class="line">&gt;     <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">&gt;         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">&gt;         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">&gt;         <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">&gt;         <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">&gt;     <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>&gt;</p><blockquote><p>注：此处引用的 spring boot 的版本是 2.1.8</p></blockquote><h2 id="Spring-Boot项目的配置文件"><a href="#Spring-Boot项目的配置文件" class="headerlink" title="Spring Boot项目的配置文件"></a>Spring Boot项目的配置文件</h2><blockquote><p>支持两种格式，一种是 .properties 属性文件， 二种是 .yml 文件， 默认文件名如下：</p><ol><li><p>application.properties 文件 [默认]</p><p>属性文件的配置缺少层次表达， 都是扁平的</p><p>冗余较高</p><p>优点是 简单</p></li><li><p>application.yml 文件</p><p>YAML是一全新数据表达式语法，它支持层次结构，可以有效减少KEY值的冗余</p></li></ol></blockquote><h3 id="YAML-语法规则-待讲"><a href="#YAML-语法规则-待讲" class="headerlink" title="YAML 语法规则  [待讲]"></a>YAML 语法规则  [待讲]</h3><blockquote><p>先来对比一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; #properties(示例来源于Springboot User guide):</span><br><span class="line">&gt; </span><br><span class="line">&gt; environments.dev.url=http://dev.bar.com</span><br><span class="line">&gt; environments.dev.name=Developer Setup</span><br><span class="line">&gt; environments.prod.url=http://foo.bar.com</span><br><span class="line">&gt; environments.prod.name=My Cool App</span><br><span class="line">&gt; my.servers[0]=dev.bar.com</span><br><span class="line">&gt; my.servers[1]=foo.bar.com</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>&gt;</p><blockquote><p>YAML 格式</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&gt; #YAML格式</span></span><br><span class="line"><span class="string">&gt; environments:</span></span><br><span class="line"><span class="string">&gt;     dev:</span></span><br><span class="line"><span class="string">&gt;         url: http://dev.bar.com</span></span><br><span class="line"><span class="string">&gt;         name: Developer Setup</span></span><br><span class="line"><span class="string">&gt;     prod:</span></span><br><span class="line"><span class="string">&gt;         url: http://foo.bar.com</span></span><br><span class="line"><span class="string">&gt;         name: My Cool App</span></span><br><span class="line"><span class="string">&gt; my:</span></span><br><span class="line"><span class="string">&gt;     servers:</span></span><br><span class="line"><span class="string">&gt;         - dev.bar.com</span></span><br><span class="line"><span class="string">&gt;         - foo.bar.com</span></span><br><span class="line"><span class="string">&gt;</span></span><br></pre></td></tr></table></figure></blockquote><p>&gt;</p><blockquote><p>YAML使用冒号加缩进的方式代表层级（属性）关系，使用短横杠(-)代表数组元素。 </p></blockquote><h4 id="基本格式要求"><a href="#基本格式要求" class="headerlink" title="基本格式要求"></a>基本格式要求</h4><p> 1，YAML大小写敏感；<br> 2，使用缩进代表层级关系；<br> 3，缩进只能使用空格，不能使用TAB，不要求空格个数，只需要相同层级左对齐（一般2个或4个空格）</p><h2 id="SpringBoot-整合JDBC-【了解一下】"><a href="#SpringBoot-整合JDBC-【了解一下】" class="headerlink" title="SpringBoot 整合JDBC 【了解一下】"></a>SpringBoot 整合JDBC 【了解一下】</h2><ol><li><p>在 pom.xml 中导入 spring-boot-starter-data-jdbc  或  spring-boot-starter-jdbc  依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><ol><li><p>有了上面的依赖，就可以直接在你的 DAO 接口中注入  JdbcTemplate 对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span>   <span class="comment">//当然，也可以使用 @Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentDaoImpl</span> <span class="keyword">implements</span> <span class="title">IStudentDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate template;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面2步，就可以完成整合。</p></li></ol><h3 id="Spring-Boot-整合-mybatis"><a href="#Spring-Boot-整合-mybatis" class="headerlink" title="Spring Boot 整合 mybatis"></a>Spring Boot 整合 mybatis</h3><ol><li><p>在pom.xml中导入 mybatis-spring-boot-starter 依赖，这个依赖中会间接依赖 spring-boot-starter-jdbc</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><ol><li><p>我们需要在 application.yml 配置文件中加入 对 mybatis的配置，如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># mybatis config</span><br><span class="line">mybatis:</span><br><span class="line">  type-aliases-package: com.hc.springboot.entity</span><br><span class="line">  # 如果使用注解的话，则无需指定映射文件的位置</span><br><span class="line">  mapper-locations: classpath*:mapper/**/*.xml</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>编写 mybatis的接口, 并且要打上 <strong>@Mapper</strong> 注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hc.springboot.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hc.springboot.entity.Account;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*****</span></span><br><span class="line"><span class="comment"> * DAO接口，也就是数据持久层接口，本例采用mybatis来实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Mapper</span>   <span class="comment">//如果没有这个注解，则此类的实例不会被IOC容器管理</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IAccountMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">(Account account)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(Account account)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Account <span class="title">findById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Account <span class="title">findByAccountNo</span><span class="params">(String no)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>编写 mybatis的映射文件, 一般是存放在 resources 目录下，在上面第2步中，我们指定了 mapper-locations ,我们课堂上讲的是纯注解实现的，下面是 xml 配置，可以了解一下.</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line"> PUBLIC <span class="string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">"com.hc.springboot.mapper.IAccountMapper"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;insert id=<span class="string">"save"</span> parameterType=<span class="string">"account"</span>&gt;</span><br><span class="line">        <span class="function">insert into <span class="title">tbl_account</span><span class="params">(accountNo,idcard,balance,pinCode)</span></span></span><br><span class="line"><span class="function">        <span class="title">values</span><span class="params">(#&#123;accountNo&#125;,#&#123;idcard&#125;,#&#123;balance&#125;,#&#123;pinCode&#125;)</span></span></span><br><span class="line"><span class="function">    &lt;/insert&gt;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    &lt;delete id</span>=<span class="string">"delete"</span> parameterType=<span class="string">"int"</span>&gt;</span><br><span class="line">        delete from tbl_account where id = #&#123;value&#125;</span><br><span class="line">    &lt;/delete&gt;</span><br><span class="line"></span><br><span class="line">    &lt;update id=<span class="string">"update"</span> parameterType=<span class="string">"account"</span>&gt;</span><br><span class="line">        update tbl_account set</span><br><span class="line">            accountNo=#&#123;accountNo&#125;,</span><br><span class="line">            idcard=#&#123;idcard&#125;,</span><br><span class="line">            balance=#&#123;balance&#125;,</span><br><span class="line">            pinCode=#&#123;pinCode&#125;</span><br><span class="line">            where id = #&#123;id&#125;</span><br><span class="line">    &lt;/update&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id=<span class="string">"findById"</span> parameterType=<span class="string">"int"</span> resultType=<span class="string">"account"</span>&gt;</span><br><span class="line">        select * from tbl_account where id = #&#123;value&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id=<span class="string">"findByAccountNo"</span> parameterType=<span class="string">"string"</span> resultType=<span class="string">"account"</span>&gt;</span><br><span class="line">         select * from tbl_account where accountNo = #&#123;value&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id=<span class="string">"findAll"</span> resultType=<span class="string">"account"</span>&gt;</span><br><span class="line">        select * from tbl_account</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="Spring-Boot-与视图技术整合"><a href="#Spring-Boot-与视图技术整合" class="headerlink" title="Spring Boot 与视图技术整合"></a>Spring Boot 与视图技术整合</h2><h3 id="与JSP的整合"><a href="#与JSP的整合" class="headerlink" title="与JSP的整合"></a>与JSP的整合</h3><blockquote><p>注：由于 Spring Boot 对JSP的支持很不友好，所以，如果一定要整合JSP做为视图技术的话，则需要做如下操作</p><ol><li><p>在 pom.xml 中，导入如下依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">&gt;       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">&gt;       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-embed-jasper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">&gt;       <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">&gt;    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">&gt;    <span class="comment">&lt;!-- 如果需要JSTL，则加入JSTL的依赖 --&gt;</span></span><br><span class="line">&gt;    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">&gt;       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">&gt;       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">&gt;    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ol></blockquote><p>&gt;</p><blockquote><ol><li><p>由于 spring Boot项目是没有 webapp目录的，而且打包也是 jar  包，所以，还需要手动创建 webapp/WEB-INF/jsp 目录，把你的jsp 文件放在此目录下</p></li><li><p>在 application.yml 文件中，添加 JSP 视图解析配置，如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&gt;    spring.mvc.view.prefix=/WEB-INF/jsp/</span></span><br><span class="line"><span class="string">&gt;    spring.mvc.view.suffix=.jsp</span></span><br><span class="line"><span class="string">&gt;</span></span><br></pre></td></tr></table></figure></li></ol></blockquote><p>&gt;</p><blockquote><ol><li><p>编写控制器如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;    <span class="meta">@RequestMapping</span>(value = <span class="string">"/issue/list"</span>)</span><br><span class="line">&gt;        <span class="function"><span class="keyword">public</span> String <span class="title">listIssue</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">&gt;            List&lt;Issue&gt; issues = issueJpa.findAll();</span><br><span class="line">&gt;            <span class="comment">//</span></span><br><span class="line">&gt;            model.addAttribute(<span class="string">"ISSUE_LIST"</span>, issues);</span><br><span class="line">&gt;            <span class="comment">//</span></span><br><span class="line">&gt;            <span class="keyword">return</span> <span class="string">"issue/list"</span>; <span class="comment">// /WEB-INF/jsp/ issue/list  .jsp</span></span><br><span class="line">&gt;        &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ol></blockquote><p>&gt;</p><blockquote><blockquote><p>以上就是在 Spring Boot中整合JSP的方式，非常不推荐，如果一定要用JSP为视图，那也没有办法，可以参考直接使用 Spring MVC +  JSP</p></blockquote></blockquote><h3 id="与Thymeleaf的整合"><a href="#与Thymeleaf的整合" class="headerlink" title="与Thymeleaf的整合"></a>与Thymeleaf的整合</h3><blockquote><p>Spring Boot 对 Thymeleaf 页面模板技术的支持是很好的，所以，也是推荐大家使用 thymeleaf 技术，整合步骤如下：</p><ol><li><p>在 pom.xml 中，导入 thymeleaf 依赖，如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">&gt;        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">&gt;        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">&gt;    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ol></blockquote><p>&gt;</p><blockquote><ol><li><p>在 application.yml 中，添加如下配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&gt;    spring:   </span></span><br><span class="line"><span class="string">&gt;      thymeleaf:</span></span><br><span class="line"><span class="string">&gt;        cache: false         # 开发模式下，关闭缓存</span></span><br><span class="line"><span class="string">&gt;        encoding: UTF-8      # 编码，默认也是 UTF-8</span></span><br><span class="line"><span class="string">&gt;        mode: HTML           # 显示模式</span></span><br><span class="line"><span class="string">&gt;        prefix: classpath:/templates/thymeleaf/ # 自定义的thymeleaf页面模板位置，要加classpath</span></span><br><span class="line"><span class="string">&gt;        suffix: .html      # 页面以 .html 结尾</span></span><br><span class="line"><span class="string">&gt;        servlet:</span></span><br><span class="line"><span class="string">&gt;          content-type: text/html    # 内容类型</span></span><br><span class="line"><span class="string">&gt;</span></span><br></pre></td></tr></table></figure></li></ol></blockquote><p>&gt;</p><blockquote><ol><li><p>开发控制器，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;    <span class="meta">@RequestMapping</span>(value = <span class="string">"/issue/list"</span>)</span><br><span class="line">&gt;        <span class="function"><span class="keyword">public</span> String <span class="title">listIssue</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">&gt;            List&lt;Issue&gt; issues = issueJpa.findAll();</span><br><span class="line">&gt;            <span class="comment">//</span></span><br><span class="line">&gt;            model.addAttribute(<span class="string">"ISSUE_LIST"</span>, issues);</span><br><span class="line">&gt;            <span class="comment">//</span></span><br><span class="line">&gt;            <span class="keyword">return</span> <span class="string">"issue/list"</span>; <span class="comment">// /templates/thymeleaf/ issue/list  .html</span></span><br><span class="line">&gt;        &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h3 id="静态资源的访问"><a href="#静态资源的访问" class="headerlink" title="静态资源的访问"></a>静态资源的访问</h3><blockquote><p>在 application.yml 中，直接添加如下配置即可</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&gt; spring:   </span></span><br><span class="line"><span class="string">&gt;   mvc:</span></span><br><span class="line"><span class="string">&gt;     static-path-pattern: /static/**     # ** 表示多级子目录</span></span><br><span class="line"><span class="string">&gt;</span></span><br></pre></td></tr></table></figure></blockquote><h2 id="Thymeleaf-页面模板技术的语法"><a href="#Thymeleaf-页面模板技术的语法" class="headerlink" title="Thymeleaf 页面模板技术的语法"></a>Thymeleaf 页面模板技术的语法</h2><ol><li><p>在 你的HTML页面中，加入如下的命名空间</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>有关 thymeleaf的语法知识，请自行学习</p></li></ol><h3 id="附录："><a href="#附录：" class="headerlink" title="附录："></a>附录：</h3><p><strong>application.properties</strong> 文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">server.port=9090</span><br><span class="line">server.servlet.context-path=/</span><br><span class="line"></span><br><span class="line">spring.datasource.driver-class-name=com.mysql.jdbc.Driver</span><br><span class="line">spring.datasource.url=jdbc:mysql://localhost:3306/springbootdemo?characterEncoding=UTF8&amp;serverTimezone=UTC</span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=root</span><br><span class="line"># 默认数据源</span><br><span class="line">spring.datasource.type=com.zaxxer.hikari.HikariDataSource </span><br><span class="line"></span><br><span class="line"># mybatis的配置</span><br><span class="line">mybatis.type-aliases-package=com.kclmedu.springboot.entity</span><br><span class="line"></span><br><span class="line"># 告诉大C，不要处理 /static 开头的请求URL</span><br><span class="line">spring.mvc.static-path-pattern=/static/**</span><br><span class="line"># 告诉 spring Boot,资源所在的位置, 默认指定 /templates/, /static/</span><br><span class="line"># spring.resources.static-locations=classpath:/templates/,classpath:/static/</span><br><span class="line"></span><br><span class="line"># 与thymeleaf的整合配置</span><br><span class="line">spring.thymeleaf.cache=false</span><br><span class="line">spring.thymeleaf.encoding=UTF-8</span><br><span class="line">spring.thymeleaf.mode=HTML</span><br><span class="line">spring.thymeleaf.prefix=classpath:/templates/thymeleaf/</span><br><span class="line">spring.thymeleaf.suffix=.html</span><br><span class="line">spring.thymeleaf.servlet.content-type=text/html</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Spring Boot
    
    </summary>
    
      <category term="框架" scheme="http://www.teacherye.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="SpringBoot" scheme="http://www.teacherye.com/categories/%E6%A1%86%E6%9E%B6/SpringBoot/"/>
    
    
      <category term="spring" scheme="http://www.teacherye.com/tags/spring/"/>
    
      <category term="SpringBoot" scheme="http://www.teacherye.com/tags/SpringBoot/"/>
    
      <category term="快速构建框架" scheme="http://www.teacherye.com/tags/%E5%BF%AB%E9%80%9F%E6%9E%84%E5%BB%BA%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>哈希算法原理简析</title>
    <link href="http://www.teacherye.com/2018/05/10/algorithms/%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86%E7%AE%80%E6%9E%90/"/>
    <id>http://www.teacherye.com/2018/05/10/algorithms/哈希算法原理简析/</id>
    <published>2018-05-10T03:01:47.000Z</published>
    <updated>2019-12-17T08:59:54.076Z</updated>
    
    <content type="html"><![CDATA[<h1 id="待完成"><a href="#待完成" class="headerlink" title="待完成"></a>待完成</h1>]]></content>
    
    <summary type="html">
    
      理解哈希算法的基本原理，哈希的作用
    
    </summary>
    
      <category term="JavaSE" scheme="http://www.teacherye.com/categories/JavaSE/"/>
    
      <category term="算法" scheme="http://www.teacherye.com/categories/JavaSE/%E7%AE%97%E6%B3%95/"/>
    
      <category term="hash" scheme="http://www.teacherye.com/categories/JavaSE/%E7%AE%97%E6%B3%95/hash/"/>
    
    
      <category term="哈希" scheme="http://www.teacherye.com/tags/%E5%93%88%E5%B8%8C/"/>
    
      <category term="hashcode" scheme="http://www.teacherye.com/tags/hashcode/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC学习9-Interceptor和Optional Config</title>
    <link href="http://www.teacherye.com/2018/04/20/springmvc/08-extension/"/>
    <id>http://www.teacherye.com/2018/04/20/springmvc/08-extension/</id>
    <published>2018-04-20T03:01:47.000Z</published>
    <updated>2018-04-19T09:27:04.737Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-MVC"><a href="#Spring-MVC" class="headerlink" title="Spring MVC"></a>Spring MVC</h1><blockquote><p>SpringMVC是基于MVC思想的JAVA WEB实现框架，是Spring家族的一员，它基于前置控制器来接收并分发请求，支持参考验证、请求参数封装、拦截、Restful等功能，是目前较为流行的MVC框架</p></blockquote><p>本系列学习笔记包含如下的课程内容：</p><ul><li>MVC思想</li><li>Hello案例</li><li>请求和响应处理</li><li>文件上传和下载处理</li><li>参数验证</li><li>请求拦截</li><li>RESTful风格</li><li>日志</li></ul><hr><a id="more"></a><h2 id="Interceptor-拦截器"><a href="#Interceptor-拦截器" class="headerlink" title="Interceptor(拦截器)"></a>Interceptor(拦截器)</h2><p>Spring MVC allow you to intercept web requests through interceptor.<br>The interceptor have to implement the <strong>HandlerInterceptor</strong> interface, which contains three methods :</p><ul><li><p>preHandle() – Called before the handler execution, returns a boolean value, “true” : continue the handler execution chain; “false”, stop the execution chain and return it.</p></li><li><p>postHandle() – Called after HandlerAdapter actually invoked the handler, but before the DispatcherServlet renders the view. Can expose additional model objects to the view via the given ModelAndView.</p></li><li><p>afterCompletion() – Callback after completion of request processing, that is, after rendering the view. Will be called on any outcome of handler execution, thus allows for proper resource cleanup.<br>Note: Will only be called if this interceptor’s preHandle method has successfully completed and returned true!</p></li></ul><h2 id="SpringMVC-可选配置-非必须"><a href="#SpringMVC-可选配置-非必须" class="headerlink" title="SpringMVC 可选配置(非必须)"></a>SpringMVC 可选配置(非必须)</h2><h3 id="WebMvcConfigurerAdapter"><a href="#WebMvcConfigurerAdapter" class="headerlink" title="WebMvcConfigurerAdapter"></a>WebMvcConfigurerAdapter</h3><p>WebMvcConfig 继承 WebMvcConfigurerAdapter， Override 父类方法，来快速配置常用信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * InternalResourceViewResolver</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> InternalResourceViewResolver <span class="title">getInternalResourceViewResolver</span><span class="params">()</span></span>&#123;</span><br><span class="line">      InternalResourceViewResolver resolver = <span class="keyword">new</span> InternalResourceViewResolver();</span><br><span class="line">      resolver.setPrefix(<span class="string">"/WEB-INF/jsp/"</span>);</span><br><span class="line">      resolver.setSuffix(<span class="string">".jsp"</span>);</span><br><span class="line">      <span class="keyword">return</span> resolver;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Configure a handler to delegate unhandled requests</span></span><br><span class="line"><span class="comment">   * by forwarding to the Servlet container's "default" servlet,</span></span><br><span class="line"><span class="comment">   * such as : /</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> configurer</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureDefaultServletHandling</span><span class="params">(DefaultServletHandlerConfigurer configurer)</span> </span>&#123;</span><br><span class="line">      configurer.enable();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   *  mapping classpath resources to public static resources</span></span><br><span class="line"><span class="comment">   *  such as : images,js,css</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">      registry.addResourceHandler(<span class="string">"/images/**"</span>).addResourceLocations(<span class="string">"classpath:/images/"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>getInternalResourceViewResolver: 配置常用视图路径和后缀</li><li>configureDefaultServletHandling: 默认根目录</li><li>addResourceHandlers：将私有资源映射为公开资源</li></ul><h3 id="Request-Method"><a href="#Request-Method" class="headerlink" title="Request Method"></a>Request Method</h3><p>通过 RequestMethod 来指定请求类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(method = RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, Appointment&gt; <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> appointmentBook.getAppointmentsForToday();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(path = <span class="string">"/&#123;day&#125;"</span>, method = RequestMethod.POST)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, Appointment&gt; <span class="title">getForDay</span><span class="params">(@PathVariable @DateTimeFormat(iso=ISO.DATE)</span> Date day, Model model) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> appointmentBook.getAppointmentsForDay(day);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者进一步使用具体 Mapping 类型 (仅最新版本才提供)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span></span><br><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="meta">@DeleteMapping</span></span><br></pre></td></tr></table></figure><h3 id="View"><a href="#View" class="headerlink" title="View"></a>View</h3><ul><li>JSP &amp; JSTL</li><li>Thymeleaf</li><li>Groovy Markup Templates</li><li>Velocity &amp; FreeMarker<br><a href="http://docs.spring.io/spring/docs/current/spring-framework-reference/html/view.html" target="_blank" rel="noopener">http://docs.spring.io/spring/docs/current/spring-framework-reference/html/view.html</a></li></ul><h3 id="form-tag-lib"><a href="#form-tag-lib" class="headerlink" title="form tag lib"></a>form tag lib</h3><p>The form tag library comes bundled in spring-webmvc.jar.<br>The library descriptor is called spring-form.tld.<br>To use the tags from this library, add the following directive to the top of your JSP page:  </p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">"form"</span> uri=<span class="string">"http://www.springframework.org/tags/form"</span> %&gt;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;form:form&gt;</span><br><span class="line">  &lt;table&gt;</span><br><span class="line">      &lt;tr&gt;</span><br><span class="line">          &lt;td&gt;First Name:&lt;/td&gt;</span><br><span class="line">          &lt;td&gt;&lt;form:input path="firstName"/&gt;&lt;/td&gt;</span><br><span class="line">      &lt;/tr&gt;</span><br><span class="line">      &lt;tr&gt;</span><br><span class="line">          &lt;td&gt;Last Name:&lt;/td&gt;</span><br><span class="line">          &lt;td&gt;&lt;form:input path="lastName"/&gt;&lt;/td&gt;</span><br><span class="line">      &lt;/tr&gt;</span><br><span class="line">      &lt;tr&gt;</span><br><span class="line">          &lt;td colspan=<span class="string">"2"</span>&gt;</span><br><span class="line">              &lt;input type=<span class="string">"submit"</span> value=<span class="string">"Save Changes"</span>/&gt;</span><br><span class="line">          &lt;/td&gt;</span><br><span class="line">      &lt;/tr&gt;</span><br><span class="line">  &lt;/table&gt;</span><br><span class="line">&lt;/form:form&gt;</span><br></pre></td></tr></table></figure><h3 id="Supported-Method-Arguments"><a href="#Supported-Method-Arguments" class="headerlink" title="Supported Method Arguments"></a>Supported Method Arguments</h3><ul><li>Request/Response objects</li><li>Session object</li><li>Spring’s WebRequest object</li><li>java.util.Locale</li><li>java.io.Reader (access to request content)</li><li>java.io.Writer (access to response content)</li><li>java.security.Principal</li><li>ModelMap</li><li>org.springframework.validation.Errors</li><li>org.springframework.validation.BindingResult</li></ul>]]></content>
    
    <summary type="html">
    
      Spring mvc， MVC框架
    
    </summary>
    
      <category term="框架" scheme="http://www.teacherye.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="MVC" scheme="http://www.teacherye.com/categories/%E6%A1%86%E6%9E%B6/MVC/"/>
    
      <category term="SpringMVC" scheme="http://www.teacherye.com/categories/%E6%A1%86%E6%9E%B6/MVC/SpringMVC/"/>
    
    
      <category term="spring" scheme="http://www.teacherye.com/tags/spring/"/>
    
      <category term="springmvc" scheme="http://www.teacherye.com/tags/springmvc/"/>
    
      <category term="mvc框架" scheme="http://www.teacherye.com/tags/mvc%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC学习8-Validation和Log</title>
    <link href="http://www.teacherye.com/2018/04/19/springmvc/07-validation/"/>
    <id>http://www.teacherye.com/2018/04/19/springmvc/07-validation/</id>
    <published>2018-04-19T03:01:47.000Z</published>
    <updated>2018-04-19T09:26:55.884Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-MVC"><a href="#Spring-MVC" class="headerlink" title="Spring MVC"></a>Spring MVC</h1><blockquote><p>SpringMVC是基于MVC思想的JAVA WEB实现框架，是Spring家族的一员，它基于前置控制器来接收并分发请求，支持参考验证、请求参数封装、拦截、Restful等功能，是目前较为流行的MVC框架</p></blockquote><p>本系列学习笔记包含如下的课程内容：</p><ul><li>MVC思想</li><li>Hello案例</li><li>请求和响应处理</li><li>文件上传和下载处理</li><li>参数验证</li><li>请求拦截</li><li>RESTful风格</li><li>日志</li></ul><hr><a id="more"></a><h2 id="Bean-Validation"><a href="#Bean-Validation" class="headerlink" title="Bean Validation"></a>Bean Validation</h2><blockquote><p>在web项目开发的过程中,有相当多的请求是带有参数的,而这些参数需要进行各种的校验.<br>比如:  </p><pre><code>- 非空 -&gt; 该填的有没有填- 长度 -&gt; 填了的是否超出字段上线.- 格式 -&gt; 邮箱格式,手机格式,身份证等.- 有效区间段- 唯一性 -&gt; 邮箱格式,手机格式,身份证只能登记一次</code></pre></blockquote><h2 id="典型的误区"><a href="#典型的误区" class="headerlink" title="典型的误区"></a>典型的误区</h2><blockquote><p>初学者可能以为在 页面/前端 使用javascript 校验过了,那么在服务器端就无需校验了.</p></blockquote><p>原因:<br>浏览器端有非常多的手段/方式来屏蔽/禁用 js 脚本.这样一来,校验的代码/逻辑再多也是白写.</p><p>原则:</p><ol><li>所有来自客户端的请求都是不可信的,服务器端必须做所有的参数校验.</li><li>浏览器端有条件还是要写校验的逻辑,因为可以减少服务器端接收无效请求的概率.</li></ol><h2 id="传统的写法"><a href="#传统的写法" class="headerlink" title="传统的写法"></a>传统的写法</h2><p>写起来代码量很大,且效率低下.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">String name = user.getName();</span><br><span class="line">        <span class="keyword">if</span>(name == <span class="keyword">null</span> || name.trim().equals(<span class="string">""</span>) )&#123;</span><br><span class="line">            errors.put(<span class="string">"name"</span>, <span class="string">"name不能为空!"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(name.trim().length()&gt;<span class="number">20</span> )&#123;</span><br><span class="line">                errors.put(<span class="string">"name"</span>, <span class="string">"name长度不能超过20!"</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(name 不满足某个格式)&#123;</span><br><span class="line">                    errors.put(<span class="string">"name"</span>, <span class="string">"name格式不正确!"</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(userService.getByName(name.trim()) != <span class="keyword">null</span>)&#123;</span><br><span class="line">                        errors.put(<span class="string">"name"</span>, <span class="string">"用户名已被使用!"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p><ul><li>JSR-303 是JAVA EE 6 中的一项子规范，称为Bean Validation，官方参考实现是Hibernate Validator.</li><li>此实现与Hibernate ORM 没有任何关系， JSR303 用于对Java Bean 的属性值值进行验证。</li><li>Spring MVC 支持 JSR-303，可以在控制器中对表单提交的数据方便地验证。</li></ul><h2 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h2><h3 id="配置-pom-xml"><a href="#配置-pom-xml" class="headerlink" title="配置 pom.xml"></a>配置 pom.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--JSR303--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.0.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置-MessageSource"><a href="#配置-MessageSource" class="headerlink" title="配置 MessageSource"></a>配置 MessageSource</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MessageSource <span class="title">validationMessageSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ResourceBundleMessageSource messageSource = <span class="keyword">new</span> ResourceBundleMessageSource();</span><br><span class="line">        <span class="comment">//字符编码</span></span><br><span class="line">        messageSource.setDefaultEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">        <span class="comment">//Set an array of basenames</span></span><br><span class="line">        messageSource.setBasenames(<span class="string">"validationMessages"</span>);</span><br><span class="line">        <span class="comment">//whether to use the message code as default message</span></span><br><span class="line">        messageSource.setUseCodeAsDefaultMessage(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> messageSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Validator <span class="title">getValidator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LocalValidatorFactoryBean lvfb = <span class="keyword">new</span> LocalValidatorFactoryBean();</span><br><span class="line">        lvfb.setValidationMessageSource(validationMessageSource());</span><br><span class="line">        <span class="keyword">return</span> lvfb;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="准备校验逻辑"><a href="#准备校验逻辑" class="headerlink" title="准备校验逻辑"></a>准备校验逻辑</h3><ul><li>彻底理解需求</li><li>整理请求参数列表</li><li>整理校验逻辑</li></ul><h3 id="准备资源文件"><a href="#准备资源文件" class="headerlink" title="准备资源文件"></a>准备资源文件</h3><blockquote><p>基于 i18n 国际化技术，需要提供多语言环境下的各种资源文件</p></blockquote><h5 id="validationMessages-en-properties"><a href="#validationMessages-en-properties" class="headerlink" title="validationMessages_en.properties"></a>validationMessages_en.properties</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">user.name.invalid=Username must be between 6 and 12</span><br><span class="line">user.password.invalid=The password must be between 6 and 12</span><br><span class="line">user.age.invalid=Age must be between 18 and 80.</span><br></pre></td></tr></table></figure><h5 id="validationMessages-zh-properties"><a href="#validationMessages-zh-properties" class="headerlink" title="validationMessages_zh.properties"></a>validationMessages_zh.properties</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">user.name.invalid=用户名必须在6到12之间</span><br><span class="line">user.password.invalid=密码必须在6到12之间</span><br><span class="line">user.age.invalid=年龄必须在18到200之间</span><br></pre></td></tr></table></figure><h3 id="定义校验封装类"><a href="#定义校验封装类" class="headerlink" title="定义校验封装类"></a>定义校验封装类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.hibernate.validator.constraints.NotEmpty;</span><br><span class="line"><span class="keyword">import</span> javax.validation.GroupSequence;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.Max;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.Min;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.NotNull;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.Size;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * User Data Transfer Object</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDto</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="meta">@Size</span>(min = <span class="number">6</span>, max = <span class="number">12</span>, message = <span class="string">"&#123;user.name.invalid&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="meta">@Size</span>(min = <span class="number">6</span>, max = <span class="number">12</span>, message = <span class="string">"&#123;user.password.invalid&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Min</span>(value = <span class="number">18</span>, message = <span class="string">"&#123;user.age.invalid&#125;"</span>)</span><br><span class="line">    <span class="meta">@Max</span>(value = <span class="number">80</span>, message = <span class="string">"&#123;user.age.invalid&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserDto</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="控制器"><a href="#控制器" class="headerlink" title="控制器"></a>控制器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"add"</span>, method = RequestMethod.POST)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(Model model, @Valid UserDto user, BindingResult bindingResult)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (bindingResult.hasErrors()) &#123;</span><br><span class="line">        model.addAttribute(<span class="string">"user"</span>, user);</span><br><span class="line">        model.addAttribute(<span class="string">"errors"</span>, getErrorMap(bindingResult));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"userAdd"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    model.addAttribute(<span class="string">"user"</span>, user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"result"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义转换方法getErrorMap:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将参数错误信息封装到 map</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">getErrorMap</span><span class="params">(BindingResult bindingResult)</span> </span>&#123;</span><br><span class="line">    Map&lt;String, String&gt; errorMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (ObjectError objectError : bindingResult.getAllErrors()) &#123;</span><br><span class="line">        FieldError fieldError = (FieldError) objectError;</span><br><span class="line">        String field = fieldError.getField();</span><br><span class="line">        String error = fieldError.getDefaultMessage();</span><br><span class="line">        errorMap.put(field, error);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> errorMap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="页面"><a href="#页面" class="headerlink" title="页面"></a>页面</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> pageEncoding=<span class="string">"UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;<span class="function">Bean <span class="title">Validation</span> <span class="params">(JSR303)</span>&lt;/title&gt;</span></span><br><span class="line"><span class="function">&lt;/head&gt;</span></span><br><span class="line"><span class="function">&lt;body&gt;</span></span><br><span class="line"><span class="function">&lt;h1&gt;Bean <span class="title">Validation</span> <span class="params">(JSR303)</span>&lt;/h1&gt;</span></span><br><span class="line"><span class="function">&lt;hr/&gt;</span></span><br><span class="line"><span class="function">&lt;p&gt;演示提交一个User对象&lt;/p&gt;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">&lt;form id</span>=<span class="string">"user"</span> action=<span class="string">"$&#123;path&#125;/demo/add"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    &lt;table width=<span class="string">"30%"</span>&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;th&gt;Name:&lt;/th&gt;</span><br><span class="line">            &lt;td&gt;</span><br><span class="line">                &lt;input id=<span class="string">"name"</span> name=<span class="string">"name"</span> type=<span class="string">"text"</span> value=<span class="string">"$&#123;user.name&#125;"</span>/&gt;</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">            &lt;td&gt;</span><br><span class="line">                &lt;span&gt;$&#123;errors.name&#125;&lt;/span&gt;</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;th&gt;Password:&lt;/th&gt;</span><br><span class="line">            &lt;td&gt;</span><br><span class="line">                &lt;input id=<span class="string">"password"</span> name=<span class="string">"password"</span> type=<span class="string">"password"</span> value=<span class="string">"$&#123;user.password&#125;"</span>/&gt;</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">            &lt;td&gt;</span><br><span class="line">                &lt;span&gt;$&#123;errors.password&#125;&lt;/span&gt;</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;th&gt;Age:&lt;/th&gt;</span><br><span class="line">            &lt;td&gt;</span><br><span class="line">                &lt;input id=<span class="string">"age"</span> name=<span class="string">"age"</span> type=<span class="string">"text"</span> value=<span class="string">"$&#123;user.age&#125;"</span>/&gt;</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">            &lt;td&gt;</span><br><span class="line">                &lt;span&gt;$&#123;errors.age&#125;&lt;/span&gt;</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td style=<span class="string">"text-align: center"</span>&gt;</span><br><span class="line">                &lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交"</span>&gt;</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><h3 id="要基于数据库的查询来校验"><a href="#要基于数据库的查询来校验" class="headerlink" title="要基于数据库的查询来校验"></a>要基于数据库的查询来校验</h3><h4 id="思路1-自定义注解类"><a href="#思路1-自定义注解类" class="headerlink" title="思路1:自定义注解类"></a>思路1:自定义注解类</h4><blockquote><p>详见官网文档,写起来较复杂,不推荐新人使用.</p></blockquote><h4 id="思路2-使用代码访问数据库进行校验"><a href="#思路2-使用代码访问数据库进行校验" class="headerlink" title="思路2:使用代码访问数据库进行校验"></a>思路2:使用代码访问数据库进行校验</h4><blockquote><p>写起来简单易读,适合新人使用,比如:</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/register"</span>, method = RequestMethod.POST)</span><br><span class="line">    <span class="comment">//@Valid : 在封装之后,在使用之前,根据 JSR303 注解进行校验,并产生错误信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">register</span><span class="params">(@Valid User user, </span></span></span><br><span class="line"><span class="function"><span class="params">    BindingResult result, Model model)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(result.hasErrors())&#123;</span><br><span class="line">            System.out.println(<span class="string">"发现错误信息"</span>);</span><br><span class="line">            model.addAttribute(<span class="string">"errors"</span>, getErrorMap(result));</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"/index.jsp"</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//基于数据库的查询...</span></span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line"><span class="comment">//        /如果校验不过</span></span><br><span class="line">        model.addAttribute(<span class="string">"errors"</span>, getErrorMap(result));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"/index.jsp"</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//        //如果校验通过</span></span><br><span class="line">        System.out.println(<span class="string">"校验通过"</span>);</span><br><span class="line">        userService.save(user);</span><br><span class="line">        model.addAttribute(<span class="string">"user"</span>, user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"/WEB-INF/jsp/result.jsp"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="JSR303提供"><a href="#JSR303提供" class="headerlink" title="JSR303提供"></a>JSR303提供</h3><table><thead><tr><th>注解类</th><th>说明</th></tr></thead><tbody><tr><td>@Null</td><td>必须为 null</td></tr><tr><td>@NotNull</td><td>必须不为 null</td></tr><tr><td>@AssertTrue</td><td>必须为 true</td></tr><tr><td>@AssertFalse</td><td>必须为 false</td></tr><tr><td>@Min(value)</td><td>必须是一个数字，其值必须大于等于指定的最小值</td></tr><tr><td>@Max(value)</td><td>必须是一个数字，其值必须小于等于指定的最大值</td></tr><tr><td>@DecimalMin(value)</td><td>必须是一个数字，其值必须大于等于指定的最小值</td></tr><tr><td>@DecimalMax(value)</td><td>必须是一个数字，其值必须小于等于指定的最大值</td></tr><tr><td>@Size(max, min)</td><td>大小必须在指定的范围内</td></tr><tr><td>@Digits (integer, fraction)</td><td>必须是一个数字，其值必须在可接受的范围内</td></tr><tr><td>@Past</td><td>必须是一个过去的日期</td></tr><tr><td>@Future</td><td>必须是一个将来的日期</td></tr><tr><td>@Pattern(value)</td><td>必须符合指定的正则表达式</td></tr></tbody></table><h4 id="Hibernate-Validator提供"><a href="#Hibernate-Validator提供" class="headerlink" title="Hibernate Validator提供"></a>Hibernate Validator提供</h4><table><thead><tr><th>注解类</th><th>说明</th></tr></thead><tbody><tr><td>@Email</td><td>必须是电子邮箱地址</td></tr><tr><td>@Length</td><td>字符串的长度必须在指定的范围内</td></tr><tr><td>@NotEmpty</td><td>必须非空(有空格就不算Empty)</td></tr><tr><td>@NotBlank</td><td>字符串的必须非空(单纯空格算Blank)</td></tr><tr><td>@Range</td><td>必须在指定范围内</td></tr></tbody></table><h4 id="Spring-MVC提供"><a href="#Spring-MVC提供" class="headerlink" title="Spring MVC提供"></a>Spring MVC提供</h4><table><thead><tr><th>注解类</th><th>说明</th></tr></thead><tbody><tr><td>@Valid</td><td>数据需要校验</td></tr></tbody></table><h2 id="Log4j"><a href="#Log4j" class="headerlink" title="Log4j"></a>Log4j</h2><blockquote><p>在练习期间可以使用<code>System.out.println()</code>的方法，但是在实际项目的开发过程中，需要使用日志技术</p></blockquote><h3 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="log4-properties"><a href="#log4-properties" class="headerlink" title="log4.properties"></a>log4.properties</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#log level</span><br><span class="line">log4j.rootLogger=info,stdout</span><br><span class="line">### direct log messages to stdout ###</span><br><span class="line">log4j.appender.stdout=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.stdout.Target=System.out</span><br><span class="line">log4j.appender.stdout.layout=org.apache.log4j.EnhancedPatternLayout</span><br><span class="line">log4j.appender.stdout.layout.ConversionPattern=%d&#123;yyyy-MM-dd HH:mm:ss,SSS&#125; %p %c:%L - %m%n</span><br><span class="line">#log4j.logger.org.hibernate=warn</span><br><span class="line">#log4j.logger.org.springframework=warn</span><br><span class="line">#log4j.logger.com.tz=debug</span><br></pre></td></tr></table></figure><h3 id="使用日志"><a href="#使用日志" class="headerlink" title="使用日志"></a>使用日志</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = Logger.getLogger(AdminController.class);</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/work1"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">work1</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">    LOGGER.debug(<span class="string">"AdminController work1()..."</span>);</span><br><span class="line">    String result = <span class="string">"work 1"</span>;</span><br><span class="line">    model.addAttribute(<span class="string">"result"</span>, result);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"/WEB-INF/jsp/hello.jsp"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Spring mvc， MVC框架
    
    </summary>
    
      <category term="框架" scheme="http://www.teacherye.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="MVC" scheme="http://www.teacherye.com/categories/%E6%A1%86%E6%9E%B6/MVC/"/>
    
      <category term="SpringMVC" scheme="http://www.teacherye.com/categories/%E6%A1%86%E6%9E%B6/MVC/SpringMVC/"/>
    
    
      <category term="spring" scheme="http://www.teacherye.com/tags/spring/"/>
    
      <category term="springmvc" scheme="http://www.teacherye.com/tags/springmvc/"/>
    
      <category term="mvc框架" scheme="http://www.teacherye.com/tags/mvc%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC学习7-响应和下载</title>
    <link href="http://www.teacherye.com/2018/04/16/springmvc/06-response/"/>
    <id>http://www.teacherye.com/2018/04/16/springmvc/06-response/</id>
    <published>2018-04-16T03:01:47.000Z</published>
    <updated>2018-04-19T09:26:51.547Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-MVC"><a href="#Spring-MVC" class="headerlink" title="Spring MVC"></a>Spring MVC</h1><blockquote><p>SpringMVC是基于MVC思想的JAVA WEB实现框架，是Spring家族的一员，它基于前置控制器来接收并分发请求，支持参考验证、请求参数封装、拦截、Restful等功能，是目前较为流行的MVC框架</p></blockquote><p>本系列学习笔记包含如下的课程内容：</p><ul><li>MVC思想</li><li>Hello案例</li><li>请求和响应处理</li><li>文件上传和下载处理</li><li>参数验证</li><li>请求拦截</li><li>RESTful风格</li><li>日志</li></ul><hr><a id="more"></a><h2 id="Response"><a href="#Response" class="headerlink" title="Response"></a>Response</h2><blockquote><p>Spring MVC 在提供 Html,JSP 等常规视图的同时, 也支持返回多种常见响应格式。</p></blockquote><h3 id="XML-格式响应"><a href="#XML-格式响应" class="headerlink" title="XML 格式响应"></a>XML 格式响应</h3><ul><li>通过 <code>produces = &quot;text/xml&quot;</code> 来设置响应内容为 XML</li><li>@ResponseBody 将返回数据作为响应主体</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/user.xml"</span>, method = RequestMethod.GET, produces = <span class="string">"text/xml"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getXmlUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setName(<span class="string">"jack"</span>);</span><br><span class="line">    user.setPassword(<span class="string">"123"</span>);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>切记,要使用 @XmlRootElement 来对 User 进行注解,否则将会报 Http Status 406 错误:<br>The resource identified by this request is only capable of generating responses with characteristics not acceptable according to the request “accept” headers.</p></blockquote><p>比如:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.xml.bind.annotation.XmlRootElement;</span><br><span class="line"></span><br><span class="line"><span class="meta">@XmlRootElement</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br></pre></td></tr></table></figure></p><p>总之,在控制器的方法的返回类型所对应类名上面, 一定要加 <code>@XmlRootElement</code></p><h4 id="用例分析"><a href="#用例分析" class="headerlink" title="用例分析:"></a>用例分析:</h4><p>如果你的项目中,需要返回 XML 的数据格式,并且数据是动态的(比如,来自数据库),则可以考虑以上的实现.</p><h3 id="JSON-格式响应"><a href="#JSON-格式响应" class="headerlink" title="JSON 格式响应"></a>JSON 格式响应</h3><blockquote><p>返回json格式的字符串</p></blockquote><h4 id="配置依赖"><a href="#配置依赖" class="headerlink" title="配置依赖"></a>配置依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>通过 <code>produces = &quot;application/json&quot;</code> 来设置响应内容为 JSON</li><li>@ResponseBody 将返回数据作为响应主体</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/demo2"</span>, method = RequestMethod.GET, produces = <span class="string">"application/json"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getJsonUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setName(<span class="string">"mike"</span>);</span><br><span class="line">    user.setPassword(<span class="string">"456"</span>);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：这种方式对实体类User没有要求要打上@RootElement注解.</p><h2 id="File下载"><a href="#File下载" class="headerlink" title="File下载"></a>File下载</h2><blockquote><p>思路和基于 Servlet 的实现一致，都是设置响应内容为具体文件类型再将文件写入输出流即可。</p></blockquote><p>代码片断：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/demo3"</span>, method = RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getFile</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">    ServletContext application = request.getSession().getServletContext();</span><br><span class="line">    <span class="comment">//这里的文件是“写死的”，可以根据用户的请求来获取具体要下载的文件路径</span></span><br><span class="line">    String realPath = application.getRealPath(<span class="string">"files"</span>);</span><br><span class="line">    String fullPath = realPath + File.separator + <span class="string">"test.xls"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关键点</span></span><br><span class="line">    response.setContentType(<span class="string">"application/vnd.ms-excel"</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        File downloadFile = <span class="keyword">new</span> File(fullPath);</span><br><span class="line">        FileInputStream inputStream = <span class="keyword">new</span> FileInputStream(downloadFile);</span><br><span class="line">        IOUtils.copy(inputStream, response.getOutputStream());</span><br><span class="line">        response.flushBuffer();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      Spring mvc， MVC框架
    
    </summary>
    
      <category term="框架" scheme="http://www.teacherye.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="MVC" scheme="http://www.teacherye.com/categories/%E6%A1%86%E6%9E%B6/MVC/"/>
    
      <category term="SpringMVC" scheme="http://www.teacherye.com/categories/%E6%A1%86%E6%9E%B6/MVC/SpringMVC/"/>
    
    
      <category term="spring" scheme="http://www.teacherye.com/tags/spring/"/>
    
      <category term="springmvc" scheme="http://www.teacherye.com/tags/springmvc/"/>
    
      <category term="mvc框架" scheme="http://www.teacherye.com/tags/mvc%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
</feed>
